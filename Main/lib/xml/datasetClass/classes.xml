<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet href="./../../xsl/datasetstyle.xsl" type="text/xsl" ?>

<!-- define here reusable text -->
<!DOCTYPE datasetClasses [
  <!ENTITY organismAbbrev "The standard abbreviation for this organism.  For example TgonME49 for T. gondii ME49.  This abbreviation is like a 'primary key' for the organism.  It must be unique to this organism, and may never change for the lifetime of the workflow.  It should only include alpha-numeric characters.">
  <!ENTITY projectName "The name of the project, eg, PlasmoDB.  This value is used to find graph files that are generated from datasets, so it must be equal to the name of project directory which contains the project's dataset files.  It is stored in in the GUS database in Core.ProjectInfo.name and must agree with the project= (FIX: IS THAT CORRECT?) value in gus.config.  It is also used in the names of website files and directories.">
  <!ENTITY organismFullName "The full name for this organism.  This must match the scientific name in the NCBI taxonomy for this organism (see ncbiTaxonId).  It is specified redundantly to cross validate the name and ncbiTaxonId.">
  <!ENTITY ncbiTaxonId "The NCBI Taxonomy ID for this organism.  The scientific name for this entry in the NCBI Taxonomy must match the organismFullName. ">
  <!ENTITY speciesNcbiTaxonId "The NCBI Taxonomy for the species that this organism is from.  This ID must agree with the ncbiTaxonId:  it must be at or above it in the taxonomy and must have rank = 'species'">
  <!ENTITY referenceStrainOrganismAbbrev "The organism abbreviation of the reference strain for this organism's species.  If this orgnanism is a reference strain, this value must be equal to its organismAbbrev; otherwise it must be equal to the organism abbreviation of this species' reference strain.  (These rules are validated by the triggers on the ApiDB.Organism table.">
  <!ENTITY isAnnotatedGenome "[true|false] If true then this organism's genome has been annotated with gene models by the data provider.">
  <!ENTITY strainAbbrev "The abbreviation to use for this organism's strain.  Should not include the species name.  For example, for the organism 'Plasmodium Falciparum 3D7', this should be set to '3D7'.  It does not need to agree exactly with the organism's name in the NCBI Taxonomy.   This abbreviation should not include FIX: WHAT CHARS GIVE US TROUBLE?">
  <!ENTITY name "The name of this dataset, typically the provider, for example 'GeneDB.'  This name is used to form the directory name in Manual Delivery where this data will be found, and the name of the resource in the database.  It is not displayed to the end-user.">
  <!ENTITY version "The version of this dataset, typically a release number or a date in yyyy-mm-dd format. This version is used to find this dataset in Manual Delivery.  It is displayed to end-users.">
  <!ENTITY soTerm "The Sequence Ontology term that describes the sequence data in this dataset.  It is used as part of the directory name for this dataset in Manual Delivery.">
  <!ENTITY isfMappingFile "The mapping file required by the GUS InsertSequenceFeatures (ISF) plugin.  See the ISF documentation.">

]>


<datasetClasses>

  <defaultPropertyDescriptions>
  </defaultPropertyDescriptions>

  <datasetClass class="organism" category="" datasetFileHint="">
    <purpose>Add an organism to the workflow.  This "dataset" is not actually a dataset.  Instead, it provides the framework and essential properties of the organism so that real datasets can be added to the organism.  It is critical that every property of this dataset be carefully reviewed for correctness before the workflow runs this organism.   Correcting them after the workflow runs is very expensive.  NOTE: in the datasets file, reference strains must precede secondary strains</purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="projectName">&projectName;</prop>
    <prop name="publicOrganismAbbrev">The abbreviation for this organism that the end-user will see.   It is used in displays when there is very limited space.</prop>
    <prop name="organismFullName">&organismFullName;</prop>
    <prop name="organismNameForFiles">The name of this organism for use in file and directory names, for example on the download site.  It should not include white space or other characters that are not file friendly.</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="speciesNcbiTaxonId">&speciesNcbiTaxonId;</prop>
    <prop name="isReferenceStrain">[true|false] If true then this organism is the reference strain for its species.  Exactly one organism per species must set this value to 'true', and all others must set it to 'false'.  FIX: NEED TO ADD VALIDATION FOR THIS TO InsertOrganism PLUGIN.  The reference strain for a species has the responsibility for loading species-wide datasets, for example ESTs.  Dataset classes that are intended to be used only by reference strains are typically named with the prefix 'referenceStrain-', for example 'referenceStrain-dbEST'.  Be sure to include these datasets in reference strains, and omit them from other organisms.</prop>
    <prop name="referenceStrainOrganismAbbrev">&referenceStrainOrganismAbbrev;</prop>
    <prop name="isFamilyRepresentative">[true|false] If true this organism acts as a representative for its taxonomic family.  Some dataset classes are designed to be included only for these representatives.  For example, isolates might be loaded only at the family level. </prop>
    <prop name="familyRepOrganismAbbrev">Organism abbreviation of the organism that, for this organism, acts as representative for its family.  All organisms must provide this value, even if self</prop>
    <prop name="familyNcbiTaxonIds">Only needed if this organism is a family representative.  One or more NCBI taxonomy IDs that are the root IDs for this family.  This is a flexible mechanism to steer around imperfections in the NCBI taxonomy at the family level.</prop>
    <prop name="familyNameForFiles">Only needed if this organism is a family representative.  The taxon name to use in download files for this family.</prop>
    <prop name="isAnnotatedGenome">&isAnnotatedGenome;</prop>
    <prop name="hasTemporaryNcbiTaxonId">[true|false] If true then this organism is not included in the NCBI Taxonomy table and requires a temporary taxon id (see ncbiTaxonId).  FIX: MORE HERE.</prop>
    <prop name="orthomclAbbrev">The abbreviation for this organism used by OrthoMCL-DB.  FIX: MORE HERE</prop>
    <prop name="strainAbbrev">&strainAbbrev;</prop>
    <prop name="genomeSource">The name of the provider of this organism's genome data.  For example, "GeneDB."  This value is included in the definition lines of fasta files including the genome and feature sequences, to give credit to the provider.</prop>
    <prop name="genomeVersion">The date or version number for this organism's genome, as determined by its provider.  If a date, typically the date the data was downloaded.   FIX:  WHAT DO WE USE THIS FOR?</prop>
    <prop name="annotationIncludesTRNAs">[true|false] If true then this genome's annotation includes predicted tRNAs.  This property is read by workflow steps that predict tRNAs.   If it is true those steps are skipped.</prop>
    <prop name="runExportPred">[true|false]  If "true" then the ExportPred program should be run on this organism. Typically only true for Plasmodium organisms</prop>
    <prop name="taxonHierarchyForBlastxFilter">A space delimited list of scientific names for taxa to be used to filter NRDB protein matches against this organism's genome  sequence.  For example:  Eukaryota Apicomplexa Plasmodium.  This will FIX THIS... EXPLAIN IT.</prop>
    <prop name="skipOrfs">[true|false] If true then skip making orfs and skip generating download files for orfs</prop>

    <prop name="maxIntronSize">An approximation of the maximum intron size.  Used by BLAT when mapping proteins or DNA to this organisms genome.</prop>

    <graphTemplateFile name="project.xml"/>

  </datasetClass>

  <datasetClass class="validateOrganismInfo" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="strainAbbrev">&strainAbbrev;</prop>
    <prop name="projectName">&projectName;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="speciesNcbiTaxonId">&speciesNcbiTaxonId;</prop>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

  </datasetClass>

  <!-- an instance of this class is needed if and only if an organism is a -->
  <!-- reference strain.  it is used by the strain comparison machinery -->
  <datasetClass class="referenceStrain" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="isAnnotatedGenome">&isAnnotatedGenome;</prop>

    <graphTemplateFile name="project.xml"/>

  </datasetClass>



  <!-- Category: genome -->

<!-- chromosomeMap.txt file with 3 tab delimited columns, source_id,chromosome,chromosome_order_number, must be in final dir for chromosomes -->
  <datasetClass class="genbank_primary_genome" category="" datasetFileHint="">
    <purpose>Load the primary genome sequence and annotation for an organism, when the data is provided in a GenBank format file.  </purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm">[choromsome, mitochondrial_chromosome, apicoplast_chromosome, supercontig, contig] &soTerm;</prop>
    <prop name="mapFile">&isfMappingFile;</prop>
   

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_primary_genome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              type="genome"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_genbank/${version}/final/">
        <dir name="final">
           <descrip>description would go here</descrip>
           <dir name="someSubDir">
             <descrip>subdir's descrip</descrip>
           </dir>
           <file name="*.fasta">more descrip</file>
           <file name="anotherFile">more descrip</file>
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/final/genome.gbf --chromosomeMapFile @@dataDir@@/final/chromosomeMap.txt --fileFormat genbank --soExtDbRlsName "SO_RSRC" --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out --validationLog @@dataDir@@/validation.log </pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="insertScaffoldGapFeatures" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="genomeDbName"/>
    <prop name="version">&version;</prop>
    <!-- DOCUMENTED SO FAR -->

    <graphTemplateFile name="primaryVirtualGenome.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_insertScaffoldGapFeatures_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertScaffoldGapFeatures"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

     <pluginArgs>--extDbRlsName ${genomeDbName} --extDbRlsVer ${version}</pluginArgs>
    </datasetLoader>
  </datasetClass>

<!-- chromosomeMap.txt file with 3 tab delimited columns, source_id,chromosome,chromosome_order_number, must be in final dir for chromosomes -->
  <datasetClass class="genbank_secondary_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>
    <prop name="mapFile"/>
    

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${soTerm}_${name}_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_genbank/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/final/genome.gbf --chromosomeMapFile @@dataDir@@/final/chromosomeMap.txt --fileFormat genbank --soExtDbRlsName "SO_RSRC" --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out --validationLog @@dataDir@@/validation.log </pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="genbank_organelle_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>
    <prop name="mapFile"/>
    <prop name="organelle"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${soTerm}_${name}_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
              type="organellar_genome"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_genbank/${version}/final/genome.gbf">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.gbf --fileFormat genbank --soExtDbRlsName "SO_RSRC" --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out --validationLog @@dataDir@@/validation.log</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <!-- This class is to be used for loading gene features outside of official gene model -->
  <!-- One example is deprecated genes from GiardiaDB -->


<!-- chromosomeMap.txt file with 3 tab delimited columns, source_id,chromosome,chromosome_order_number, must be in final dir for chromosomes -->
  <datasetClass class="embl_primary_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>
    <prop name="mapFile"/>
 

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_primary_genome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              type="genome"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_embl/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/final/genome.embl --chromosomeMapFile @@dataDir@@/final/chromosomeMap.txt --fileFormat embl --soExtDbRlsName "SO_RSRC" --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out --validationLog @@dataDir@@/validation.log</pluginArgs>
    </datasetLoader>
  </datasetClass>

<!-- chromosomeMap.txt file with 3 tab delimited columns, source_id,chromosome,chromosome_order_number, must be in final dir for chromosomes -->
  <datasetClass class="embl_secondary_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>
    <prop name="mapFile"/>
   

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${soTerm}_${name}_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_embl/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/final/genome.embl --chromosomeMapFile @@dataDir@@/final/chromosomeMap.txt --fileFormat embl --soExtDbRlsName "SO_RSRC" --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out--validationLog @@dataDir@@/validation.log </pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="embl_organelle_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>
    <prop name="mapFile"/>
    <prop name="organelle"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${soTerm}_${name}_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
              scope="organism"
              type="organellar_genome"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_embl/${version}/final/genome.embl">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.embl --fileFormat embl --soExtDbRlsName "SO_RSRC" --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out--validationLog @@dataDir@@/validation.log</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <datasetClass class="GeneDB_GFF_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>
    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/GeneDB_GFF/${version}/final/genome.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/geneDBGFF2Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/chromosomeMap.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="GeneDB_GFF_secondary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${soTerm}_GeneDB_genome_features_RSRC"
              version="${version}"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_GeneDB_GFF/${version}/final/genome.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/geneDBGFF2Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_${soTerm}_RSRC/final/chromosomeMap.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <!-- must be used in conjunction w/ fasta_organelle_genome with name="GeneDB" -->
  <datasetClass class="GeneDB_GFF_organelle_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${soTerm}_GeneDB_features_RSRC"
              version="${version}"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_GeneDB_GFF/${version}/final/genome.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/geneDBGFF2Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence</pluginArgs>
    </datasetLoader>
  </datasetClass>
  
  <datasetClass class="GTF_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>
    <prop name="idPrefix"/>
    <prop name="source"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              type="genome"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${source}_gff3/${version}/final/genome.gtf">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>gtf2gff3_3level -p ${idPrefix} @@dataDir@@/genome.gtf > @@dataDir@@/genome.gff3</unpack>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>    

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/genericGFF2Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName SO_RSRC --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence</pluginArgs>
    </datasetLoader>
  </datasetClass>
  
    <datasetClass class="GFF_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>
    <prop name="source"/>
    <prop name="mapFile"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
              type="genome"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${source}_gff3/${version}/final/genome.gff3">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>    

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff" --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/chromosomeMap.txt --fileFormat gff3 --soExtDbRlsName SO_RSRC  --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence</pluginArgs>
    </datasetLoader>
  </datasetClass>
  
    <datasetClass class="NoPreprocess_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>
    <prop name="source"/>
    <prop name="mapFile"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              type="genome"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${source}_gff3/${version}/final/genome.gff">
        <dir name="final">
        </dir>
      </manualGet>
 

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff" --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/chromosomeMap.txt --fileFormat gff3 --soExtDbRlsName SO_RSRC  --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="NoPreprocess_secondary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>
    <prop name="name"/>
    <prop name="mapFile"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${soTerm}_genome_features_RSRC"
              version="${version}"
              parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
              plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              type="genome"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

    <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_gff3/${version}/final/genome.gff">
        <dir name="final">
        </dir>
    </manualGet>

    <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff" --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_secondary_genome_RSRC/final/chromosomeMap.txt --fileFormat gff3 --soExtDbRlsName SO_RSRC  --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="Broad_GFF_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_Broad_gff3/${version}/final/genome.gtf">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>convertGTFToGFF3 @@dataDir@@/genome.gtf > @@dataDir@@/genome.gff3</unpack>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>    

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/broadGFF32Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/chromosomeMap.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="NoPreprocess_GTF_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_Broad_gff3/${version}/final/genome.gtf">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>convertGTFToGFF3 @@dataDir@@/genome.gtf > @@dataDir@@/genome.gff3</unpack>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>    

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/broadGFF32Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/chromosomeMap.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="VBI_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTerm"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_Broad_gff3/${version}/final/genome.gtf">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>convertGTFToGFF3 @@dataDir@@/genome.gtf > @@dataDir@@/genome.gff3</unpack>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>    

      <pluginArgs>--extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/broadGFF32Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/chromosomeMap.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

<!-- chromosomeMap.txt file with 3 tab delimited columns, source_id,chromosome,chromosome_order_number, must be in final dir for chromosomes -->
  <datasetClass class="fasta_primary_genome_sequence" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="table"/>  <!-- example:  DoTS::NASequence -->
    <prop name="soTerm"/>
    <prop name="sourceIdRegex"/>
 
    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_primary_genome_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="organism"
              type="genome"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_fasta/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseName %DATASET_NAME% --externalDatabaseVersion %DATASET_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/final/genome.fasta --chromosomeMapFile @@dataDir@@/final/chromosomeMap.txt --soTermName ${soTerm} --regexSourceId "${sourceIdRegex}" --tableName "${table}"</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="fasta_organelle_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="table"/>  <!-- example:  DoTS::NASequence -->
    <prop name="soTerm"/>
    <prop name="sourceIdRegex"/>
    <prop name="organelle"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${soTerm}_${name}_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
	      parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
              scope="organism"
              type="organellar_genome"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_fasta/${version}/final/genome.fasta">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseName %PARENT_DATASET_NAME% --externalDatabaseVersion %PARENT_DATASET_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/genome.fasta --soTermName ${soTerm} --regexSourceId "${sourceIdRegex}" --tableName "${table}"</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="fasta_secondary_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="table"/>  <!-- example:  DoTS::NASequence -->
    <prop name="soTerm"/>
    <prop name="sourceIdRegex"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${soTerm}_${name}_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              parentDatasetName="${organismAbbrev}_primary_genome_RSRC"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_fasta/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseName %PARENT_DATASET_NAME% --externalDatabaseVersion %PARENT_DATASET_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/final/genome.fasta --chromosomeMapFile @@dataDir@@/final/chromosomeMap.txt --soTermName ${soTerm} --regexSourceId "${sourceIdRegex}" --tableName "${table}"</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="primaryVirtualGenome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="virtualSeqSOTerm"/>
    <prop name="sourceIdPrefix"/>  <!-- optional.  add this prefix to the source ID. put "" in if the value is null -->
    <prop name="genomeVersion"/>

    <graphTemplateFile name="primaryVirtualGenome.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${virtualSeqSOTerm}_primary_virtual_genome_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertVirtualSeqFromAgpFile"
              scope="organism"
              type="genome"
              organismAbbrev="${organismAbbrev}">
      
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${virtualSeqSOTerm}_assembly_agp/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--agpFile @@dataDir@@/final/assembly.agp --seqPieceExtDbName ${organismAbbrev}_primary_genome_RSRC --seqPieceExtDbRlsVer ${genomeVersion} --virSeqExtDbName %DATASET_NAME% --virSeqExtDbRlsVer %DATASET_VERSION% --virtualSeqSOTerm ${virtualSeqSOTerm}  --ncbiTaxId ${ncbiTaxonId} --soExtDbRlsName "SO_RSRC"  --sourceIdPrefix ${sourceIdPrefix} --chromosomeOrderMappingFile @@dataDir@@/final/chromosomeMap.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="secondaryVirtualGenome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="virtualSeqSOTerm"/>
    <prop name="sourceIdPrefix"/>  <!-- optional.  add this prefix to the source ID. put "" in if the value is null -->
    <prop name="genomeVersion"/>

    <graphTemplateFile name="primaryVirtualGenome.xml"/>
    <datasetLoader datasetName="${organismAbbrev}_${virtualSeqSOTerm}_secondary_virtual_genome_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertVirtualSeqFromAgpFile"
              scope="organism"
              type="genome"
              organismAbbrev="${organismAbbrev}">
      
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${virtualSeqSOTerm}_assembly_agp/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--agpFile @@dataDir@@/final/assembly.agp --seqPieceExtDbName ${organismAbbrev}_primary_virtual_genome_RSRC --seqPieceExtDbRlsVer ${genomeVersion} --virSeqExtDbName %DATASET_NAME% --virSeqExtDbRlsVer  %DATASET_VERSION% --virtualSeqSOTerm ${virtualSeqSOTerm}  --ncbiTaxId ${ncbiTaxonId} --soExtDbRlsName "SO_RSRC"  --sourceIdPrefix ${sourceIdPrefix} --chromosomeOrderMappingFile @@dataDir@@/final/chromosomeMap.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <!-- Category: genomeFeature -->
  <!-- NOTE: THIS CLASS IS NOT TO BE USED FOR THE PRIMARY ANNOTATION -->
  <datasetClass class="unofficialGeneFeatures_GFF2" category="" datasetFileHint="">
    <purpose>Gene features that are not provided by the annotation center</purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="mapFile"/>
    <prop name="gff2GroupTag"/>
    <prop name="genomeVersion"/>


    <graphTemplateFile name="unofficialGeneFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_unofficialGeneFeature_${name}_GFF2_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}_GFF/${version}/final/features.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION% --seqExtDbName ${organismAbbrev}_primary_genome_RSRC --seqExtDbRlsVer ${genomeVersion} --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/features.gff --fileFormat gff2  --gff2GroupTag "${gff2GroupTag}" --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId} --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --bioperlTreeOutput @@dataDir@@/bioperlTree.out --notOfficialAnnotation</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="unofficialGeneFeatures_GFF3" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="mapFile"/>
    <prop name="genomeVersion"/>


    <graphTemplateFile name="unofficialGeneFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_unofficialGeneFeature_${name}_GFF3_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}_GFF/${version}/final/features.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION% --seqExtDbName ${organismAbbrev}_primary_genome_RSRC --seqExtDbRlsVer ${genomeVersion} --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/features.gff --fileFormat gff3   --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId} --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --bioperlTreeOutput @@dataDir@@/bioperlTree.out --notOfficialAnnotation</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <datasetClass class="unofficialGeneFeatures_embl" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="mapFile"/>
    <prop name="genomeVersion"/>


    <graphTemplateFile name="unofficialGeneFeatures.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_unofficialGeneFeature_${name}_embl_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}_embl/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION% --seqExtDbName ${organismAbbrev}_primary_genome_RSRC --seqExtDbRlsVer ${genomeVersion} --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/final --inputFileExtension "embl" --fileFormat embl   --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId} --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --bioperlTreeOutput @@dataDir@@/bioperlTree.out --validationLog @@dataDir@@/validation.log --notOfficialAnnotation</pluginArgs>  
    </datasetLoader>
  </datasetClass>



  <!-- Category: genomeFeature -->
  <!-- NOTE: THIS CLASS IS NOT TO BE USED FOR GENES -->
  <datasetClass class="genomeFeatures_GFF2" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="mapFile"/>
    <prop name="gff2GroupTag"/>
    <prop name="genomeVersion"/>


    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_genomeFeature_${name}_GFF2_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}_GFF/${version}/final/features.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION% --seqExtDbName ${organismAbbrev}_primary_genome_RSRC --seqExtDbRlsVer ${genomeVersion} --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/features.gff --fileFormat gff2  --gff2GroupTag "${gff2GroupTag}" --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId} --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </datasetLoader>
  </datasetClass>


<!-- Category: genomeFeature -->
  <!-- NOTE: THIS CLASS IS FOR FEATURES THAT ARE ON THE VIRTUAL SEQS -->
  <datasetClass class="virtualSeq_GFF2" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="mapFile"/>
    <prop name="gff2GroupTag"/>
    <prop name="virtualGenomeName"/>
    <prop name="virtualGenomeVersion"/>

    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_virtualSeq_${name}_GFF2_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}_GFF/${version}/final/features.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION% --seqExtDbName ${virtualGenomeName} --seqExtDbRlsVer ${virtualGenomeVersion} --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/features.gff --fileFormat gff2  --gff2GroupTag "${gff2GroupTag}" --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId} --naSequenceSubclass VirtualSequence --seqIdColumn source_id  --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <!-- Category: genomeFeature -->
  <datasetClass class="genomeFeatures_GFF3" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="mapFile"/>
    <prop name="genomeVersion"/>


    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_genomeFeature_${name}_GFF3_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}_GFF/${version}/final/features.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION% --seqExtDbName ${organismAbbrev}_primary_genome_RSRC --seqExtDbRlsVer ${genomeVersion} --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/features.gff --fileFormat gff3   --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId} --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="updateEviganSecondaryScore" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_updateEviganSecondaryScore_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="feature"
              subType="alternate_gene_model"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

     <unpack>updateEviganSecondaryScore.pl --evigan_ext_db_rls_spec "${organismAbbrev}_genomeFeature_${name}_GFF2_RSRC|${version}"</unpack>
     <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <!-- Category: ESTs -->

  <!-- NOTE: this dataset class only gets the sequences, it does not map
       them to the genome.  See transcriptsFromReferenceStrain
       ONLY INCLUDE IF A REFERENCE STRAIN
  -->

  <datasetClass class="referenceStrain-dbEST" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="speciesNcbiTaxonId">&speciesNcbiTaxonId;</prop>

    <graphTemplateFile name="ESTs.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_dbEST_RSRC" version="TODAY"
	      plugin="GUS::Supported::Plugin::dbEST"
              scope="species"
              type="EST"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>getSubTaxa --ncbiTaxId ${speciesNcbiTaxonId} --outputFile @@dataDir@@/taxonIdFile</unpack>

      <unpack>createPropFile --file @@dataDir@@/dbestProp --propList "dbestLogin:@@dbestLogin@@,dbestPswd:@@dbestPswd@@"</unpack>

      <pluginArgs>--span 500 --taxonFile @@dataDir@@/taxonIdFile --extDbName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION% --soExtDbRlsName "SO_RSRC" --dbestLoginFile @@dataDir@@/dbestProp --dbestConnect "@@dbestConnect@@" --do_not_update</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <!-- NOTE: this dataset class only gets the sequences, it does not map
       them to the genome.  See transcriptsFromReferenceStrain
       ONLY INCLUDE IF A REFERENCE STRAIN
  -->

  <datasetClass class="referenceStrain-ESTsFromFasta" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="version">&version;</prop>
    <prop name="name">&name;</prop>
    <prop name="sourceIdRegex"/>
    <prop name="soTerm"/>
    <prop name="isPutativeFullLength"/> <!-- true or false -->
    <prop name="libraryVector"/>
    <prop name="libraryStage"/>
    <prop name="libraryName"/>
    <prop name="libraryDesc"/>
    <prop name="contactName"/>
    <prop name="contactAddress1"/>
    <prop name="contactAddress2"/>

    <graphTemplateFile name="ESTs.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_EST_${name}_sequences_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadEstsFromFastaFile"
              scope="species"
              type="EST"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/EST/${name}/${version}/final/ests.fasta">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--sourceIdRegex "${sourceIdRegex}" --fastaFile @@dataDir@@/ests.fasta --externalDatabaseName %DATASET_NAME% --externalDatabaseVer %DATASET_VERSION%  --SOTermName '${soTerm}' --ncbiTaxId ${ncbiTaxonId} --libraryVector '${libraryVector}' --putativeFullLength ${isPutativeFullLength} --libraryStage '${libraryStage}' --libraryName '${libraryName}' --libraryDesc "${libraryDesc}" --contactName "${contactName}" --contactAddress1 "${contactAddress1}" --contactAddress2 "${contactAddress2}" </pluginArgs>
    </datasetLoader>
  </datasetClass>


  <!-- This class gets its data from ESTs and transcripts loaded by the
       reference strain.  It finds all of them in the database and maps them to
       our genome.  The reference strain DOES need to include an instance
       of this class so that its transcripts get mapped to its genome  -->

  <datasetClass class="transcriptsFromReferenceStrain" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="referenceStrainOrganismAbbrev">&referenceStrainOrganismAbbrev;</prop>

    <graphTemplateFile name="mapTranscriptsToGenome.xml"/>

  </datasetClass>


  <!-- Category: IEDB epitopes -->

  <!--  get the epitope sequences. 
        (this class does not map epitopes. see epitopesFromReferenceStrain)
        ONLY INCLUDE IF A REFERENCE STRAIN
 -->
  <datasetClass class="referenceStrain-epitope_sequences_IEDB" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="version">&version;</prop>
    <prop name="speciesNcbiTaxonId">&speciesNcbiTaxonId;</prop>

    <graphTemplateFile name="epitopes.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_epitope_IEDB_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="species"
              type="epitope"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <!-- validate that IEDB knows about this taxon id.  this unpack just greps IEDB's taxon list -->
      <unpack><![CDATA[unzip -p @@manualDeliveryDir@@/common/epitope/IEDB/${version}/fromProvider/OrganismList.zip | grep "<TaxId>${speciesNcbiTaxonId}<"]]></unpack>

      <unpack>iedbMakeTabFileFromXml --input_dir @@manualDeliveryDir@@/common/epitope/IEDB/%DATASET_VERSION%/final/iedb_export_fixed --outputfile @@dataDir@@/oneOrganism.txt --NCBITaxId ${speciesNcbiTaxonId} --organismListFile @@manualDeliveryDir@@/common/epitope/IEDB/%DATASET_VERSION%/fromProvider/OrganismList.xml</unpack>

      <unpack>mkdir -p @@dataDir@@/fasta</unpack>

      <!-- not clear why we need this step.  should modify iedbMakeTabFileFromXml
           to produce the simplified tab file, since oneOrganism.txt is never
           consumed besides right here -->
      <unpack>iedbSimplifyTabFile --inputFile @@dataDir@@/oneOrganism.txt --outputFile @@dataDir@@/oneOrganismSimplified.txt </unpack>

      <unpack>generateEpitopeFastaFile --inputFile @@dataDir@@/oneOrganismSimplified.txt --outputFile @@dataDir@@/fasta/IEDBExport.fsa </unpack>

      <getAndUnpackOutput file="@@dataDir@@/oneOrganismSimplified.txt"/>

      <!-- sourceId|name|ncbiTaxId|accession -->
      <pluginArgs><![CDATA[--seqFileDir @@dataDir@@/fasta --externalDatabaseName %DATASET_NAME% --externalDatabaseVersion %DATASET_VERSION% --soTermName "epitope" --regexNcbiTaxId  ">[^|]*\|[^|]*\|([^|]*)" --regexSourceId ">(\d+)|" --tableName "DoTS::MotifAASequence" --logFrequency 100 --regexDesc ">(.+)" ]]></pluginArgs>
    </datasetLoader>
  </datasetClass>


  <!-- This class gets its data from Epitopes loaded by the
       reference strain.  It finds all of them in the database and maps them to
       our genome.  The reference strain DOES need to include an instance
       of this class so that its transcripts get mapped to its genome  -->

  <datasetClass class="epitopesFromReferenceStrain" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="referenceStrainOrganismAbbrev">&referenceStrainOrganismAbbrev;</prop>

    <graphTemplateFile name="mapEpitopes.xml"/>

  </datasetClass>


  <!-- Category: dbxrefs -->
  <datasetClass class="dbxref_simple" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="columnSpec"/>
    <prop name="target"/>  <!-- NASequence, AAFeature, NAFeature -->
    <prop name="url"/>  <!-- must use CDATA -->
    <prop name="urlUsesSecondaryId"/>  <!-- true or false -->
    <prop name="genomeVersion"/>

    <graphTemplateFile name="dbXRefs.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_dbxref_${name}_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              scope="organism"
              type="dbxref"
              externalDbIdUrlUseSecondaryId="${urlUsesSecondaryId}"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[${url}]]></externalDbIdUrl>
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dbxref/${name}/${version}/final/mapping.txt">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/mapping.txt --extDbName %DATASET_NAME% --extDbReleaseNumber %DATASET_VERSION% --columnSpec "${columnSpec}" --tableName DbRef${target} --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <datasetClass class="dbxref_unity" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="url"/>   <!-- must use CDATA -->
    <prop name="genomeVersion"/>

    <graphTemplateFile name="dbXRefs.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_dbxref_unity_${name}_RSRC"
	      version="TODAY"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              scope="organism"
              type="dbxref"
              externalDbIdUrlUseSecondaryId="false"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[${url}]]></externalDbIdUrl>
      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>makeSrcIdFile --organismAbbrev "${organismAbbrev}" --outputFile @@dataDir@@/mapping.txt</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/mapping.txt --extDbName %DATASET_NAME% --extDbReleaseNumber %DATASET_VERSION% --columnSpec "primary_identifier" --tableName DbRefNAFeature --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <datasetClass class="dbxref_gene2ApiLoc" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="projectName">&projectName;</prop>
    <prop name="version">&version;</prop>
    <prop name="ApiLocOrganism"/>   <!-- organism name as found on the ApiLoc site. -->


    <graphTemplateFile name="dbXRefs.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_dbxref_ApiLoc_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              scope="organism"
              type="dbxref"
              externalDbIdUrlUseSecondaryId="false"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[http://apiloc.bio21.unimelb.edu.au/apiloc/apiloc/gene/${ApiLocOrganism}/EXTERNAL_ID_HERE]]></externalDbIdUrl>
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dbxref/gene2ApiLoc/${version}/final/${organismAbbrev}.html">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>makeDbxRefsFromApiLocHtml @@dataDir@@/${organismAbbrev}.html "${ApiLocOrganism}" > @@dataDir@@/dbxrefs.txt</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/dbxrefs.txt --extDbName %DATASET_NAME% --extDbReleaseNumber %DATASET_VERSION% --columnSpec "primary_identifier" --tableName "DbRefNAFeature"  --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>

<!-- Gene synonyms -->

<datasetClass class="dbxref_synonym" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="projectName">&projectName;</prop>
    <prop name="version">&version;</prop>
    <prop name="name">&name;</prop>

    <graphTemplateFile name="dbXRefs.xml"/>
 
    <datasetLoader datasetName="${organismAbbrev}_dbxref_${name}_synonym_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              scope="organism"
              externalDbIdType="synonym"
              type="dbxref"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/function/synonym/${name}/${version}/final/synonyms.txt">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/synonyms.txt --extDbName %DATASET_NAME% --extDbReleaseNumber %DATASET_VERSION% --columnSpec "primary_identifier" --tableName "DbRefNAFeature"  --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <datasetClass class="dbxref_gene2PubmedFromNcbi" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="genomeVersion"/>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="dbXRefs.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_dbxref_gene2PubmedFromNcbi_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              scope="organism"
              type="dbxref"
              externalDbIdUrlUseSecondaryId="false"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[http://www.ncbi.nlm.nih.gov/sites/entrez?cmd=PureSearch&db=pubmed&term=EXTERNAL_ID_HERE[UID]]]></externalDbIdUrl>

      <manualGet fileOrDir="common/dbxref/gene2PubmedFromNcbi/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>ncbiGenePubmed2DbRefsFile --gene2pubmedFile @@dataDir@@/final/gene2pubmed.gz --geneInfoFile @@dataDir@@/final/gene_info.gz --taxId ${ncbiTaxonId} > @@dataDir@@/gene2PubmedFromNcbi.tab</unpack>

      <unpack>rm -f @@dataDir@@/gene_info.gz</unpack>

      <unpack>rm -f @@dataDir@@/gene2pubmed.gz</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/gene2PubmedFromNcbi.tab --extDbName %DATASET_NAME% --extDbReleaseNumber %DATASET_VERSION% --columnSpec "primary_identifier,secondary_identifier" --tableName "DbRefNAFeature"  --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}'  --organismAbbrev ${organismAbbrev}</pluginArgs>

    </datasetLoader>
  </datasetClass>


  <!-- depends on gene2Entrez -->
  <datasetClass class="dbxref_gene2Uniprot" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="genomeVersion"/>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="dbXRefs.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_dbxref_gene2Uniprot_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              externalDbIdType="alternate id"
              scope="organism"
              type="dbxref"
              externalDbIdUrlUseSecondaryId="false"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[http://www.uniprot.org/uniprot/EXTERNAL_ID_HERE]]></externalDbIdUrl>

      <manualGet fileOrDir="common/dbxref/gene2Uniprot/${version}/final/idmapping_selected.tab.gz">
        <dir name="final">
        </dir>
      </manualGet>

      <!-- need to use the gene2entrez file to get map of NCBI ids -->
      <unpack>uniprotIdMap2DbRefsFile @@dataDir@@/idmapping_selected.tab.gz @@dataDir@@/../${organismAbbrev}_dbxref_gene2Entrez_RSRC/gene2entrez.tab > @@dataDir@@/gene2uniprot.tab</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/gene2uniprot.tab --extDbName %DATASET_NAME% --extDbReleaseNumber %DATASET_VERSION% --columnSpec "primary_identifier,secondary_identifier,remark" --tableName "DbRefNAFeature"  --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}'  --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <!-- Category: gene aliases -->

  <datasetClass class="aliases" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="version">&version;</prop>
    <prop name="name">&name;</prop>
    <prop name="columnSpec"/>
    <prop name="url"/>
    <prop name="urlUsesSecondaryId"/>  <!-- true or false -->
    <prop name="target"/>  <!-- NASequence, AAFeature, NAFeature -->
    <prop name="idType"/>  <!-- previous id, alternate id -->

    <graphTemplateFile name="aliases.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${name}_${target}_aliases_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              externalDbIdType="${idType}"
              externalDbIdIsAnAlias="true"
              scope="organism"
              type="alias"
              externalDbIdUrlUseSecondaryId="${urlUsesSecondaryId}"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[${url}]]></externalDbIdUrl>
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/alias/${name}/${version}/final/aliases.txt">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/aliases.txt --extDbName %DATASET_NAME% --extDbReleaseNumber %DATASET_VERSION% --columnSpec "${columnSpec}" --tableName DbRef${target} --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <!-- ONLY INCLUDE IF THIS ORGANISM'S GENOME IS IN GENBANK -->
  <datasetClass class="dbxref_gene2Entrez" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="genomeVersion"/>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="aliases.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_dbxref_gene2Entrez_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              externalDbIdType="alternate id"
              externalDbIdIsAnAlias="true"
              externalDbIdUrlUseSecondaryId="false"
              scope="organism"
              type="dbxref"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[http://www.ncbi.nlm.nih.gov/sites/entrez?db=gene&cmd=search&term=EXTERNAL_ID_HERE]]></externalDbIdUrl>
      <manualGet fileOrDir="common/alias/gene2Entrez/${version}/final/gene_info.gz">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>ncbiGeneInfo2DbRefsFile @@dataDir@@/gene_info.gz ${ncbiTaxonId} > @@dataDir@@/gene2entrez.tab</unpack>

      <unpack>rm -f @@dataDir@@/gene_info.gz</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/gene2entrez.tab --extDbName %DATASET_NAME% --extDbReleaseNumber %DATASET_VERSION% --columnSpec "primary_identifier,secondary_identifier,remark" --tableName "DbRefNAFeature"  --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --organismAbbrev ${organismAbbrev}</pluginArgs>

    </datasetLoader>
  </datasetClass>


  <!-- Category: SNPs -->

  <!-- FIX WORKFLOW: need to change getAndAnalyzeSnps to use SNPs.gff -->
  <datasetClass class="SNPs_GFF" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="SNPs.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_SNP_${name}_gff_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="SNP"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/SNP/${name}/${version}/final/SNPs.gff">
        <dir name="final">
        </dir>
      </manualGet>
      <getAndUnpackOutput file="@@dataDir@@/SNPs.gff"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>


 <datasetClass class="SNPs_HTS_Experiment" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="hasPairedEnds"/>
    <prop name="isColorspace"/>
    <prop name="snpPercentCutoff"/>

    <graphTemplateFile name="SNPs_HTS.xml"/>
   
    <datasetLoader datasetName="${organismAbbrev}_HTS_SNP_${name}_RSRC" version="${version}"
          plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="isolates"
              subType="HTS_SNP"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <!-- delete empty final/ dir created by experiment graph for mirroring.  samples will mirror their own files. -->
      <unpack>rm -rf @@dataDir@@/final</unpack>
      <!-- since mirroring is already done, now we can make a non-empty final dir -->
      <unpack>ln -s @@manualDeliveryDir@@/${projectName}/${organismAbbrev}/SNP/${name}/${version}/final/ @@dataDir@@</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final" />
      <getAndUnpackOutput file="@@dataDir@@/final/sampleMetaData.txt"/>
      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>

  </datasetClass>


  <datasetClass class="SNPs_HTS_Sample" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="experimentName"/>
    <prop name="snpStrainAbbrev"/>

    <graphTemplateFile name="htsSnpSamples.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${experimentName}_${snpStrainAbbrev}_HTS_SNPSample_RSRC" version="dontcare"
          plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="isolates"
              subType="HTS_SNP"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_HTS_SNP_${experimentName}_RSRC/final/${snpStrainAbbrev}" />
      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_HTS_SNP_${experimentName}_RSRC/final/${snpStrainAbbrev}.paired" />

      <!-- these are needed for colorspace -->
      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_HTS_SNP_${experimentName}_RSRC/final/${snpStrainAbbrev}.qual" />
      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_HTS_SNP_${experimentName}_RSRC/final/${snpStrainAbbrev}.qual.paired" />

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <datasetClass class="SNPs_HTS_Sample_QuerySRA" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="experimentName"/>
    <prop name="snpStrainAbbrev"/>
    <prop name="sraQueryString"/>
 
    <graphTemplateFile name="htsSnpSamples.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${experimentName}_${snpStrainAbbrev}_HTS_SNPSample_RSRC" version="dontcare"
          plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="isolates"
              subType="HTS_SNP"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <!-- colorspace not allowed when we query from sra -->
      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_HTS_SNP_${experimentName}_RSRC/final/${snpStrainAbbrev}" />
      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_HTS_SNP_${experimentName}_RSRC/final/${snpStrainAbbrev}.paired" />

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>



  <!-- Category: microarrayPlatform -->

  <datasetClass class="microarrayPlatform" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop> 
    <prop name="version">&version;</prop>
    <prop name="isAffymetrixGeneArray"/>
    <prop name="isNimbleGenGeneArray"/>
    <prop name="vendorMappingFileName"/>
    <prop name="probeRows"/>
    <prop name="probeCols"/>
    <prop name="limitNU"/>
    <prop name="variableLengthReads"/>
    <prop name="numInsertions"/>

    <graphTemplateFile name="arrayStudies.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_microarrayPlatform_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="array"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayPlatform/${name}/${version}/final">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>probeFasta2Tab @@dataDir@@/final/probes.fsa > @@dataDir@@/probes.tab</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>
      <getAndUnpackOutput file="@@dataDir@@/final/probes.fsa"/>
      <getAndUnpackOutput file="@@dataDir@@/probes.tab"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="microarrayPlatformWithProviderMapping" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop> 
    <prop name="version">&version;</prop>
    <prop name="isAffymetrixGeneArray"/>
    <prop name="isNimbleGenGeneArray"/>
    <prop name="providedMappingFileName"/>

    <graphTemplateFile name="arrayStudies.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_microarrayPlatform_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="array"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayPlatform/${name}/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="chipChipPlatform" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="limitNU"/>
    <prop name="numInsertions"/>
    <prop name="variableLengthReads"/>

    <graphTemplateFile name="arrayStudies.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_chipChipPlatform_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="chip_chip"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayPlatform/${name}/${version}/final">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>probeFasta2Tab @@dataDir@@/final/probes.fsa > @@dataDir@@/probes.tab</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>
      <getAndUnpackOutput file="@@dataDir@@/final/probes.fsa"/>
      <getAndUnpackOutput file="@@dataDir@@/probes.tab"/>


      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <!-- Category: microarrayExpression -->

  <!-- manual delivery and plugin or step class must be upgraded see redmine #4257 -->
  <datasetClass class="microarrayExpressionExperiment" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="experimentName"/>
    <prop name="experimentVersion"/>
    <prop name="microarrayPlatformName"/>
    <prop name="microarrayPlatformVersion"/>
    <prop name="doExpressionAnalysis"/>
    <prop name="hasTimeSeries"/>
    <prop name="usesAffymetrixGeneArray"/>
    <prop name="usesNimbleGenGeneArray"/>

    <graphTemplateFile name="arrayStudies.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_microarrayExpression_${experimentName}_RSRC" version="${experimentVersion}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="array"
              organismAbbrev="${organismAbbrev}"
	      >
      
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayExpression/${experimentName}/${experimentVersion}/final">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>
      <getAndUnpackOutput file="@@dataDir@@/final/analysisConfig.xml"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>

    </datasetLoader>
  </datasetClass>

  <!-- Category: microarrayExpression -->

  <!-- manual delivery must include two files:   -->
  <!--   geneProbeMapping.txt (an empty file)  -->
  <!--   geneProbeMappingVendor (the cdf or ndf file)   -->
  <datasetClass class="microarrayExpressionExperimentWithProviderProbeMapping" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="experimentName"/>
    <prop name="experimentVersion"/>
    <prop name="doExpressionAnalysis"/>
    <prop name="hasTimeSeries"/>
    <prop name="usesAffymetrixGeneArray"/>
    <prop name="usesNimbleGenGeneArray"/>

    <graphTemplateFile name="arrayStudies.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_microarrayExpression_${experimentName}_RSRC" version="${experimentVersion}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="array"
              organismAbbrev="${organismAbbrev}"
	      >
      
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayExpression/${experimentName}/${experimentVersion}/final">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>
      <getAndUnpackOutput file="@@dataDir@@/final/analysisConfig.xml"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>

    </datasetLoader>
  </datasetClass>


  <!-- Category: ChIP Chip-->

  <datasetClass class="chipChipExperiment" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="experimentName"/>
    <prop name="experimentVersion"/>
    <prop name="chipChipPlatformName"/>
    <prop name="chipChipPlatformVersion"/>
    <prop name="peakFinderArgs"/>
    <prop name="loadPeakCalls"/>

    <graphTemplateFile name="arrayStudies.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_chipChipExper_${experimentName}_RSRC" version="${experimentVersion}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="chip_chip"
              organismAbbrev="${organismAbbrev}"
	      >

     <manualGet fileOrDir="${projectName}/${organismAbbrev}/chipChip/${experimentName}/${experimentVersion}/final">
        <dir name="final">
        </dir>
      </manualGet>

     <getAndUnpackOutput dir="@@dataDir@@/final" />

     <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>

    </datasetLoader>
  </datasetClass>


  <!-- the files containing the sample data are assumed to be normalized -->
  <datasetClass class="chipChipSample" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="experimentName"/>
    <prop name="sampleName"/>
    <prop name="LifeCycleStage"/>
    <prop name="Antibody"/>
    <prop name="Genotype"/>
    <prop name="Replicate"/>
    <prop name="Strain"/>
    <prop name="Treatment"/>
    <prop name="CellType"/>
 
    <graphTemplateFile name="chipChipSamples.xml"/>

      <!-- we load a fake resource here so we can make a getAndUnpackOutput -->
      <!-- to declare existence of sample file that is acquired by experiment, for test mode -->
    <datasetLoader datasetName="${organismAbbrev}_${experimentName}_${sampleName}_chipChipSample_RSRC" version="dontcare"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="chip_chip"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_chipChipExper_${experimentName}_RSRC/final/${sampleName}.txt" />

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <!-- NOTE:  because the data files are so large, we don't copy into our
       workflow data dir, but use a symlink into manual deliv instead -->

  <!-- final/ dir must have a file per sample, with name identical to the 
       sample name.  if there are paired ends reads, each sample will also
       have a samplename.paired file -->
  <datasetClass class="rnaSeqExperiment" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="limitNU"/>
    <prop name="hasVariableLengthReads"/> 
    <prop name="hasTimeSeries"/>
    <prop name="numInsertions"/>
    <prop name="hasPairedEnds"/>
    <prop name="isStrandSpecific"/>
    <prop name="alignWithCdsCoordinates"/>

    <graphTemplateFile name="organismSpecificOnTopLevelGenome.xml"/>
   <!-- Inquiry: Always follow naming convention -->
    <datasetLoader datasetName="${organismAbbrev}_${name}_rnaSeq_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="rnaseq"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
      <unpack>ln -s @@manualDeliveryDir@@/${projectName}/${organismAbbrev}/rnaSeq/${name}/${version}/final/ @@dataDir@@/final</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final" />
      <getAndUnpackOutput file="@@dataDir@@/final/analysisConfig.xml"/>
      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>

  </datasetClass>




  <datasetClass class="rnaSeqSample" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="experimentName"/>
    <prop name="sampleName"/>
 
    <graphTemplateFile name="rnaSeqOrChipSeqSamples.xml"/>

      <!-- we load a fake resource here so we can make a getAndUnpackOutput -->
      <!-- to declare existence of sample file that is acquired by experiment, for test mode -->
    <datasetLoader datasetName="${organismAbbrev}_${experimentName}_${sampleName}_rnaSeqSample_RSRC" version="dontcare"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="rnaseq"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_${experimentName}_rnaSeq_RSRC/final/${sampleName}" />

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>


  </datasetClass>


  <datasetClass class="rnaSeqExperimentNoTranscripts" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="limitNU"/>
    <prop name="hasVariableLengthReads"/> 
    <prop name="hasTimeSeries"/>
    <prop name="numInsertions"/>
    <prop name="hasPairedEnds"/>
    <prop name="isStrandSpecific"/>

    <graphTemplateFile name="organismSpecificOnTopLevelGenome.xml"/>
   <!-- Inquiry: Always follow naming convention -->
    <datasetLoader datasetName="${organismAbbrev}_${name}_rnaSeq_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="rnaseq"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
      <unpack>ln -s @@manualDeliveryDir@@/${projectName}/${organismAbbrev}/rnaSeq/${name}/${version}/final/ @@dataDir@@/final</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final" />
      <getAndUnpackOutput file="@@dataDir@@/final/analysisConfig.xml"/>
      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>

  </datasetClass>


  <datasetClass class="rnaSeqSampleNoTranscripts" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="experimentName"/>
    <prop name="sampleName"/>
 
    <graphTemplateFile name="rnaSeqOrChipSeqSamples.xml"/>

      <!-- we load a fake resource here so we can make a getAndUnpackOutput -->
      <!-- to declare existence of sample file that is acquired by experiment, for test mode -->
    <datasetLoader datasetName="${organismAbbrev}_${experimentName}_${sampleName}_rnaSeqSample_RSRC" version="dontcare"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="rnaseq"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_${experimentName}_rnaSeq_RSRC/final/${sampleName}" />

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>


  </datasetClass>



  <datasetClass class="chipSeqExperiment" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="limitNU"/>
    <prop name="hasVariableLengthReads"/> 
    <prop name="numInsertions"/>
    <!-- is this specific to rnaseq? -->
    <prop name="hasPairedEnds"/>
    <!-- is this specific to rnaseq? -->
    <prop name="isStrandSpecific"/>

    <graphTemplateFile name="organismSpecificOnTopLevelGenome.xml"/>
   <!-- Inquiry: Always follow naming convention -->
    <datasetLoader datasetName="${organismAbbrev}_${name}_chipSeq_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="chipseq"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
      <unpack>ln -s @@manualDeliveryDir@@/${projectName}/${organismAbbrev}/chipSeq/${name}/${version}/final/ @@dataDir@@/final</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final" />
      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>




  <datasetClass class="chipSeqSample" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="experimentName"/>
    <prop name="sampleName"/>
 
    <graphTemplateFile name="rnaSeqOrChipSeqSamples.xml"/>

      <!-- we load a fake resource here so we can make a getAndUnpackOutput -->
      <!-- to declare existence of sample file that is acquired by experiment, for test mode -->
    <datasetLoader datasetName="${organismAbbrev}_${experimentName}_${sampleName}_chipSeqSample_RSRC" version="dontcare"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="chipseq"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_${experimentName}_chipSeq_RSRC/final/${sampleName}" />

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>


  </datasetClass>


  <!-- NOTE: this dataset class only gets the sequences, it does not map
       them to the genome.  For that use clonedInsertEndsFromReferenceStrain
       ONLY INCLUDE IF A REFERENCE STRAIN
  -->

  <datasetClass class="referenceStrain-clonedInsertEnds" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTermName"/>
    <prop name="sourceIdRegex"/>
    <prop name="secondaryIdRegex"/>

    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${name}_clonedInsertEnds_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="species"
              type="aligned_sequence"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dnaSeq/${name}/${version}/final/seqs.fasta">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseName %DATASET_NAME% --externalDatabaseVersion %DATASET_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/seqs.fasta --soTermName ${soTermName} --regexSourceId "${sourceIdRegex}" --regexSecondaryId "${secondaryIdRegex}" --tableName "DoTS::ExternalNASequence"</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <!-- This class gets its data from cloned insert ends loaded by the
       reference strain.  It finds them in the database and maps them to
       our genome.  The reference strain DOES need to include an instance
       of this class for each dataset, so that it gets mapped  -->

  <datasetClass class="clonedInsertEndsFromReferenceStrain" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="referenceStrainOrganismAbbrev">&referenceStrainOrganismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>

  </datasetClass>


  <datasetClass class="transcript_sequences" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="soTermName"/>
    <prop name="sourceIdRegex"/>

    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${name}_transcript_sequences_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="species"
              type="aligned_sequence"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dnaSeq/${name}/${version}/final/seqs.fasta">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseName %DATASET_NAME% --externalDatabaseVersion %DATASET_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/seqs.fasta --soTermName ${soTermName} --regexSourceId "${sourceIdRegex}" --tableName "DoTS::ExternalNASequence"</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <!-- GOT TO HERE -->


  <!-- Category: SAGE tags -->


  <datasetClass class="sageTagSequences" category="" datasetFileHint="">
     <purpose></purpose>
     <prop name="projectName">&projectName;</prop>
     <prop name="organismAbbrev">&organismAbbrev;</prop>
     <prop name="name">&name;</prop>
     <prop name="version">&version;</prop>
     <prop name="contactName"/>
     <prop name="sequencePrefix"/>
     <prop name="bowtieParams"/>

     <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>
    
     <datasetLoader datasetName="${organismAbbrev}_sageTag_${name}_RSRC" version="${version}"
               plugin="GUS::Supported::Plugin::LoadArrayDesign"
               scope="organism"
              type="transcript_expression"
              subType="sage_tag"
               organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/sageTag/${name}/${version}/final/primers.txt">
         <dir name="final">
         </dir>
       </manualGet> 

       <unpack>echo -e "ArrayDesign.name\t${organismAbbrev}_sageTag_${name}_RSRC\nArrayDesign.version\t${version}\nCompositeElementImp.subclass_view\tSAGETag\nCompositeElementImp.tag\ttag" > @@dataDir@@/sageArray.config</unpack> 
        
       <unpack>preLoadArrayDesign --category TechnologyType --value 'user_defined' --manufacturer ${contactName}</unpack> 
       <unpack>awk -F:::: 'x++; x==1{print "tag\n" $1}' @@dataDir@@/primers.txt > @@dataDir@@/distinct_sage_tags_with_header.txt</unpack> 
       <pluginArgs>-cfg_file @@dataDir@@/sageArray.config --data_file @@dataDir@@/distinct_sage_tags_with_header.txt --manufacturer ${contactName} --technology_type 'user_defined'</pluginArgs> 
      </datasetLoader>
    </datasetClass> 


  <datasetClass class="sageTagFrequencies" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="normalizeFrequencies"/>
    <prop name="contactName"/>

    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_sageTag_${name}_frequencies_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadSageResultsWithSqlLdr"
              scope="organism"
	      parentDatasetName="${organismAbbrev}_sageTag_${name}_RSRC"
              type="transcript_expression"
              subType="sage_tag"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/sageTag/${name}/${version}/final/freqs.txt">
        <dir name="final">
        </dir>
      </manualGet>

    <pluginArgs>--contact '${contactName}' --arrayDesignName ${organismAbbrev}_sageTag_${name}_RSRC --arrayDesignVersion ${version} --studyName ${name} --studyDescription '' --freqFile @@dataDir@@/freqs.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <!-- Category: product names -->

  <datasetClass class="productNames" category="" datasetFileHint="">
    <purpose>Note: this should include product names for organelles as well</purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
 
    <graphTemplateFile name="productNames.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_function_${name}_product_names_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertGeneFeatProductFromTabFile"
              scope="organism"
              type="gene_annotation"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/function/${name}_product_names/${version}/final/products.txt">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--file @@dataDir@@/products.txt  --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="GeneOntologyAssociations" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="version">&version;</prop>
    <prop name="name">&name;</prop>

    <graphTemplateFile name="organismSpecificMisc.xml"/>

    <datasetLoader plugin="ApiCommonData::Load::Plugin::InsertGOAssociationsSimple"
              datasetName="${organismAbbrev}_${name}_GOAssociations_RSRC"
              version="${version}"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/function/${name}_GOAssociations/${version}/final/associations.gas">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%" --inputFile @@dataDir@@/associations.gas --goExtDbRlsName "GO_RSRC" --seqIdSql "SELECT g.source_id, taf.aa_sequence_id FROM dots.genefeature g, dots.transcript t, dots.translatedAAFeature taf WHERE g.na_feature_id = t.parent_id AND t.na_feature_id = taf.na_feature_id UNION SELECT taf.source_id, taf.aa_sequence_id FROM dots.translatedAAFeature taf" --targetTable "DoTS::TranslatedAASequence" --lineOfEvidence "${name}" --inputIdColumn id --tolerateMissingSeqs --skipBadGOTerms @@dataDir@@/badGOTerms.log</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="EnzymeCommissionAssociations" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="version">&version;</prop>
    <prop name="name">&name;</prop>

    <graphTemplateFile name="organismSpecificMisc.xml"/>

    <datasetLoader plugin="GUS::Community::Plugin::InsertECMapping"
              datasetName="${organismAbbrev}_${name}_ECAssociations_RSRC"
              version="${version}"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/function/${name}_ECAssociations/${version}/final/ec.txt">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--ECMappingFile @@dataDir@@/ec.txt --evidenceCode "${name}" --aaSeqLocusTagMappingSql "select taf.aa_sequence_id from dots.Transcript t, dots.TranslatedAAFeature taf, dots.GeneFeature gf where gf.source_id = ? and gf.na_feature_id = t.parent_id and t.na_feature_id = taf.na_feature_id"</pluginArgs>
    </datasetLoader>

  </datasetClass>

  <datasetClass class="ECAssocFromUniprot" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="version">&version;</prop>
    <prop name="speciesNcbiTaxonId">&speciesNcbiTaxonId;</prop>

    <graphTemplateFile name="organismSpecificMisc.xml"/>

    <datasetLoader plugin="GUS::Community::Plugin::InsertECMapping"
              datasetName="${organismAbbrev}_Uniprot_ECAssociations_RSRC"
              version="${version}"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
  
     <wgetArgs url="www.uniprot.org/uniprot/?query=taxonomy%3a${speciesNcbiTaxonId}+AND+keyword%3a181&amp;force=yes&amp;format=tab&amp;columns=id,genes,organism,ec"> --output-document=@@dataDir@@/ecAssocFromUniprot.tab --content-disposition </wgetArgs>
     
     <unpack>printOrgSpecificGeneToEC --infile @@dataDir@@/ecAssocFromUniprot.tab --outfile @@dataDir@@/${organismAbbrev}LocTagToEC.tab --orgAbbrev ${organismAbbrev}</unpack>     

      <pluginArgs>--ECMappingFile @@dataDir@@/${organismAbbrev}LocTagToEC.tab --evidenceCode "Uniprot" --aaSeqLocusTagMappingSql "select taf.aa_sequence_id from dots.Transcript t, dots.TranslatedAAFeature taf, dots.GeneFeature gf where gf.source_id = ? and gf.na_feature_id = t.parent_id and t.na_feature_id = taf.na_feature_id"</pluginArgs>
    </datasetLoader>

  </datasetClass>
  

  <!-- Category: comments -->

  <datasetClass class="comments" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
 
    <graphTemplateFile name="organismSpecificMisc.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${name}_comments_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertNaFeatCommentFromTabFile"
              scope="organism"
              type="gene_annotation"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/comment/${name}/${version}/final/comments.txt">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--file @@dataDir@@/comments.txt  --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <!-- Category: isolates -->

  <!-- NOTE: this dataset class only gets the isolates, it does not map
       them to the genome.  See isolatesFromFamilyRepresentative
       ONLY INCLUDE IF A REFERENCE STRAIN
  -->

  <datasetClass class="familyRepresentative-isolatesGenbank" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
 
    <graphTemplateFile name="isolatesFromNonHtsSequencing.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_isolates_genbank_RSRC" version="TODAY"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="species"
              organismAbbrev="${organismAbbrev}"
              type="isolates"
              subType="sequencing_typed"
	      >

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <!-- get the file from genbank, using organismAbbrev to find familyNcbiTaxonIds in Organism table -->
      <unpack>getIsolatesFromGenbank @@dataDir@@/isolates.gb "${organismAbbrev}"</unpack>

      <unpack>fixIsolateSequences --seq_file @@dataDir@@/isolates.gb --fixed_seq_file @@dataDir@@/isolates_fixed_1.gb --removed_seq_file @@dataDir@@/isolates_excluded.gb</unpack>

      <unpack>sed "s/SOURCE\tplastid/SOURCE\t/" @@dataDir@@/isolates_fixed_1.gb | sed "s/SOURCE\tapicoplast/SOURCE\t/" | sed "s/SOURCE\tmitochondrion/SOURCE\t/" > @@dataDir@@/isolates_fixed_2.gb</unpack>

      <pluginArgs>--extDbName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/isolatesGenbank2gus.xml --inputFileOrDir @@dataDir@@/isolates_fixed_2.gb --fileFormat genbank --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm "region" --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </datasetLoader>
  </datasetClass>



  <!-- NOTE: update isolates loaded from Genbank files with additional information provided by provider -->

  <datasetClass class="updateIsolatesInfo" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="isolatesFromNonHtsSequencing.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_updateIsolatesInfo_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::UpdateTgondiiIsolatesFromDardre"
              scope="species"
              type="isolates"
              subType="sequencing_typed"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/${name}/${version}/final/updates.txt">
        <dir name="final">
        </dir>
      </manualGet>

     <pluginArgs>--extDbRlsSpec "%DATASET_NAME%|%DATASET_VERSION%" --inputFile @@dataDir@@/updates.txt </pluginArgs>
    </datasetLoader>
  </datasetClass>


  <!-- NOTE: this dataset class only gets the isolates, it does not map
       them to the genome.  See isolatesFromFamilyRepresentative
       ONLY INCLUDE IF A FAMILY REPRESENTATIVE

  -->

  <datasetClass class="familyRepresentative-isolateSequencesFasta" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="sourceIdRegex"/>

    <graphTemplateFile name="isolatesFromNonHtsSequencing.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_isolates_${name}_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="species"
              type="isolates"
              subType="sequencing_typed"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/${name}/${version}/final/isolates.fasta">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseName %DATASET_NAME% --externalDatabaseVersion %DATASET_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/isolates.fasta --soTermName region --regexSourceId "${sourceIdRegex}" --tableName "DoTS::ExternalNASequence"</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <!-- the ncbi taxon ID is not important.  isolate strain info is provided by dedicated isolate info tables -->
  <datasetClass class="familyRepresentative-isolateFeaturesGFF2" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="mapFile"/>
 
    <graphTemplateFile name="isolatesFromNonHtsSequencing.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_isolates_${name}_features_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="species"
	      parentDatasetName="${organismAbbrev}_isolates_${name}_RSRC"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/${name}/${version}/final/isolates.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs> --extDbName %PARENT_DATASET_NAME% --extDbRlsVer %PARENT_DATASET_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/isolates.gff --fileFormat gff2 --gff2GroupTag locus_tag --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId} --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <!-- NOTE: this dataset does not get the isolates, but it does map
       them to the genome.  It extracts the sequences from the database
  -->

  <datasetClass class="isolatesFromFamilyRepresentative" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="familyRepOrganismAbbrev"/>
    <prop name="name">&name;</prop>
 
    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>
  </datasetClass>



  <!-- NOTE: this class is specific to Crypto and is used to assign "is_reference" status to some isolates  -->

  <datasetClass class="isolatesUpdateIsReference" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="isolatesFromNonHtsSequencing.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_isolateIsReference_RSRC"
              version="${version}"
             plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="species"
              type="isolates"
              subType="sequencing_typed"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/${name}/${version}/final/reference_isolates.txt">
        <dir name="final">
        </dir>
      </manualGet>

     <unpack>addIsReferenceToIsolateSource.pl --file @@dataDir@@/reference_isolates.txt --gus_config @@gusHome@@/config/gus.config</unpack>
     <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>

  
    <datasetClass class="massSpecFromMgf" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="genomeVersion"/>

    <graphTemplateFile name="MassSpecFromMgf.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_massSpec_${name}_RSRC" version="${version}"
		  plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="protein_expression"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
	        <!-- delete empty final/ dir created by experiment graph for mirroring.  samples will mirror their own files. -->
      <unpack>rm -rf @@dataDir@@/final</unpack>
      <!-- since mirroring is already done, now we can make a non-empty final dir -->
      <unpack>ln -s @@manualDeliveryDir@@/${projectName}/${organismAbbrev}/massSpec/${name}/${version}/final/ @@dataDir@@</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final" />	 
      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>	  
    </datasetLoader>
  </datasetClass>

    <datasetClass class="massSpecFromMgf_Sample" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="experimentName"/>
    <prop name="sampleName"/>

    <graphTemplateFile name="massSpecSamples.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${experimentName}_${sampleName}_MassSpecSample_RSRC" version="dontcare"
          plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="protein_expression"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_MassSpec_${experimentName}_RSRC/final/${sampleName}.mgf" />
 
      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>
  
  <datasetClass class="massSpecPreprocessed" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="genomeVersion"/>
    <prop name="fileNameRegex"/>

    <graphTemplateFile name="massSpec.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_massSpec_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertMassSpecFeaturesAndSummaries"
              scope="organism"
              type="protein_expression"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/massSpec/${name}/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--inputDir @@dataDir@@/final --externalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%" --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --organismAbbrev ${organismAbbrev} --fileNameRegex '${fileNameRegex}'</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="orthomclPhyletic" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="comparativeGenomics.xml"/>

    <datasetLoader datasetName="OrthoMCL_Phyletic_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertPhylogeneticProfile"
              scope="global"
              type="orthology"
              >

      <manualGet fileOrDir="common/orthology/orthoMCL/${version}/orthomclGroups.txt">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--projectName ${projectName} --groupsFile @@dataDir@@/orthomclGroups.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="orthomcl" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="comparativeGenomics.xml"/>

    <datasetLoader datasetName="OrthoMCL_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertOrthologousGroups"
              scope="global"
              type="orthology"
              >

      <manualGet fileOrDir="common/orthology/orthoMCL/${version}/orthomclGroups.txt">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--projectName ${projectName} --OrthologFile @@dataDir@@/orthomclGroups.txt --AnalysisName 'OrthoMCL-based Orthology Predictions' --AnalysisDescription 'OrthoMCL-based Orthology Predictions' --ElementResultTable "DoTS::GeneFeature"</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="orthomclTree" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="comparativeGenomics.xml"/>

    <datasetLoader datasetName="OrthoMCLTree_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertOrthomclTaxon"
              scope="global"
              type="orthology"
              >

      <!-- use non-standard approach here to get two individual files rather
           than the whole dir, which has some very large files we don't need -->
      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
      <unpack>cp @@manualDeliveryDir@@/common/orthology/orthoMCL/%DATASET_VERSION%/orthomclClades.txt @@dataDir@@</unpack>
      <unpack>cp @@manualDeliveryDir@@/common/orthology/orthoMCL/%DATASET_VERSION%/orthomclTaxons.txt @@dataDir@@</unpack>

      <pluginArgs>--cladeFile @@dataDir@@/orthomclClades.txt --speciesFile @@dataDir@@/orthomclTaxons.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <datasetClass class="geneOntology" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>
    <datasetLoader datasetName="GO_RSRC" version="${version}"
      plugin="GUS::Supported::Plugin::InsertGeneOntology"
              scope="global"
              type="function"
              >
    <manualGet fileOrDir="common/ontology/geneOntology/${version}/final/gene_ontology.obo">
        <dir name="final">
        </dir>
    </manualGet>
    <pluginArgs>--oboFile @@dataDir@@/gene_ontology.obo --extDbRlsName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION% --calcTransitiveClosure</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <datasetClass class="enzymeDB" category="" datasetFileHint="">
    <purpose></purpose>
    <datasetLoader datasetName="enzymeDB_RSRC" version="TODAY"
      plugin="GUS::Community::Plugin::LoadEnzymeDatabase"
              scope="global"
              type="function"
              >
    <wgetArgs url="ftp://ftp.expasy.org/databases/enzyme/">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=3 --include list  --accept=enzclass.txt,enzyme.dat</wgetArgs>
    <pluginArgs>--InPath @@dataDir@@ --enzymeDbName %DATASET_NAME% --enzymeDbRlsVer %DATASET_VERSION%</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <datasetClass class="PDBProteinSequences" category="" datasetFileHint="">
    <purpose></purpose>
    <datasetLoader datasetName="PDBProteinSequences_RSRC" version="TODAY"
      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="global"
              type="external_sequences"
              >
    <wgetArgs url="ftp://ftp.wwpdb.org/pub/pdb/derived_data/pdb_seqres.txt.gz">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=3 --output-document=@@dataDir@@/pdb_seqres.txt.gz</wgetArgs>
    <unpack>gunzip @@dataDir@@/pdb_seqres.txt.gz</unpack>
    <unpack>filterPdbFile --inputFile @@dataDir@@/pdb_seqres.txt --outputFile  @@dataDir@@/pdb.fsa.tmp</unpack>
    <unpack><![CDATA[cat @@dataDir@@/pdb.fsa.tmp | perl -e 'while(<>) { s/J|O/X/g;print}' > @@dataDir@@/pdb.fsa]]></unpack>
    <unpack>rm @@dataDir@@/pdb.fsa.tmp</unpack>
    <unpack>xdformat -p @@dataDir@@/pdb.fsa</unpack>
    <getAndUnpackOutput file="@@dataDir@@/pdb.fsa"/>   
    <pluginArgs>--externalDatabaseName %DATASET_NAME% --externalDatabaseVersion %DATASET_VERSION% --sequenceFile  @@dataDir@@/pdb.fsa --SOTermName 'polypeptide'  --noSequence --regexSourceId  '>(\w+)\s+mol:protein' --regexDesc 'length:\d+\s+(.+)$' --tableName "DoTS::ExternalAASequence"</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <datasetClass class="taxonomy" category="" datasetFileHint="">
    <purpose></purpose>
  <datasetLoader datasetName="taxonomy_RSRC" version="TODAY"
      plugin="GUS::Supported::Plugin::LoadTaxon"
              scope="global"
              type="sres"
              >
    <wgetArgs url="ftp://ftp.ncbi.nih.gov/pub/taxonomy/">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=2 --include list --accept=gi_taxid_prot.dmp.gz,taxdump.tar.gz</wgetArgs>
    <unpack>gunzip @@dataDir@@/gi_taxid_prot.dmp.gz</unpack>
    <unpack>$currDir=`pwd`; cd @@dataDir@@ ; tar -xzf taxdump.tar.gz ; rm -f taxdump.tar ; cd $currDir</unpack>
    <pluginArgs>--names @@dataDir@@/names.dmp --nodes @@dataDir@@/nodes.dmp --gencode @@dataDir@@/gencode.dmp --merged @@dataDir@@/merged.dmp --verbose</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <datasetClass class="updatePDBTaxon" category="" datasetFileHint="">
    <purpose></purpose>
  <datasetLoader datasetName="updatePDBTaxon_RSRC" version="TODAY"
      plugin="ApiCommonData::Load::Plugin::UpdateTaxonFieldFromFile"
              scope="global"
              type="external_sequences"
              >
    <wgetArgs url="ftp://ftp.wwpdb.org/pub/pdb/derived_data/index/source.idx">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=4 --output-document=@@dataDir@@/source.idx</wgetArgs>
    <unpack>processSourceIdxFile --inFile @@dataDir@@/source.idx --outFile @@dataDir@@/source.idx.processed</unpack>
    <pluginArgs>--fileName @@dataDir@@/source.idx.processed --sourceIdRegex  '^(\w+)' --taxonNameRegex '^\w+\s+(.+)' --sourceIdSubstringLength 4  --extDbRlsName 'PDBProteinSequences_RSRC'  --tableName 'DoTS::ExternalAASequence'</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <datasetClass class="sequenceOntology" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>
  <datasetLoader datasetName="SO_RSRC" version="${version}"
              plugin="GUS::Supported::Plugin::InsertSequenceOntologyOBO"
              scope="global"
              type="sres"
              >
    <manualGet fileOrDir="common/ontology/sequenceOntology/${version}/final/so.obo">
        <dir name="final">
        </dir>
    </manualGet>
    <pluginArgs>--inputFile @@dataDir@@/so.obo --soExtDbRlsName "SO_RSRC"</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <datasetClass class="mgedOntologyTermTypes" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>   
  <datasetLoader datasetName="Mged_Ontology_Term_Types_RSRC" version="${version}"
              plugin="GUS::Supported::Plugin::InsertOntologyTermType"
              scope="global"
              type="sres"
              >
    <manualGet fileOrDir="common/ontology/Mged/${version}/final/MgedOntologyTermTypes.tab">
        <dir name="final">
        </dir>
      </manualGet>
    <pluginArgs>--inputFile @@dataDir@@/MgedOntologyTermTypes.tab</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <datasetClass class="mgedOntologyRelationshipTypes" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>   
  <datasetLoader datasetName="Mged_Ontology_Relationship_Types_RSRC" version="${version}"
              plugin="GUS::Supported::Plugin::InsertOntologyRelationshipType"
              scope="global"
              type="sres"
              >
    <manualGet fileOrDir="common/ontology/Mged/${version}/final/MgedOntologyRelationshipTypes.tab">
        <dir name="final">
        </dir>
      </manualGet>
    <pluginArgs>--inputFile @@dataDir@@/MgedOntologyRelationshipTypes.tab</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <datasetClass class="mgedOntology" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>   
  <datasetLoader datasetName="MGED_Ontology_RSRC" version="${version}"
              plugin="GUS::Supported::Plugin::InsertOntologyTermsAndRelationships"
              scope="global"
              type="sres"
              >
    <wgetArgs url="http://mged.sourceforge.net/ontologies/MGEDOntology.owl">--tries=5 --no-directories --no-host-directories --accept=@@dataDir@@/MGEDOntology.owl </wgetArgs>
    <pluginArgs>--inFile @@dataDir@@/MGEDOntology.owl --extDbName %DATASET_NAME% --extDbVersion %DATASET_VERSION% --uri 'http://mged.sourceforge.net/ontologies/MGEDontology.php' --parserType MgedRdfRow</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <!-- this should probably be just a step in the flow, not a dataset class -->
  <datasetClass class="mgedOntologyEntry" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>
  <datasetLoader datasetName="Mged_Ontology_Entry_RSRC" version="${version}"
              plugin="GUS::Community::Plugin::LoadOntologyEntryFromMO"
              scope="global"
              type="sres"
              >
    <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
    <pluginArgs>--externalDatabase MGED_Ontology_RSRC --externalDatabaseRls %DATASET_VERSION%</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <datasetClass class="geneOntologyEvidenceCodes" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>
  <datasetLoader datasetName="GO_evidence_codes_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertGOEvidenceCodesFromObo"
              scope="global"
              type="sres"
              >
    <manualGet fileOrDir="common/ontology/goEvidenceCodes/${version}/final/evidence_code.obo">
        <dir name="final">
        </dir>
    </manualGet>
    <pluginArgs>--oboFile @@dataDir@@/evidence_code.obo</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <!-- the interpro data must be installed manually on the cluster -->
  <datasetClass class="interproscanData" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>
  <datasetLoader datasetName="InterproscanData_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertInterproDomainDbs"
              scope="global"
              type="external_sequences"
              >

    <manualGet fileOrDir="common/domain/iprscanData/${version}/iprscan">
        <dir name="final">
        </dir>
      </manualGet>

    <unpack>fixSuperfamily @@dataDir@@/iprscan/data/</unpack>
    <pluginArgs>--inPath @@dataDir@@/iprscan/data/</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <datasetClass class="NRDB" category="" datasetFileHint="">
    <purpose></purpose>
  <datasetLoader datasetName="NRDB_RSRC" version="TODAY"
      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="global"
              type="external_sequences"
              >
    <wgetArgs url="ftp://ftp.ncbi.nih.gov/blast/db/FASTA/">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=3 --accept=nr.gz </wgetArgs>
    <unpack>gunzip @@dataDir@@/nr.gz </unpack>
    <unpack>shortenDefLine --inputFile @@dataDir@@/nr --outputFile @@dataDir@@/nrdb-short-defline.fsa.tmp</unpack>
    <unpack><![CDATA[cat @@dataDir@@/nrdb-short-defline.fsa.tmp | perl -e 'while(<>) { s/J|O/X/g;print}' > @@dataDir@@/nrdb-short-defline.fsa]]></unpack>
    <unpack>rm @@dataDir@@/nrdb-short-defline.fsa.tmp</unpack>
    <unpack><![CDATA[cat @@dataDir@@/nrdb-short-defline.fsa | perl -e '$flag=0; while(<>){if ($_ =~ />/){if ($_ =~ /sp\|/){$flag=1;}else{$flag=0;}} if ($flag == 1){ print;}}'> @@dataDir@@/nrdb-short-defline-sp.fsa]]></unpack>
    <getAndUnpackOutput file="@@dataDir@@/nrdb-short-defline-sp.fsa"/>
    <getAndUnpackOutput file="@@dataDir@@/nrdb-short-defline.fsa"/>
    <getAndUnpackOutput file="@@dataDir@@/nr"/>
    <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <datasetClass class="blatAlignmentQuality" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>
  <datasetLoader datasetName="blatAlignmentQuality_RSRC" version="${version}"
              plugin="GUS::Supported::Plugin::LoadGusXml"
              scope="global"
              type="sres"
              >
    <manualGet fileOrDir="common/ontology/alignmentQuality/${version}/final/blatalignmentquality.xml">
        <dir name="final">
        </dir>
      </manualGet>
    <pluginArgs>--filename @@dataDir@@/blatalignmentquality.xml</pluginArgs>
  </datasetLoader>
  </datasetClass>

  <datasetClass class="isolateVocabulary" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="isolatesVocabulary.xml"/>

    <datasetLoader datasetName="isolateVocabulary_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertIsolateVocabulary"
              scope="global"
              type="sres"
              >
      <manualGet fileOrDir="common/ontology/isolateVocabulary/${version}/final/isolateVocabulary.txt">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--isolateVocabularyFile @@dataDir@@/isolateVocabulary.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="isolateGeographicLocationVocabulary" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="isolatesVocabulary.xml"/>

    <datasetLoader datasetName="geographicLocations_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertContinents"
              scope="global"
              type="sres"
              >
      <manualGet fileOrDir="common/ontology/geographicLocations/${version}/final/geographicLocations.txt">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--continentsFile @@dataDir@@/geographicLocations.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="isolateGeographicLocationGPS" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="isolatesVocabulary.xml"/>

    <datasetLoader datasetName="geographicLocationGPS_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertIsolateGPS"
              scope="global"
              type="sres"
              >
      <manualGet fileOrDir="common/ontology/geographicLocations/${version}/final/countryGPS.txt">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--isolateGPSFile @@dataDir@@/countryGPS.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <datasetClass class="isolateQualifierToVocabMapping" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="isolatesVocabulary.xml"/>

    <datasetLoader plugin="ApiCommonData::Load::Plugin::InsertIsolateVocabMapping"
              datasetName="isolateVocabularyMap_RSRC"
              version="${version}"
              scope="global"
              >
      <manualGet fileOrDir="common/ontology/isolateVocabulary/${version}/final/qualifierToVocabMapping/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--geographicXmlFile @@dataDir@@/qualifierToVocabMapping/geographicLocation.xml  --sourceXmlFile @@dataDir@@/qualifierToVocabMapping/isolationSource.xml --hostXmlFile @@dataDir@@/qualifierToVocabMapping/specificHost.xml</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <datasetClass class="bibRefType" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version">&version;</prop>


    <datasetLoader datasetName="BibRefType_RSRC" version="${version}"
              plugin="GUS::Supported::Plugin::LoadGusXml"
              scope="global"
              type="sres"
              >
      <manualGet fileOrDir="common/ontology/bibliographicReferenceType/${version}/final/ncbiPublicationTypes.xml">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--filename @@dataDir@@/ncbiPublicationTypes.xml</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="yeastTwoHybrid" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="organismSpecificMisc.xml"/>
    
    <datasetLoader datasetName="${organismAbbrev}_interaction_${name}_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertYeastTwoHybrid"
              type="interaction"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/interaction/${name}/${version}/final/interaction_dataset.txt" >
	<dir name="final">
	</dir>
      </manualGet>
      <pluginArgs>--interactionFile @@dataDir@@/interaction_dataset.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="antiCodon" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="version">&version;</prop>
    <prop name="genomeVersion"/>
    <graphTemplateFile name="organismSpecificMisc.xml"/>
    
    <datasetLoader datasetName="${organismAbbrev}_mRNA_anticodon_RSRC"  version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertAntiCodon"
       	      scope="organism"
              type="sres"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/mRNA/anticodon/${version}/final/antiCodons.txt" >
     	<dir name="final">
	</dir>
     </manualGet>
     <pluginArgs>--data_file @@dataDir@@/antiCodons.txt --genomeDbName '${organismAbbrev}_primary_genome_RSRC' --genomeDbVer '${genomeVersion}' </pluginArgs>
    </datasetLoader>
  </datasetClass>


  <datasetClass class="relatedNaFeature" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <graphTemplateFile name="organismSpecificMisc.xml"/>
   
    <datasetLoader datasetName="${organismAbbrev}_interaction_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertRelatedNaFeature"
	      scope="organism"
              type="feature"
	      organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/interaction/${name}/${version}/final/above-2-links">
	<dir name="final">
	</dir>
      </manualGet>
      <pluginArgs>--interactionFile @@dataDir@@/above-2-links --extDbName %DATASET_NAME% --extDbVersion %DATASET_VERSION% --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="phenotypeFeatures" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <graphTemplateFile name="organismSpecificMisc.xml"/>
   
    <datasetLoader datasetName="${organismAbbrev}_phenotype_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertPhenotypeFeatures"
	      scope="organism"
              type="phenotype"
	      organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/phenotype/${name}/${version}/final/phenotype_features.xml">
	<dir name="final">
	</dir>
      </manualGet>
      <pluginArgs>--inputFile @@dataDir@@/phenotype_features.xml --extDbName %DATASET_NAME% --extDbVer %DATASET_VERSION% --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <datasetClass class="isolateSNPsFromChip" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="isolateType"/>
    <graphTemplateFile name="SNPs.xml"/>
    
    <datasetLoader datasetName="${organismAbbrev}_SNP_${name}_RSRC" version="${version}"
        plugin="ApiCommonData::Load::Plugin::InsertIsolateBarcodeChip"
        scope="organism"
        type="isolates"
        subType="${isolateType}"
        allowedSubTypes="barcode,hd_array,3k_chip"
        organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/SNP/${name}/${version}/final/isolateSNPs.txt">
      <dir name="final">
      </dir>
      </manualGet>
      <pluginArgs>--extDbName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION% --inputFile @@dataDir@@/isolateSNPs.txt --SOTermName 'SNP'</pluginArgs>
    </datasetLoader>
  </datasetClass> 


  <datasetClass class="predictedAAFeature" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="category"/>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="genomeVersion"/>
    <graphTemplateFile name="organismSpecificMisc.xml"/>
   
    <datasetLoader datasetName="${organismAbbrev}_${category}_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertPredictedAAFeature"
              type="aa_feature"
	      scope="organism"
	      organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/${category}/${name}/${version}/final/apFile.txt">
	<dir name="final">
	</dir>
      </manualGet>
      <pluginArgs>--inputFile @@dataDir@@/apFile.txt --extDbRelSpec "%DATASET_NAME%|%DATASET_VERSION%" --seqExtDbRelSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --category "secretome" --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="singleMotifMultMappings" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="category"/>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="motif"/>
    <prop name="motifName"/>
    <graphTemplateFile name="organismSpecificMisc.xml"/>
   
    <datasetLoader datasetName="${organismAbbrev}_${category}_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertSingleMotifMultMappings"
              type="aa_feature"
	      scope="organism"
	      organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/${category}/${name}/${version}/final/singleMotifMultMappings.txt">
	<dir name="final">
	</dir>
      </manualGet>
      <pluginArgs>--inputFile @@dataDir@@/singleMotifMultMappings.txt --motif "${motif}" --motifName "${motifName}" --description "motif" --category "secretome" --extDbRelSpec "%DATASET_NAME%|%DATASET_VERSION%" --seqExtDbRelSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>


  <datasetClass class="geneFeatureLODScores" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <graphTemplateFile name="organismSpecificMisc.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_eQTL_${name}_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertGeneFeatureLODScores"
              type="genetic_mapping"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/eQTL/${name}/${version}/final/All_LODscores.txt">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--file @@dataDir@@/All_LODscores.txt   --extDbName  "%DATASET_NAME%" --extDbVer "%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>



  <datasetClass class="GFF" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="genomeVersion"/>
    <prop name="gffFormat"/>
    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_${name}_GFF_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertGFF3"
              type="feature"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/gff/${name}/${version}/final/${organismAbbrev}_${name}.gff">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--file @@dataDir@@/${organismAbbrev}_${name}.gff  --gff3DbName  "%DATASET_NAME%" --gff3DbVer "%DATASET_VERSION%"  --gffFormat ${gffFormat} --seqExtDbName ${organismAbbrev}_primary_genome_RSRC --seqExtDbRlsVer ${genomeVersion}</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="Profiles" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <graphTemplateFile name="organismSpecificMisc.xml"/>
   
    <datasetLoader datasetName="${organismAbbrev}_Profiles_${name}_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertExpressionProfiles"
              type="profiles"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/profiles/${name}/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--inputDir @@dataDir@@/final --configFile @@dataDir@@/final/profiles.config --tolerateMissingIds --externalDatabase "%DATASET_NAME%" --externalDatabaseRls "%DATASET_VERSION%" --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="massSpecFromProfiles" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <graphTemplateFile name="organismSpecificMisc.xml"/>
   
    <datasetLoader datasetName="${organismAbbrev}_massSpec_${name}_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertExpressionProfiles"
              type="protein_expression"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/massSpec/${name}/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--inputDir @@dataDir@@/final --configFile @@dataDir@@/final/mass_spec_profiles.config --tolerateMissingIds --externalDatabase "%DATASET_NAME%" --externalDatabaseRls "%DATASET_VERSION%" --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="quantitativeMassSpecProfiles" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <graphTemplateFile name="organismSpecificMisc.xml"/>
   
    <datasetLoader datasetName="${organismAbbrev}_quantitativeMassSpec_${name}_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertExpressionProfiles"
              type="protein_expression"
              subType="quantitative"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/quantitativeMassSpec/${name}/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--inputDir @@dataDir@@/final --configFile @@dataDir@@/final/profiles.config --tolerateMissingIds --externalDatabase "%DATASET_NAME%" --externalDatabaseRls "%DATASET_VERSION%" --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="phylogeneticProfiles" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="version">&version;</prop>
    <prop name="threshold"/>
    <graphTemplateFile name="organismSpecificMisc.xml"/>
    <datasetLoader datasetName="${organismAbbrev}_phylogeny_phylogeneticProfiles_RSRC" version="{$version}"
            plugin="GUS::Community::Plugin::InsertPhylogeneticProfiles"
            type="orthology"
            scope="organism"
            organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/phylogeny/PhylogeneticProfiles/${version}/final">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--ProfileSetDescription 'the phylogenetic profiles for ${organismAbbrev}' --headerFile @@dataDir@@/final/taxonNameHeaders --profilesDataFile @@dataDir@@/final/phylogenetic-profiles-any-and-target-organism.gz --mutualInformationDataFile @@dataDir@@/final/phylogenetic-profiles-any-and-target-organism.muinfo.gz --tolerateMissingIds 1 --dontLoadScores --threshold "${threshold}" --organismAbbrev ${organismAbbrev}</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="UpdateRodentPlasmodiumChromosomes" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="organismFullName">&organismFullName;</prop>
    <prop name="rodentOrganisms"/>

    <graphTemplateFile name="organismSpecificMisc.xml"/>
    
    <datasetLoader datasetName="${organismAbbrev}_UpdateRodentPlasmoChr_${name}_RSRC" version="${version}"
        plugin="ApiCommonData::Load::Plugin::UpdateRodentPlasmodiumChromosomes"
        type="genome"
        scope="organism"
        organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/comparativeGenomics/${name}/${version}/final/RMP_Pf_fromKooij.txt">
      <dir name="final">
      </dir>
      </manualGet>
      <pluginArgs>--mappingFile @@dataDir@@/RMP_Pf_fromKooij.txt --falciparum_organism "${organismFullName}" --rodent_organisms "${rodentOrganisms}" --addChrColorTable 1</pluginArgs>
    </datasetLoader>
  </datasetClass> 


  <datasetClass class="pfalLocationsWithSqlLdr" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>
    
    <datasetLoader datasetName="${organismAbbrev}_LocMapSqlLdr_${name}_RSRC" version="${version}"
        plugin="ApiCommonData::Load::Plugin::InsertPlasmoPfalLocationsWithSqlLdr"
        type="unknown"
        scope="organism"
        organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/SNP/${name}/${version}/final/map_v6.0.sql">
      <dir name="final">
      </dir>
      </manualGet>
      <pluginArgs>--dataFile  @@dataDir@@/map_v6.0.sql</pluginArgs>
    </datasetLoader>
  </datasetClass> 

  <datasetClass class="SiRNA" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <graphTemplateFile name="organismSpecificMisc.xml"/>
    
    <datasetLoader datasetName="${organismAbbrev}_SiRNASqlLdr_${name}_RSRC" version="${version}"
        plugin="ApiCommonData::Load::Plugin::InsertSiRNAWithSqlLdr"
        type="unknown"
        scope="organism"
        organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/phenotype/${name}/${version}/final/siRNA.sql">
      <dir name="final">
      </dir>
      </manualGet>
      <pluginArgs>--dataFile  @@dataDir@@/siRNA.sql</pluginArgs>
    </datasetLoader>
  </datasetClass> 

  <datasetClass class="plasmoMapp" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_genomeFeature_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              type="feature"
	      scope="organism"
	      organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}/${version}/final">
	<dir name="final">
	</dir>
      </manualGet>

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>

    </datasetLoader>
  </datasetClass>


    <datasetClass class="geneName" category="" datasetFileHint="">
      <purpose></purpose>
      <prop name="projectName">&projectName;</prop>
      <prop name="organismAbbrev">&organismAbbrev;</prop>
      <prop name="name">&name;</prop>
      <prop name="version">&version;</prop>
      <prop name="genomeVersion"/>

      <graphTemplateFile name="organismSpecificMisc.xml"/>

      <datasetLoader datasetName="${organismAbbrev}_genome_${name}_RSRC" version="${version}" 
		plugin="ApiCommonData::Load::Plugin::InsertGeneNamesFromTabFile"
                type="gene_annotation"
		scope="organism"
		organismAbbrev="${organismAbbrev}">

	<manualGet fileOrDir="${projectName}/${organismAbbrev}/function/${name}_gene_names/${version}/final/geneName.txt">
	  <dir name="final">
	  </dir>
	</manualGet>
	<pluginArgs>--file @@dataDir@@/geneName.txt --geneNameDbName '${organismAbbrev}_primary_genome_RSRC' --geneNameDbVer '${genomeVersion}'</pluginArgs>
      </datasetLoader>
    </datasetClass>
    

  <!-- This dataset class load old sequences of genes in ApiDB.OldCodingSequence and old GO ids, EC numbers and product in ApiDB.OldAnnotation-->
  <datasetClass class="insertOldAnnotation" category="" datasetFileHint="">
    <purpose>Gene features that are not provided by the annotation center</purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>


    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_InsertOldAnnotation_${name}_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertOldAnnotation"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/gff/${name}_GFF/${version}/final/features.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %DATASET_NAME% --extDbRlsVer %DATASET_VERSION%  --gffFile @@dataDir@@/features.gff</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <!-- NOTE: this class is specific to Crypto and is used to populate apidb.continents  -->
  <datasetClass class="updateIsolatesByContinents" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_updateIsolatesByContinents_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertContinents"
              scope="organism"
              type="isolates"
              subType=""
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/updateIsolatesByContinents/${version}/final/continents.txt">
        <dir name="final">
        </dir>
      </manualGet>

     <pluginArgs>--continentsFile @@dataDir@@/continents.txt</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <!-- NOTE: this class is specific to Crypto and is used to update product and product_alias in dots.isolatefeature -->
  <datasetClass class="updateIsolateFeaturesByProductAlias" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="version">&version;</prop>

    <graphTemplateFile name="isolatesFromNonHtsSequencing.xml"/>

    <datasetLoader datasetName="${organismAbbrev}_updateIsolateFeaturesByProductAlias_RSRC"
              version="${version}"
	          plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="isolates"
              subType=""
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/updateIsolateFeaturesByProductAlias/${version}/final/productAlias.txt">
        <dir name="final">
        </dir>
      </manualGet>

     <unpack>addProductAliasToIsolateFeature.pl --file @@dataDir@@/productAlias.txt --extDbName ${organismAbbrev}_isolates_genbank_RSRC --extDbVer 'TODAY'</unpack>
     <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>

  <datasetClass class="orthomclClade" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="cladeAbbrev"/>
    <prop name="version">&version;</prop>
    <prop name="ncbiTaxonId">&ncbiTaxonId;</prop>
    <prop name="containsOnlyOneOrganism"/>

    <graphTemplateFile name="orthomclProject.xml"/>

    <datasetLoader datasetName="${cladeAbbrev}_orthomclClade_RSRC"
              version="${version}"
              plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="global"
              organismAbbrev="">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <!-- validate final dir existence -->
<!--
      <unpack>ls @@manualDeliveryDir@@/OrthoMCL/${cladeAbbrev}/${version}/final</unpack>

      <unpack>ln -s @@manualDeliveryDir@@/OrthoMCL/${cladeAbbrev}/${version}/final/ @@dataDir@@/final</unpack>
-->
      <unpack>ls @@manualDeliveryDir@@/OrthoMCL/PlanA/${cladeAbbrev}</unpack>

      <unpack>ln -s @@manualDeliveryDir@@/OrthoMCL/PlanA/${cladeAbbrev} @@dataDir@@/final</unpack>
     <getAndUnpackOutput file="@@dataDir@@/final"/>
     <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>

    </datasetLoader>
  </datasetClass>

  <!-- NOTE:  because the data files are so large, we don't copy into our
       workflow data dir, but use a symlink into manual deliv instead -->

  <!-- final/ dir must have a file per sample, with name identical to the 
       sample name.  if there are paired ends reads, each sample will also
       have a samplename.paired file -->
  <datasetClass class="rnaSeqSplicedLeaderAndPolyASitesExperiment" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName">&projectName;</prop>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="name">&name;</prop>
    <prop name="version">&version;</prop>
    <prop name="type"/>

    <graphTemplateFile name="organismSpecificMiscNoAlias.xml"/>
    <datasetLoader datasetName="${organismAbbrev}_${name}_rnaSeqSplicedLeaderAndPolyASites_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="rnaseq"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
      <unpack>ln -s @@manualDeliveryDir@@/${projectName}/${organismAbbrev}/splicedLeader_polyASites/${name}/${version}/final/ @@dataDir@@/final</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final" />
      <getAndUnpackOutput file="@@dataDir@@/final/config.txt"/>
      <getAndUnpackOutput file="@@dataDir@@/final/profile_config.txt"/>
      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>
<!-- type: Splice Site or Poly A -->
  <datasetClass class="rnaSeqSplicedLeaderAndPolyASitesSample" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev">&organismAbbrev;</prop>
    <prop name="experimentName"/>
    <prop name="sampleName"/>
    <prop name="type"/>

    <graphTemplateFile name="rnaSeqSplicedLeaderAndPolyASitesSamples.xml"/>

      <!-- we load a fake resource here so we can make a getAndUnpackOutput -->
      <!-- to declare existence of sample file that is acquired by experiment, for test mode -->
    <datasetLoader datasetName="${organismAbbrev}_${experimentName}_${sampleName}_rnaSeqSplicedLeaderAndPolyASitesSample_RSRC" version="dontcare"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="rnaseq"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_${experimentName}_rnaSeqSplicedLeaderAndPolyASites_RSRC/final/${sampleName}" />

      <pluginArgs>--dbRefExternalDatabaseSpec "%DATASET_NAME%|%DATASET_VERSION%"</pluginArgs>
    </datasetLoader>
  </datasetClass>


    <!-- Category:OrthoMCL -->
    <!-- subCategory:proteomes -->

  <datasetClass class="ensemblCoreProteome" category="" datasetFileHint="">
    <purpose>Download and load the proteins, to be used in the proteome collection for OrthoMCL, from the main or core Ensembl database. Files will be processed to obtain the longest protein representative of each gene, to filter out proteins that are less than 10 aa long or that have more than 20 stop codons, and to append the orthomcl abbrev with pipe to the source_id. </purpose>
    <prop name="species"> The species name as it is used in the Ensembl ftp directory, e.g. mus_musculus from ftp://ftp.ensembl.org/pub/current/fasta/mus_musculus/pep/. </prop>
    <prop name="abbrev"> The unique 4-letter abbreviation used by OrthoMCL for each organism, will be prepended with a pipe to the source_id, e.g. aaeo|NP_212986. </prop>
    <prop name="ncbiTaxonId"> The ncbi_tax_id for the specific strain, obtained from the NCBI Taxonomy database. </prop>
    <prop name="version"> The actual release version designated by Ensembl for this proteome file, e.g. release-71. </prop>
    <prop name="filename"> The specific filename, e.g. Mus_musculus.GRCm38.71.pep.all.fa.gz, should be the pep.all file and not the ab initio file which is not curated. </prop>
    <prop name="oldAbbrevsList"> List of old orthomcl abbrevs if they differ from the current e.g. 3:pfa, 4:pfa. </prop>


    <graphTemplateFile name="orthomclFull.xml"/>

    <datasetLoader datasetName="${abbrev}_orthomclProteome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              type="proteome"
              organismAbbrev="${abbrev}"
              scope="organism" > 

    <wgetArgs url="ftp://ftp.ensembl.org/pub/current_fasta/${species}/pep/">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=4 --accept=${filename} </wgetArgs> 

    <unpack>processEnsProtFile --fastaFile @@dataDir@@/${filename}  --maxStopCodonPercent 20 --outputFile @@dataDir@@/${abbrev}ProteomeMod.fasta </unpack>

    <unpack>orgAbbrevSourceId --inputFile @@dataDir@@/${abbrev}ProteomeMod.fasta   --abbrev $abbrev --outputFile @@dataDir@@/${abbrev}Proteome.fasta </unpack>

    <pluginArgs> --externalDatabaseName %DATASET_NAME% --externalDatabaseVersion %DATASET_VERSION% --ncbiTaxId $ncbiTaxonId  --sequenceFile "@@dataDir@@/${abbrev}Proteome.fasta" --regexSourceId "^>(\S+)" --tableName "DoTS::ExternalAASequence"</pluginArgs>

    </datasetLoader>
  </datasetClass>

<datasetClass class="ensemblBacterialProteome" category="" datasetFileHint="">
    <purpose>Download and load the proteins, to be used in the proteome collection for OrthoMCL, from the Ensembl database for bacteria. Files will be processed to filter out proteins that are less than 10 aa long or that have more than 20 stop codons  and to append the orthomcl abbrev with pipe to the source_id. </purpose>
    <prop name="organism"> The organism (likely a strain) name as used in the Ensembl ftp directory, e.g. escherichia_coli_1_2264 in ftp://ftp.ensemblgenomes.org/pub/bacteria/release-17/fasta/bacteria_2_collection/escherichia_coli_1_2264/pep/. </prop>
    <prop name="abbrev"> The unique 4-letter abbreviation used by OrthoMCL for each organism, will be prepended with a pipe to the source_id, e.g. aaeo|NP_212986. </prop>
    <prop name="ncbiTaxonId"> The ncbi_tax_id for the specific strain, obtained from the NCBI Taxonomy database. </prop>
    <prop name="version"> The actual release version designated by Ensembl for this proteome file, e.g. release-17. </prop>
    <prop name="filename"> The specific filename, should be the pep.all file and not the ab initio file which is not curated e.g.Escherichia_coli_1_2264.GCA_000194415.2.17.pep.all.fa.gz. </prop> 
    <prop name="collection"> Ensembl structures the bacterial files into subdirectories called collections e.g. bacteria_2_collection(see the URL above). </prop>
    <prop name="oldAbbrevsList"> List of old orthomcl abbrevs if they differ from the current e.g. 3:pfa, 4:pfa. </prop>

    <graphTemplateFile name="orthomclFull.xml"/>

    <datasetLoader datasetName="${abbrev}_orthomclProteome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              type="proteome"
              organismAbbrev="${abbrev}"
              scope="organism">
     

    <wgetArgs url="ftp://ftp.ensemblgenomes.org/pub/bacteria/current/fasta/${collection}/${organism}/pep/">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=4 --accept=${filename} </wgetArgs> 

    <unpack>processEnsProtFile --fastaFile @@dataDir@@/${filename}  --maxStopCodonPercent 20 --outputFile @@dataDir@@/${abbrev}ProteomeMod.fasta </unpack>

    <unpack>orgAbbrevSourceId --inputFile @@dataDir@@/${abbrev}ProteomeMod.fasta   --abbrev $abbrev --outputFile @@dataDir@@/${abbrev}Proteome.fasta </unpack>

    <pluginArgs> --externalDatabaseName %DATASET_NAME% --externalDatabaseVersion %DATASET_VERSION% --ncbiTaxId $ncbiTaxonId  --sequenceFile "@@dataDir@@/${abbrev}Proteome.fasta" --regexSourceId '^>(\S+)' --tableName "DoTS::ExternalAASequence"</pluginArgs>

    </datasetLoader>
  </datasetClass>

<datasetClass class="ensemblExtendedProteome" category="" datasetFileHint="">
    <purpose>Download and load the proteins, to be used in the proteome collection for OrthoMCL, from the extended Ensembl database, not the core or bacterial database. Files will be processed to obtain the longest protein representative of each gene, to filter out proteins that are less than 10 aa long or that have more than 20 stop codons, and to append the orthomcl abbrev with pipe to the source_id</purpose>
    <prop name="species">The species name as it is used in the Ensembl ftp directory, e.g. anopheles_gambiae ftp://ftp.ensemblgenomes.org/pub/metazoa/release-17/fasta/anopheles_gambiae/pep/. </prop>
    <prop name="abbrev">The unique 4-letter abbreviation used by OrthoMCL for each organism, will be prepended with a pipe to the source_id, e.g. aaeo|NP_212986. </prop>
    <prop name="ncbiTaxonId">The ncbi_tax_id for the specific strain, obtained from the NCBI Taxonomy database. </prop>
    <prop name="version">The actual release version designated by Ensembl for this proteome file, e.g. release-71. </prop>
    <prop name="filename">The specific filename, should be the pep.all file and not the ab initio file which is not curated e.g.Anopheles_gambiae.AgamP3.17.pep.all.fa.gz. </prop>
    <prop name="division">[fungi|metazoa|plants|protists], Ensembl organizes the organisms that are not in their core or bacterial database into major divisions (see the URL above). </prop> 
    <prop name="oldAbbrevsList"> List of old orthomcl abbrevs if they differ from the current e.g. 3:pfa, 4:pfa. </prop>

    <graphTemplateFile name="orthomclFull.xml"/>

    <datasetLoader datasetName="${abbrev}_orthomclProteome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              type="proteome"
              scope="organism"
              organismAbbrev="${abbrev}"> 

    <wgetArgs url="ftp://ftp.ensemblgenomes.org/pub/${division}/current/fasta/${species}/pep/">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=4 --accept=${filename} </wgetArgs> 

    <unpack>processEnsProtFile --fastaFile @@dataDir@@/${filename}  --maxStopCodonPercent 20 --outputFile @@dataDir@@/${abbrev}ProteomeMod.fasta </unpack>

    <unpack>orgAbbrevSourceId --inputFile @@dataDir@@/${abbrev}ProteomeMod.fasta   --abbrev $abbrev --outputFile @@dataDir@@/${abbrev}Proteome.fasta </unpack>    

    <pluginArgs> --externalDatabaseName %DATASET_NAME% --externalDatabaseVersion %DATASET_VERSION% --ncbiTaxId $ncbiTaxonId  --sequenceFile "@@dataDir@@/${abbrev}Proteome.fasta" --regexSourceId '^>(\S+)' --tableName "DoTS::ExternalAASequence"</pluginArgs>

    </datasetLoader>
  </datasetClass>

<datasetClass class="q4OProteome" category="" datasetFileHint="">
    <purpose>Download and load the proteins, to be used in the proteome collection for OrthoMCL, from the Quest for Orthologs database. Only the cononical (reference protein from each gene) file will be downloaded. Files will be processed to rearrange the def line, to filter out proteins that are less than 10 aa long or that have more than 20 stop codons, and to append the orthomcl abbrev with pipe to the source_id</purpose>
    <prop name="ncbiTaxonId">The ncbi_tax_id for the specific strain, obtained from the NCBI Taxonomy database. </prop>
    <prop name="organism">Full organism name from ncbi taxonomy but with underscore in place of spaces e.g. Aedes_aegypti</prop>
    <prop name="version"> The date of the file being downloaded.</prop>
    <prop name="abbrev">The unique 4-letter abbreviation used by OrthoMCL for each organism, will be prepended with a pipe to the source_id, e.g. aaeo|NP_212986. </prop>
    <prop name="oldAbbrevsList"> List of old orthomcl abbrevs if they differ from the current e.g. 3:pfa, 4:pfa. </prop>
 
    <graphTemplateFile name="orthomclFull.xml"/>

    <datasetLoader datasetName="${abbrev}_orthomclProteome_RSRC" 
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="organism"
              type="proteome"
              organismAbbrev="${abbrev}"
              version="${version}">


     <wgetArgs url="ftp://ftp.ebi.ac.uk/pub/databases/reference_proteomes/current_release/"> --tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=4 --accept=${ncbiTaxonId}.fasta.gz</wgetArgs>

     <unpack>processQ4OProtFile --fastaFile @@dataDir@@/${ncbiTaxonId}.fasta.gz  --maxStopCodonPercent 20 --outputFile @@dataDir@@/${abbrev}ProteomeMod.fasta </unpack>

     <unpack>orgAbbrevSourceId --inputFile @@dataDir@@/${abbrev}ProteomeMod.fasta   --abbrev $abbrev --outputFile @@dataDir@@/${abbrev}Proteome.fasta </unpack> 

      <pluginArgs>--externalDatabaseName %DATASET_NAME% --externalDatabaseVersion %DATASET_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/${abbrev}Proteome.fasta --regexSourceId '^>(\S+)' --regexDesc "D=(.*)"  --tableName "DoTS::ExternalAASequence"</pluginArgs>
    </datasetLoader>
  </datasetClass>

<datasetClass class="euPathProteome" category="" datasetFileHint="">
    <purpose>Download and load the proteins, to be used in the proteome collection for OrthoMCL, from one of the EuPathDB project download directories. Files will be processed to filter out proteins that are less than 10 aa long or that have more than 20 stop codons, and to append the orthomcl abbrev with pipe to the source_id</purpose>
    <prop name="ncbiTaxonId">The ncbi_tax_id for the specific strain, obtained from the NCBI Taxonomy database. </prop>
    <prop name="organism">Organism name for filenames used in the EuPathDB project e.g. PbergheiANKA</prop>
    <prop name="release"> Release number for the EuPathDB project, e.g. 9.3.</prop>
    <prop name="project"> The EuPathDB project, e.g. PlasmoDB.</prop>
    <prop name="abbrev">The unique 4-letter abbreviation used by OrthoMCL for each organism, will be prepended with a pipe to the source_id, e.g. aaeo|NP_212986. </prop>
    <prop name="oldAbbrevsList"> List of old orthomcl abbrevs if they differ from the current e.g. 3:pfa, 4:pfa. </prop>
 
    <graphTemplateFile name="orthomclFull.xml"/>

    <datasetLoader datasetName="${abbrev}_orthomclProteome_RSRC" 
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="organism"
              organismAbbrev="${abbrev}"
              type="proteome"
              version="${release}">


     <wgetArgs url="http://${project}.org/common/downloads/Current_Release/${organism}/fasta/data/"> --tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=6 --accept=${project}-${release}_${organism}_AnnotatedProteins.fasta</wgetArgs>

     <unpack>processEuPathProtFile --fastaFile @@dataDir@@/${project}-${release}_${organism}_AnnotatedProteins.fasta  --maxStopCodonPercent 20 --outputFile @@dataDir@@/${abbrev}ProteomeMod.fasta </unpack>

     <unpack>orgAbbrevSourceId --inputFile @@dataDir@@/${abbrev}ProteomeMod.fasta  --abbrev $abbrev --outputFile @@dataDir@@/${abbrev}Proteome.fasta </unpack> 

      <pluginArgs>--externalDatabaseName %DATASET_NAME% --externalDatabaseVersion %DATASET_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/${abbrev}ProteomeMod.fasta --regexSourceId '^>(\S+)' --regexDesc "product=([^|]*)\|"  --tableName "DoTS::ExternalAASequence"</pluginArgs>
    </datasetLoader>
  </datasetClass>


<datasetClass class="manualDeliveryProteome" category="" datasetFileHint="">
    <purpose>Download and load the proteins, to be used in the proteome collection for OrthoMCL, from the OrthoMCL manualDelivery directory. File defline should have >source_id\sdefinition which may require preprocessing. Files will be processed to filter out proteins that are less than 10 aa long or that have more than 20 stop codons, and to append the orthomcl abbrev with pipe to the source_id</purpose>
    <prop name="ncbiTaxonId">The ncbi_tax_id for the specific strain, obtained from the NCBI Taxonomy database. </prop>
    <prop name="species">Species name with spaces replaced by underscores e.g. </prop>
    <prop name="version"> Date or version number of file as it appears in manualDelivery.</prop>
    <prop name="abbrev">The unique 4-letter abbreviation used by OrthoMCL for each organism, will be prepended with a pipe to the source_id, e.g. aaeo|NP_212986. </prop>
    <prop name="oldAbbrevsList"> List of old orthomcl abbrevs if they differ from the current e.g. 3:pfa, 4:pfa. </prop>
 
    <graphTemplateFile name="orthomclFull.xml"/>

    <datasetLoader datasetName="${abbrev}_orthomclProteome_RSRC" 
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="organism"
              organismAbbrev="${abbrev}"
              type="proteome"
              version="${version}">


     <manualGet fileOrDir="OrthoMCL/proteomes/${species}/${version}/final/proteins.fasta.gz">
        <dir name="final">
        </dir>
      </manualGet>

     <unpack>processManDeliveryProtFile --fastaFile @@dataDir@@/${species}.fasta  --maxStopCodonPercent 20 --outputFile @@dataDir@@/${abbrev}ProteomeMod.fasta </unpack>

     <unpack>orgAbbrevSourceId --inputFile @@dataDir@@/${abbrev}ProteomeMod.fasta   --abbrev $abbrev --outputFile @@dataDir@@/${abbrev}Proteome.fasta </unpack> 

      <pluginArgs>--externalDatabaseName %DATASET_NAME% --externalDatabaseVersion %DATASET_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/${abbrev}Proteome.fasta  --regexSourceId "^>(\S+)" --regexDesc "^>\S+\s+(.*)"  --tableName "DoTS::ExternalAASequence"</pluginArgs>
    </datasetLoader>
  </datasetClass>

     <!-- subCategory:Clades -->

  <datasetClass class="orthomclClades" category="" datasetFileHint="">
    <purpose>Retrieve and load the hierarchy of clades file from manual delivery. </purpose>
    <prop name="release">Release number which serves as the subdirectory in manual delivery where the clades file is found.</prop>
     
    <graphTemplateFile name="orthomclFull.xml"/>

    <datasetLoader datasetName="orthomclClades_RSRC" 
	      plugin="ApiCommonData::Load::Plugin::InsertOrthomclTaxon"
              scope="global"
              type="taxonomy"
              version="${release}">

     <manualGet fileOrDir="common/orthology/orthoMCL/${release}">
        <dir name="taxonomy">
        </dir>
     </manualGet>

     <pluginArgs>--cladeFile  @@dataDir@@/orthomclClades.txt --speciesFile  @@dataDir@@/orthomclTaxons.txt</pluginArgs>

     </datasetLoader>
  </datasetClass>

</datasetClasses>

