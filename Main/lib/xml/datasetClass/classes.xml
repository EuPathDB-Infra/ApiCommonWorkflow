<datasetClasses>

  <defaultPropertyDescriptions>
    <prop name="organismAbbrev">The standard abbreviation for this organism.  For example TgonME49 for T. gondii ME49.  This abbreviation is like a "primary key" for the organism.  It must be unique to this organism, and may never change for the lifetime of the workflow.  It should only include alpha-numeric characters.</prop>
    <prop name="projectName">The name of the project, eg, PlasmoDB.  This value is used to find graph files that are generated from datasets, so it must be equal to the name of project directory which contains the project's dataset files.  It is stored in Core.ProjectInfo.name and must agree with the value in gus.config.  It is also used in the names of website files and directories.</prop>
    <prop name="publicOrganismAbbrev">The abbreviation for this organism that the end-user will see.   It is used when there is very limited space.</prop>
    <prop name="organismFullName">The full name for this organism.  Must match the scientific name in the NCBI taxonomy for this organism (see ncbiTaxonId).  It is specified redundantly to cross validate the name and ncbiTaxonId.</prop>
    <prop name="organismNameForFiles">The name of this organism for use in file and directory names.  It should not include white space or other characters that are not file friendly.</prop>
    <prop name="ncbiTaxonId">The NCBI Taxonomy ID for this organism.  The scientific name for this entry in the NCBI Taxonomy must match the organismFullName. </prop>
    <prop name="speciesNcbiTaxonId">The NCBI Taxonomy for the species that this organism is from.  This ID must agree with the ncbiTaxonId:  it must at or above it in the taxonomy and must have rank = 'species'</prop>
    <prop name="isReferenceStrain"></prop>
    <prop name="referenceStrainOrganismAbbrev"></prop>
    <prop name="isAnnotatedGenome"></prop>
    <prop name="hasTemporaryNcbiTaxonId"></prop>
    <prop name="orthomclAbbrev"></prop>
    <prop name="strainAbbrev"></prop>
  </defaultPropertyDescriptions>

  <datasetClass class="organism" category="" datasetFileHint="">
    <purpose>NOTE: in the datasets file, reference strains must precede secondary strains</purpose>
    <prop name="organismAbbrev"/>
    <prop name="projectName"/>
    <prop name="publicOrganismAbbrev"/>
    <prop name="organismFullName"/>
    <prop name="organismNameForFiles"/>
    <prop name="ncbiTaxonId"/>
    <prop name="speciesNcbiTaxonId"/>
    <prop name="isReferenceStrain"/>
    <prop name="referenceStrainOrganismAbbrev"/>
    <prop name="isFamilyRepresentative">This organism acts as a representative for its taxonomic family </prop>
    <prop name="familyRepOrganismAbbrev">Organism abbrev of the organism that, for this organism, acts as representative for its family.  All organisms must provide this value, even if self</prop>
    <prop name="familyNcbiTaxonIds">Only needed if this organism is a family representative.  One or more NCBI taxonomy IDs that are the root IDs for this family.  This is a flexible mechanism to steer around imperfections in the NCBI taxonomy at the family level.</prop>
    <prop name="familyNameForFiles">Only needed if this organism is an family representative.  The taxon name to use in download files for this family.</prop>
    <prop name="isAnnotatedGenome"/>
    <prop name="hasTemporaryNcbiTaxonId"/>
    <prop name="orthomclAbbrev"/>
    <prop name="strainAbbrev"/>
    <prop name="isHaploid"/>
    <prop name="hasDeprecatedGenes"/>
    <prop name="genomeSource"/>
    <prop name="genomeVersion"/>
    <prop name="annotationIncludesTRNAs"/>
    <prop name="runExportPred"/>
    <prop name="taxonHierarchyForBlastxFilter"/>
    <prop name="skipGenomeAnalysis"/>

    <prop name="maxIntronSize"/>

    <graphTemplateFile name="project.xml"/>

  </datasetClass>

  <datasetClass class="validateOrganismInfo" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev"/>
    <prop name="strainAbbrev"/>
    <prop name="projectName"/>
    <prop name="ncbiTaxonId"/>
    <prop name="speciesNcbiTaxonId"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

  </datasetClass>

  <!-- an instance of this class is needed if and only if an organism is a -->
  <!-- reference strain.  it is used by the strain comparison machinery -->
  <datasetClass class="referenceStrain" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev"/>
    <prop name="isAnnotatedGenome"/>

    <graphTemplateFile name="project.xml"/>

  </datasetClass>



  <!-- Category: genome -->

<!-- chromosomeMap.txt file with 3 tab delimited columns, source_id,chromosome,chromosome_order_number, must be in final dir for chromosomes -->
  <datasetClass class="genbank_primary_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="mapFile"/>
   

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              type="genome"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_genbank/${version}/final/">
        <dir name="final">
           <descrip>description would go here</descrip>
           <dir name="someSubDir">
             <descrip>subdir's descrip</descrip>
           </dir>
           <file name="*.fasta">more descrip</file>
           <file name="anotherFile">more descrip</file>
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/final/genome.gbf --chromosomeMapFile @@dataDir@@/final/chromosomeMap.txt --fileFormat genbank --soExtDbRlsName "SO_RSRC" --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out --validationLog @@dataDir@@/validation.log </pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="insertScaffoldGapFeatures" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev"/>
    <prop name="genomeDbName"/>
    <prop name="version"/>

    <graphTemplateFile name="primaryVirtualGenome.xml"/>

    <resource resource="${organismAbbrev}_insertScaffoldGapFeatures_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertScaffoldGapFeatures"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

     <pluginArgs>--extDbRlsName ${genomeDbName} --extDbRlsVer ${version}</pluginArgs>
    </resource>
  </datasetClass>

<!-- chromosomeMap.txt file with 3 tab delimited columns, source_id,chromosome,chromosome_order_number, must be in final dir for chromosomes -->
  <datasetClass class="genbank_secondary_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="mapFile"/>
    

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_${soTerm}_${name}_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_genbank/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/final/genome.gbf --chromosomeMapFile @@dataDir@@/final/chromosomeMap.txt --fileFormat genbank --soExtDbRlsName "SO_RSRC" --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out --validationLog @@dataDir@@/validation.log </pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="genbank_organelle_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="mapFile"/>
    <prop name="organelle"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_${soTerm}_${name}_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
              type="organellar_genome"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_genbank/${version}/final/genome.gbf">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.gbf --fileFormat genbank --soExtDbRlsName "SO_RSRC" --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out --validationLog @@dataDir@@/validation.log</pluginArgs>
    </resource>
  </datasetClass>

<!-- chromosomeMap.txt file with 3 tab delimited columns, source_id,chromosome,chromosome_order_number, must be in final dir for chromosomes -->
  <datasetClass class="embl_primary_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="mapFile"/>
 

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              type="genome"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_embl/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/final/genome.embl --chromosomeMapFile @@dataDir@@/final/chromosomeMap.txt --fileFormat embl --soExtDbRlsName "SO_RSRC" --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out --validationLog @@dataDir@@/validation.log</pluginArgs>
    </resource>
  </datasetClass>

<!-- chromosomeMap.txt file with 3 tab delimited columns, source_id,chromosome,chromosome_order_number, must be in final dir for chromosomes -->
  <datasetClass class="embl_secondary_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="mapFile"/>
   

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_${soTerm}_${name}_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_embl/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/final/genome.embl --chromosomeMapFile @@dataDir@@/final/chromosomeMap.txt --fileFormat embl --soExtDbRlsName "SO_RSRC" --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out--validationLog @@dataDir@@/validation.log </pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="embl_organelle_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="mapFile"/>
    <prop name="organelle"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_${soTerm}_${name}_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
              scope="organism"
              type="organellar_genome"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_embl/${version}/final/genome.embl">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.embl --fileFormat embl --soExtDbRlsName "SO_RSRC" --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out--validationLog @@dataDir@@/validation.log</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="GeneDB_GFF_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/GeneDB_GFF/${version}/final/genome.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/geneDBGFF2Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/chromosomeMap.txt</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="GeneDB_GFF_secondary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_${soTerm}_GeneDB_genome_features_RSRC"
              version="${version}"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_GeneDB_GFF/${version}/final/genome.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/geneDBGFF2Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_${soTerm}_RSRC/final/chromosomeMap.txt</pluginArgs>
    </resource>
  </datasetClass>

  <!-- must be used in conjunction w/ fasta_organelle_genome with name="GeneDB" -->
  <datasetClass class="GeneDB_GFF_organelle_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_${soTerm}_GeneDB_features_RSRC"
              version="${version}"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_GeneDB_GFF/${version}/final/genome.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/geneDBGFF2Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence</pluginArgs>
    </resource>
  </datasetClass>
  
  <datasetClass class="GTF_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="idPrefix"/>
    <prop name="source"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              type="genome"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${source}_gff3/${version}/final/genome.gtf">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>gtf2gff3_3level -p ${idPrefix} @@dataDir@@/genome.gtf > @@dataDir@@/genome.gff3</unpack>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>    

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/genericGFF2Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName SO_RSRC --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence</pluginArgs>
    </resource>
  </datasetClass>
  
    <datasetClass class="GFF_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="source"/>
    <prop name="mapFile"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
              type="genome"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${source}_genbank/${version}/final/genome.gff3">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/final/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>    

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff" --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/chromosomeMap.txt --fileFormat gff3 --soExtDbRlsName SO_RSRC  --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence</pluginArgs>
    </resource>
  </datasetClass>
  
    <datasetClass class="NoPreprocess_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="source"/>
    <prop name="mapFile"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              type="genome"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${source}_gff3/${version}/final/genome.gff">
        <dir name="final">
        </dir>
      </manualGet>
 

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff" --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/chromosomeMap.txt --fileFormat gff3 --soExtDbRlsName SO_RSRC  --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="Broad_GFF_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_Broad_gff3/${version}/final/genome.gtf">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>convertGTFToGFF3 @@dataDir@@/genome.gtf > @@dataDir@@/genome.gff3</unpack>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>    

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/broadGFF32Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/chromosomeMap.txt</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="NoPreprocess_GTF_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_Broad_gff3/${version}/final/genome.gtf">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>convertGTFToGFF3 @@dataDir@@/genome.gtf > @@dataDir@@/genome.gff3</unpack>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>    

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/broadGFF32Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/chromosomeMap.txt</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="VBI_primary_genome_features" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_Broad_gff3/${version}/final/genome.gtf">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>convertGTFToGFF3 @@dataDir@@/genome.gtf > @@dataDir@@/genome.gff3</unpack>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>    

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/broadGFF32Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence --chromosomeMapFile @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/chromosomeMap.txt</pluginArgs>
    </resource>
  </datasetClass>

<!-- chromosomeMap.txt file with 3 tab delimited columns, source_id,chromosome,chromosome_order_number, must be in final dir for chromosomes -->
  <datasetClass class="fasta_primary_genome_sequence" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="table"/>  <!-- example:  DoTS::NASequence -->
    <prop name="soTerm"/>
    <prop name="sourceIdRegex"/>
 
    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="organism"
              type="genome"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_fasta/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/final/genome.fasta --chromosomeMapFile @@dataDir@@/final/chromosomeMap.txt --soTermName ${soTerm} --regexSourceId "${sourceIdRegex}" --tableName "${table}"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="fasta_organelle_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="table"/>  <!-- example:  DoTS::NASequence -->
    <prop name="soTerm"/>
    <prop name="sourceIdRegex"/>
    <prop name="organelle"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_${soTerm}_${name}_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
              scope="organism"
              type="organellar_genome"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_fasta/${version}/final/genome.fasta">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseName %PARENT_RESOURCE_NAME% --externalDatabaseVersion %PARENT_RESOURCE_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/genome.fasta --soTermName ${soTerm} --regexSourceId "${sourceIdRegex}" --tableName "${table}"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="fasta_secondary_genome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="table"/>  <!-- example:  DoTS::NASequence -->
    <prop name="soTerm"/>
    <prop name="sourceIdRegex"/>

    <graphTemplateFile name="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_${soTerm}_${name}_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              parentResource="${organismAbbrev}_primary_genome_RSRC"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_fasta/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseName %PARENT_RESOURCE_NAME% --externalDatabaseVersion %PARENT_RESOURCE_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/final/genome.fasta --chromosomeMapFile @@dataDir@@/final/chromosomeMap.txt --soTermName ${soTerm} --regexSourceId "${sourceIdRegex}" --tableName "${table}"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="primaryVirtualGenome" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="virtualSeqSOTerm"/>
    <prop name="sourceIdPrefix"/>  <!-- optional.  add this prefix to the source ID. put "" in if the value is null -->
    <prop name="genomeVersion"/>

    <graphTemplateFile name="primaryVirtualGenome.xml"/>

    <resource resource="${organismAbbrev}_primary_virtual_genome_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertVirtualSeqFromAgpFile"
              scope="organism"
              type="genome"
              organismAbbrev="${organismAbbrev}">
      
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${virtualSeqSOTerm}_assembly_agp/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--agpFile @@dataDir@@/final/assembly.agp --seqPieceExtDbName ${organismAbbrev}_primary_genome_RSRC --seqPieceExtDbRlsVer ${genomeVersion} --virSeqExtDbName %RESOURCE_NAME% --virSeqExtDbRlsVer %RESOURCE_VERSION% --virtualSeqSOTerm ${virtualSeqSOTerm}  --ncbiTaxId ${ncbiTaxonId} --soExtDbRlsName "SO_RSRC"  --sourceIdPrefix ${sourceIdPrefix} --chromosomeOrderMappingFile @@dataDir@@/final/chromosomeMap.txt</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: genomeFeature -->
  <!-- NOTE: THIS CLASS IS NOT TO BE USED FOR THE PRIMARY ANNOTATION -->
  <datasetClass class="unofficialGeneFeatures_GFF2" category="" datasetFileHint="">
    <purpose>Gene features that are not provided by the annotation center</purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="mapFile"/>
    <prop name="gff2GroupTag"/>
    <prop name="genomeVersion"/>


    <graphTemplateFile name="unofficialGeneFeatures.xml"/>

    <resource resource="${organismAbbrev}_unofficialGeneFeature_${name}_GFF2_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}_GFF/${version}/final/features.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --seqExtDbName ${organismAbbrev}_primary_genome_RSRC --seqExtDbRlsVer ${genomeVersion} --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/features.gff --fileFormat gff2  --gff2GroupTag "${gff2GroupTag}" --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId} --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --bioperlTreeOutput @@dataDir@@/bioperlTree.out --notOfficialAnnotation</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="unofficialGeneFeatures_GFF3" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="mapFile"/>
    <prop name="genomeVersion"/>


    <graphTemplateFile name="unofficialGeneFeatures.xml"/>

    <resource resource="${organismAbbrev}_unofficialGeneFeature_${name}_GFF3_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}_GFF/${version}/final/features.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --seqExtDbName ${organismAbbrev}_primary_genome_RSRC --seqExtDbRlsVer ${genomeVersion} --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/features.gff --fileFormat gff3   --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId} --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --bioperlTreeOutput @@dataDir@@/bioperlTree.out --notOfficialAnnotation</pluginArgs>
    </resource>
  </datasetClass>


  <!-- Category: genomeFeature -->
  <!-- NOTE: THIS CLASS IS NOT TO BE USED FOR GENES -->
  <datasetClass class="genomeFeatures_GFF2" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="mapFile"/>
    <prop name="gff2GroupTag"/>
    <prop name="genomeVersion"/>


    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_genomeFeature_${name}_GFF2_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}_GFF/${version}/final/features.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --seqExtDbName ${organismAbbrev}_primary_genome_RSRC --seqExtDbRlsVer ${genomeVersion} --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/features.gff --fileFormat gff2  --gff2GroupTag "${gff2GroupTag}" --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId} --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: genomeFeature -->
  <datasetClass class="genomeFeatures_GFF3" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="mapFile"/>
    <prop name="genomeVersion"/>


    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_genomeFeature_${name}_GFF3_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}_GFF/${version}/final/features.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --seqExtDbName ${organismAbbrev}_primary_genome_RSRC --seqExtDbRlsVer ${genomeVersion} --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/features.gff --fileFormat gff3   --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId} --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="updateEviganSecondaryScore" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>

    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_updateEviganSecondaryScore_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="feature"
              subType="alternate_gene_model"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

     <unpack>updateEviganSecondaryScore.pl --evigan_ext_db_rls_spec "${organismAbbrev}_genomeFeature_${name}_GFF2_RSRC|${version}"</unpack>
     <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>


  <!-- Category: ESTs -->

  <!-- NOTE: this dataset class only gets the sequences, it does not map
       them to the genome.  See transcriptsFromReferenceStrain
       ONLY INCLUDE IF A REFERENCE STRAIN
  -->

  <datasetClass class="referenceStrain-dbEST" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="speciesNcbiTaxonId"/>

    <graphTemplateFile name="ESTs.xml"/>

    <resource resource="${organismAbbrev}_dbEST_RSRC" version="TODAY"
	      plugin="GUS::Supported::Plugin::dbEST"
              scope="species"
              type="EST"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>getSubTaxa --ncbiTaxId ${speciesNcbiTaxonId} --outputFile @@dataDir@@/taxonIdFile</unpack>

      <unpack>createPropFile --file @@dataDir@@/dbestProp --propList "dbestLogin:@@dbestLogin@@,dbestPswd:@@dbestPswd@@"</unpack>

      <pluginArgs>--span 500 --taxonFile @@dataDir@@/taxonIdFile --extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --soExtDbRlsName "SO_RSRC" --dbestLoginFile @@dataDir@@/dbestProp --dbestConnect "@@dbestConnect@@" --do_not_update</pluginArgs>
    </resource>
  </datasetClass>


  <!-- NOTE: this dataset class only gets the sequences, it does not map
       them to the genome.  See transcriptsFromReferenceStrain
       ONLY INCLUDE IF A REFERENCE STRAIN
  -->

  <datasetClass class="referenceStrain-ESTsFromFasta" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="name"/>
    <prop name="sourceIdRegex"/>
    <prop name="soTerm"/>
    <prop name="isPutativeFullLength"/> <!-- true or false -->
    <prop name="libraryVector"/>
    <prop name="libraryStage"/>
    <prop name="libraryName"/>
    <prop name="libraryDesc"/>
    <prop name="contactName"/>
    <prop name="contactAddress1"/>
    <prop name="contactAddress2"/>

    <graphTemplateFile name="ESTs.xml"/>

    <resource resource="${organismAbbrev}_EST_${name}_sequences_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadEstsFromFastaFile"
              scope="species"
              type="EST"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/EST/${name}/${version}/final/ests.fasta">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--sourceIdRegex "${sourceIdRegex}" --fastaFile @@dataDir@@/ests.fasta --externalDatabaseName %RESOURCE_NAME% --externalDatabaseVer %RESOURCE_VERSION%  --SOTermName '${soTerm}' --ncbiTaxId ${ncbiTaxonId} --libraryVector '${libraryVector}' --putativeFullLength ${isPutativeFullLength} --libraryStage '${libraryStage}' --libraryName '${libraryName}' --libraryDesc "${libraryDesc}"</pluginArgs>
    </resource>
  </datasetClass>


  <!-- This class gets its data from ESTs and transcripts loaded by the
       reference strain.  It finds all of them in the database and maps them to
       our genome.  The reference strain DOES need to include an instance
       of this class so that its transcripts get mapped to its genome  -->

  <datasetClass class="transcriptsFromReferenceStrain" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="referenceStrainOrganismAbbrev"/>

    <graphTemplateFile name="mapTranscriptsToGenome.xml"/>

  </datasetClass>


  <!-- Category: IEDB epitopes -->

  <!--  get the epitope sequences. 
        (this class does not map epitopes. see epitopesFromReferenceStrain)
        ONLY INCLUDE IF A REFERENCE STRAIN
 -->
  <datasetClass class="referenceStrain-epitope_sequences_IEDB" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev"/>
    <prop name="version"/>
    <prop name="speciesNcbiTaxonId"/>

    <graphTemplateFile name="epitopes.xml"/>

    <resource resource="${organismAbbrev}_epitope_IEDB_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="species"
              type="epitope"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <!-- validate that IEDB knows about this taxon id.  this unpack just greps IEDB's taxon list -->
      <unpack><![CDATA[unzip -p @@manualDeliveryDir@@/common/epitope/IEDB/${version}/fromProvider/OrganismList.zip | grep "<TaxId>${speciesNcbiTaxonId}<"]]></unpack>

      <unpack>iedbMakeTabFileFromXml --input_dir @@manualDeliveryDir@@/common/epitope/IEDB/%RESOURCE_VERSION%/final/iedb_export_fixed --outputfile @@dataDir@@/oneOrganism.txt --NCBITaxId ${speciesNcbiTaxonId} --organismListFile @@manualDeliveryDir@@/common/epitope/IEDB/%RESOURCE_VERSION%/fromProvider/OrganismList.xml</unpack>

      <unpack>mkdir -p @@dataDir@@/fasta</unpack>

      <!-- not clear why we need this step.  should modify iedbMakeTabFileFromXml
           to produce the simplified tab file, since oneOrganism.txt is never
           consumed besides right here -->
      <unpack>iedbSimplifyTabFile --inputFile @@dataDir@@/oneOrganism.txt --outputFile @@dataDir@@/oneOrganismSimplified.txt </unpack>

      <unpack>generateEpitopeFastaFile --inputFile @@dataDir@@/oneOrganismSimplified.txt --outputFile @@dataDir@@/fasta/IEDBExport.fsa </unpack>

      <getAndUnpackOutput file="@@dataDir@@/oneOrganismSimplified.txt"/>

      <!-- sourceId|name|ncbiTaxId|accession -->
      <pluginArgs><![CDATA[--seqFileDir @@dataDir@@/fasta --externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --soTermName "epitope" --regexNcbiTaxId  ">[^|]*\|[^|]*\|([^|]*)" --regexSourceId ">(\d+)|" --tableName "DoTS::MotifAASequence" --logFrequency 100 --regexDesc ">(.+)" ]]></pluginArgs>
    </resource>
  </datasetClass>


  <!-- This class gets its data from Epitopes loaded by the
       reference strain.  It finds all of them in the database and maps them to
       our genome.  The reference strain DOES need to include an instance
       of this class so that its transcripts get mapped to its genome  -->

  <datasetClass class="epitopesFromReferenceStrain" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="referenceStrainOrganismAbbrev"/>

    <graphTemplateFile name="mapEpitopes.xml"/>

  </datasetClass>


  <!-- Category: dbxrefs -->
  <datasetClass class="dbxref_simple" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="columnSpec"/>
    <prop name="target"/>  <!-- NASequence, AAFeature, NAFeature -->
    <prop name="url"/>  <!-- must use CDATA -->
    <prop name="urlUsesSecondaryId"/>  <!-- true or false -->
    <prop name="genomeVersion"/>

    <graphTemplateFile name="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_${name}_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              scope="organism"
              type="dbxref"
              externalDbIdUrlUseSecondaryId="${urlUsesSecondaryId}"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[${url}]]></externalDbIdUrl>
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dbxref/${name}/${version}/final/mapping.txt">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/mapping.txt --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "${columnSpec}" --tableName DbRef${target} --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="dbxref_unity" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="url"/>   <!-- must use CDATA -->
    <prop name="genomeVersion"/>

    <graphTemplateFile name="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_unity_${name}_RSRC"
	      version="TODAY"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              scope="organism"
              type="dbxref"
              externalDbIdUrlUseSecondaryId="false"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[${url}]]></externalDbIdUrl>
      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>makeSrcIdFile --organismAbbrev "${organismAbbrev}" --outputFile @@dataDir@@/mapping.txt</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/mapping.txt --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "primary_identifier" --tableName DbRefNAFeature --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="dbxref_gene2ApiLoc" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev"/>
    <prop name="projectName"/>
    <prop name="version"/>
    <prop name="ApiLocOrganism"/>   <!-- organism name as found on the ApiLoc site. -->


    <graphTemplateFile name="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_ApiLoc_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              scope="organism"
              type="dbxref"
              externalDbIdUrlUseSecondaryId="false"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[http://apiloc.bio21.unimelb.edu.au/apiloc/apiloc/gene/${ApiLocOrganism}/EXTERNAL_ID_HERE]]></externalDbIdUrl>
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dbxref/gene2ApiLoc/${version}/final/${organismAbbrev}.html">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>makeDbxRefsFromApiLocHtml @@dataDir@@/${organismAbbrev}.html "${ApiLocOrganism}" > @@dataDir@@/dbxrefs.txt</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/dbxrefs.txt --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "primary_identifier" --tableName "DbRefNAFeature"  --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="dbxref_gene2PubmedFromNcbi" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="genomeVersion"/>
    <prop name="version"/>

    <graphTemplateFile name="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_gene2PubmedFromNcbi_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              scope="organism"
              type="dbxref"
              externalDbIdUrlUseSecondaryId="false"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[http://www.ncbi.nlm.nih.gov/sites/entrez?cmd=PureSearch&db=pubmed&term=EXTERNAL_ID_HERE[UID]]]></externalDbIdUrl>

      <manualGet fileOrDir="common/dbxref/gene2PubmedFromNcbi/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>ncbiGenePubmed2DbRefsFile --gene2pubmedFile @@dataDir@@/final/gene2pubmed.gz --geneInfoFile @@dataDir@@/final/All_Protozoa.gene_info.gz --taxId ${ncbiTaxonId} > @@dataDir@@/gene2PubmedFromNcbi.tab</unpack>

      <unpack>rm -f @@dataDir@@/All_Protozoa.gene_info.gz</unpack>

      <unpack>rm -f @@dataDir@@/gene2pubmed.gz</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/gene2PubmedFromNcbi.tab --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "primary_identifier,secondary_identifier" --tableName "DbRefNAFeature"  --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}'  --organismAbbrev ${organismAbbrev}</pluginArgs>

    </resource>
  </datasetClass>


  <!-- depends on gene2Entrez -->
  <datasetClass class="dbxref_gene2Uniprot" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="genomeVersion"/>
    <prop name="version"/>

    <graphTemplateFile name="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_gene2Uniprot_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              externalDbIdType="alternate id"
              scope="organism"
              type="dbxref"
              externalDbIdUrlUseSecondaryId="false"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[http://www.uniprot.org/uniprot/EXTERNAL_ID_HERE]]></externalDbIdUrl>

      <manualGet fileOrDir="common/dbxref/gene2Uniprot/${version}/final/idmapping_selected.tab.gz">
        <dir name="final">
        </dir>
      </manualGet>

      <!-- need to use the gene2entrez file to get map of NCBI ids -->
      <unpack>uniprotIdMap2DbRefsFile @@dataDir@@/idmapping_selected.tab.gz @@dataDir@@/../${organismAbbrev}_dbxref_gene2Entrez_RSRC/gene2entrez.tab > @@dataDir@@/gene2uniprot.tab</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/gene2uniprot.tab --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "primary_identifier,secondary_identifier,remark" --tableName "DbRefNAFeature"  --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}'  --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: gene aliases -->

  <datasetClass class="aliases" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="version"/>
    <prop name="name"/>
    <prop name="columnSpec"/>
    <prop name="url"/>
    <prop name="urlUsesSecondaryId"/>  <!-- true or false -->
    <prop name="target"/>  <!-- NASequence, AAFeature, NAFeature -->
    <prop name="idType"/>  <!-- previous id, alternate id -->

    <graphTemplateFile name="aliases.xml"/>

    <resource resource="${organismAbbrev}_${name}_${target}_aliases_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              externalDbIdType="${idType}"
              externalDbIdIsAnAlias="true"
              scope="organism"
              type="alias"
              externalDbIdUrlUseSecondaryId="${urlUsesSecondaryId}"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[${url}]]></externalDbIdUrl>
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/alias/${name}/${version}/final/aliases.txt">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/aliases.txt --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "${columnSpec}" --tableName DbRef${target} --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>

  <!-- ONLY INCLUDE IF THIS ORGANISM'S GENOME IS IN GENBANK -->
  <datasetClass class="dbxref_gene2Entrez" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="genomeVersion"/>
    <prop name="version"/>

    <graphTemplateFile name="aliases.xml"/>

    <resource resource="${organismAbbrev}_dbxref_gene2Entrez_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
              externalDbIdType="alternate id"
              externalDbIdIsAnAlias="true"
              externalDbIdUrlUseSecondaryId="false"
              scope="organism"
              type="dbxref"
              organismAbbrev="${organismAbbrev}">

      <externalDbIdUrl><![CDATA[http://www.ncbi.nlm.nih.gov/sites/entrez?db=gene&cmd=search&term=EXTERNAL_ID_HERE]]></externalDbIdUrl>
      <manualGet fileOrDir="common/alias/gene2Entrez/${version}/final/gene_info.gz">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>ncbiGeneInfo2DbRefsFile @@dataDir@@/gene_info.gz ${ncbiTaxonId} > @@dataDir@@/gene2entrez.tab</unpack>

      <unpack>rm -f @@dataDir@@/gene_info.gz</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/gene2entrez.tab --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "primary_identifier,secondary_identifier,remark" --tableName "DbRefNAFeature"  --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --organismAbbrev ${organismAbbrev}</pluginArgs>

    </resource>
  </datasetClass>


  <!-- Category: SNPs -->

  <!-- FIX WORKFLOW: need to change getAndAnalyzeSnps to use SNPs.gff -->
  <datasetClass class="SNPs_GFF" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>

    <graphTemplateFile name="SNPs.xml"/>

    <resource resource="${organismAbbrev}_SNP_${name}_gff_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="SNP"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/SNP/${name}/${version}/final/SNPs.gff">
        <dir name="final">
        </dir>
      </manualGet>
      <getAndUnpackOutput file="@@dataDir@@/SNPs.gff"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="SNPs_HTS" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="snpStrainAbbrev"/>
    <prop name="hasPairedReads"/>
    <prop name="name"/>
    <prop name="version"/>

    <graphTemplateFile name="SNPs.xml"/>

    <resource resource="${organismAbbrev}_SNP_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="isolates"
              subType="HTS_SNP"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
      <unpack>ln -s @@manualDeliveryDir@@/${projectName}/${organismAbbrev}/SNP/${name}/%RESOURCE_VERSION%/final/ @@dataDir@@/final</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final" />
      <getAndUnpackOutput file="@@dataDir@@/final/reads.txt"/>
      <getAndUnpackOutput file="@@dataDir@@/final/readsPaired.txt"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: microarrayPlatform -->

  <datasetClass class="microarrayPlatform" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/> 
    <prop name="version"/>
    <prop name="isAffymetrixGeneArray"/>
    <prop name="isNimbleGenGeneArray"/>
    <prop name="vendorMappingFileName"/>
    <prop name="probeRows"/>
    <prop name="probeCols"/>
    <prop name="limitNU"/>
    <prop name="variableLengthReads"/>
    <prop name="numInsertions"/>

    <graphTemplateFile name="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_microarrayPlatform_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="array"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayPlatform/${name}/${version}/final">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>probeFasta2Tab @@dataDir@@/final/probes.fsa > @@dataDir@@/probes.tab</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>
      <getAndUnpackOutput file="@@dataDir@@/final/probes.fsa"/>
      <getAndUnpackOutput file="@@dataDir@@/probes.tab"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="microarrayPlatformWithProviderMapping" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/> 
    <prop name="version"/>
    <prop name="isAffymetrixGeneArray"/>
    <prop name="isNimbleGenGeneArray"/>
    <prop name="providedMappingFileName"/>

    <graphTemplateFile name="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_microarrayPlatform_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="array"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayPlatform/${name}/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="chipChipPlatform" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="limitNU"/>
    <prop name="numInsertions"/>
    <prop name="variableLengthReads"/>

    <graphTemplateFile name="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_chipChipPlatform_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="chip_chip"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayPlatform/${name}/${version}/final">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>probeFasta2Tab @@dataDir@@/final/probes.fsa > @@dataDir@@/probes.tab</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>
      <getAndUnpackOutput file="@@dataDir@@/final/probes.fsa"/>
      <getAndUnpackOutput file="@@dataDir@@/probes.tab"/>


      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>


  <!-- Category: microarrayExpression -->

  <!-- manual delivery and plugin or step class must be upgraded see redmine #4257 -->
  <datasetClass class="microarrayExpressionExperiment" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="experimentName"/>
    <prop name="experimentVersion"/>
    <prop name="microarrayPlatformName"/>
    <prop name="microarrayPlatformVersion"/>
    <prop name="doExpressionAnalysis"/>
    <prop name="hasTimeSeries"/>
    <prop name="usesAffymetrixGeneArray"/>
    <prop name="usesNimbleGenGeneArray"/>

    <graphTemplateFile name="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_microarrayExpression_${experimentName}_RSRC" version="${experimentVersion}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="array"
              organismAbbrev="${organismAbbrev}"
	      >
      
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayExpression/${experimentName}/${experimentVersion}/final">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>
      <getAndUnpackOutput file="@@dataDir@@/final/analysisConfig.xml"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>

    </resource>
  </datasetClass>

  <!-- Category: microarrayExpression -->

  <!-- manual delivery must include two files:   -->
  <!--   geneProbeMapping.txt (an empty file)  -->
  <!--   geneProbeMappingVendor (the cdf or ndf file)   -->
  <datasetClass class="microarrayExpressionExperimentWithProviderProbeMapping" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="experimentName"/>
    <prop name="experimentVersion"/>
    <prop name="doExpressionAnalysis"/>
    <prop name="hasTimeSeries"/>
    <prop name="usesAffymetrixGeneArray"/>
    <prop name="usesNimbleGenGeneArray"/>

    <graphTemplateFile name="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_microarrayExpression_${experimentName}_RSRC" version="${experimentVersion}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="array"
              organismAbbrev="${organismAbbrev}"
	      >
      
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayExpression/${experimentName}/${experimentVersion}/final">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>
      <getAndUnpackOutput file="@@dataDir@@/final/analysisConfig.xml"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>

    </resource>
  </datasetClass>


  <!-- Category: ChIP Chip-->

  <datasetClass class="chipChipExperiment" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="experimentName"/>
    <prop name="experimentVersion"/>
    <prop name="chipChipPlatformName"/>
    <prop name="chipChipPlatformVersion"/>
    <prop name="peakFinderArgs"/>
    <prop name="loadPeakCalls"/>

    <graphTemplateFile name="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_chipChipExper_${experimentName}_RSRC" version="${experimentVersion}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="chip_chip"
              organismAbbrev="${organismAbbrev}"
	      >

     <manualGet fileOrDir="${projectName}/${organismAbbrev}/chipChip/${experimentName}/${experimentVersion}/final">
        <dir name="final">
        </dir>
      </manualGet>

     <getAndUnpackOutput dir="@@dataDir@@/final" />

     <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>

    </resource>
  </datasetClass>


  <!-- the files containing the sample data are assumed to be normalized -->
  <datasetClass class="chipChipSample" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev"/>
    <prop name="experimentName"/>
    <prop name="sampleName"/>
    <prop name="LifeCycleStage"/>
    <prop name="Antibody"/>
    <prop name="Genotype"/>
    <prop name="Replicate"/>
    <prop name="Strain"/>
    <prop name="Treatment"/>
    <prop name="CellType"/>
 
    <graphTemplateFile name="chipChipSamples.xml"/>

      <!-- we load a fake resource here so we can make a getAndUnpackOutput -->
      <!-- to declare existence of sample file that is acquired by experiment, for test mode -->
    <resource resource="${organismAbbrev}_${experimentName}_${sampleName}_chipChipSample_RSRC" version="dontcare"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="chip_chip"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_chipChipExper_${experimentName}_RSRC/final/${sampleName}.txt" />

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>


  <!-- NOTE:  because the data files are so large, we don't copy into our
       workflow data dir, but use a symlink into manual deliv instead -->

  <!-- final/ dir must have a file per sample, with name identical to the 
       sample name.  if there are paired ends reads, each sample will also
       have a samplename.paired file -->
  <datasetClass class="rnaSeqExperiment" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="limitNU"/>
    <prop name="hasVariableLengthReads"/> 
    <prop name="numInsertions"/>
    <prop name="hasPairedEnds"/>
    <prop name="isStrandSpecific"/>

    <graphTemplateFile name="organismSpecificOnTopLevelGenome.xml"/>
   <!-- Inquiry: Always follow naming convention -->
    <resource resource="${organismAbbrev}_${name}_rnaSeq_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="rnaseq"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
      <unpack>ln -s @@manualDeliveryDir@@/${projectName}/${organismAbbrev}/rnaSeq/${name}/${version}/final/ @@dataDir@@/final</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final" />
      <getAndUnpackOutput file="@@dataDir@@/final/analysisConfig.xml"/>
      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>

  </datasetClass>




  <datasetClass class="rnaSeqSample" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev"/>
    <prop name="experimentName"/>
    <prop name="sampleName"/>
 
    <graphTemplateFile name="rnaSeqOrChipSeqSamples.xml"/>

      <!-- we load a fake resource here so we can make a getAndUnpackOutput -->
      <!-- to declare existence of sample file that is acquired by experiment, for test mode -->
    <resource resource="${organismAbbrev}_${experimentName}_${sampleName}_rnaSeqSample_RSRC" version="dontcare"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="rnaseq"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_${experimentName}_rnaSeq_RSRC/final/${sampleName}" />

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>


  </datasetClass>


  <datasetClass class="chipSeqExperiment" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="limitNU"/>
    <prop name="hasVariableLengthReads"/> 
    <prop name="numInsertions"/>
    <!-- is this specific to rnaseq? -->
    <prop name="hasPairedEnds"/>
    <!-- is this specific to rnaseq? -->
    <prop name="isStrandSpecific"/>

    <graphTemplateFile name="organismSpecificOnTopLevelGenome.xml"/>
   <!-- Inquiry: Always follow naming convention -->
    <resource resource="${organismAbbrev}_${name}_chipSeq_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="chipseq"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
      <unpack>ln -s @@manualDeliveryDir@@/${projectName}/${organismAbbrev}/chipSeq/${name}/${version}/final/ @@dataDir@@/final</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final" />
      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>




  <datasetClass class="chipSeqSample" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev"/>
    <prop name="experimentName"/>
    <prop name="sampleName"/>
 
    <graphTemplateFile name="rnaSeqOrChipSeqSamples.xml"/>

      <!-- we load a fake resource here so we can make a getAndUnpackOutput -->
      <!-- to declare existence of sample file that is acquired by experiment, for test mode -->
    <resource resource="${organismAbbrev}_${experimentName}_${sampleName}_chipSeqSample_RSRC" version="dontcare"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="transcript_expression"
              subType="chipseq"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_${experimentName}_chipSeq_RSRC/final/${sampleName}" />

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>


  </datasetClass>


  <!-- NOTE: this dataset class only gets the sequences, it does not map
       them to the genome.  For that use clonedInsertEndsFromReferenceStrain
       ONLY INCLUDE IF A REFERENCE STRAIN
  -->

  <datasetClass class="referenceStrain-clonedInsertEnds" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTermName"/>
    <prop name="sourceIdRegex"/>

    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_${name}_clonedInsertEnds_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="species"
              type="aligned_sequence"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dnaSeq/${name}/${version}/final/seqs.fasta">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/seqs.fasta --soTermName ${soTermName} --regexSourceId "${sourceIdRegex}" --tableName "DoTS::ExternalNASequence"</pluginArgs>
    </resource>
  </datasetClass>

  <!-- This class gets its data from cloned insert ends loaded by the
       reference strain.  It finds them in the database and maps them to
       our genome.  The reference strain DOES need to include an instance
       of this class for each dataset, so that it gets mapped  -->

  <datasetClass class="clonedInsertEndsFromReferenceStrain" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="referenceStrainOrganismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>

    <graphTemplateFile name="organismSpecific.xml"/>

  </datasetClass>


  <datasetClass class="transcript_sequences" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTermName"/>
    <prop name="sourceIdRegex"/>

    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_${name}_transcript_sequences_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="species"
              type="aligned_sequence"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dnaSeq/${name}/${version}/final/seqs.fasta">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/seqs.fasta --soTermName ${soTermName} --regexSourceId "${sourceIdRegex}" --tableName "DoTS::ExternalNASequence"</pluginArgs>
    </resource>
  </datasetClass>

  <!-- GOT TO HERE -->


  <!-- Category: SAGE tags -->


  <datasetClass class="sageTagSequences" category="" datasetFileHint="">
     <purpose></purpose>
     <prop name="projectName"/>
     <prop name="organismAbbrev"/>
     <prop name="name"/>
     <prop name="version"/>
     <prop name="contactName"/>
     <prop name="sequencePrefix"/>
     <prop name="bowtieParams"/>

     <graphTemplateFile name="organismSpecific.xml"/>
    
     <resource resource="${organismAbbrev}_sageTag_${name}_RSRC" version="${version}"
               plugin="GUS::Supported::Plugin::LoadArrayDesign"
               scope="organism"
              type="transcript_expression"
              subType="sage_tag"
               organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/sageTag/${name}/${version}/final/primers.txt">
         <dir name="final">
         </dir>
       </manualGet> 

       <unpack>echo -e "ArrayDesign.name\t${organismAbbrev}_sageTag_${name}_RSRC\nArrayDesign.version\t${version}\nCompositeElementImp.subclass_view\tSAGETag\nCompositeElementImp.tag\ttag" > @@dataDir@@/sageArray.config</unpack> 
        
       <unpack>preLoadArrayDesign --category TechnologyType --value 'user_defined' --manufacturer ${contactName}</unpack> 
       <unpack>awk -F:::: 'x++; x==1{print "tag\n" $1}' @@dataDir@@/primers.txt > @@dataDir@@/distinct_sage_tags_with_header.txt</unpack> 
       <pluginArgs>-cfg_file @@dataDir@@/sageArray.config --data_file @@dataDir@@/distinct_sage_tags_with_header.txt --manufacturer ${contactName} --technology_type 'user_defined'</pluginArgs> 
      </resource>
    </datasetClass> 


  <datasetClass class="sageTagFrequencies" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="normalizeFrequencies"/>
    <prop name="contactName"/>

    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_sageTag_${name}_frequencies_RSRC" version="${version}"
	      plugin="GUS::Community::Plugin::LoadSageResults"
              scope="organism"
	      parentResource="${organismAbbrev}_sageTag_${name}_RSRC"
              type="transcript_expression"
              subType="sage_tag"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/sageTag/${name}/${version}/final/freqs.txt">
        <dir name="final">
        </dir>
      </manualGet>

    <pluginArgs>--contact '${contactName}' --arrayDesignName ${organismAbbrev}_sageTag_${name}_RSRC --arrayDesignVersion ${version} --studyName ${name} --studyDescription '' --freqFile @@dataDir@@/freqs.txt</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: product names -->

  <datasetClass class="productNames" category="" datasetFileHint="">
    <purpose>Note: this should include product names for organelles as well</purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
 
    <graphTemplateFile name="productNames.xml"/>

    <resource resource="${organismAbbrev}_function_${name}_product_names_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertGeneFeatProductFromTabFile"
              scope="organism"
              type="gene_annotation"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/function/${name}_product_names/${version}/final/products.txt">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--file @@dataDir@@/products.txt  --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="GeneOntologyAssociations" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="version"/>
    <prop name="name"/>

    <graphTemplateFile name="organismSpecific.xml"/>

    <resource plugin="ApiCommonData::Load::Plugin::InsertGOAssociationsSimple"
              resource="${organismAbbrev}_${name}_GOAssociations_RSRC"
              version="${version}"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/function/${name}_GOAssociations/${version}/final/associations.gas">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%" --inputFile @@dataDir@@/associations.gas --goExtDbRlsName "GO_RSRC" --seqIdSql "SELECT g.source_id, taf.aa_sequence_id FROM dots.genefeature g, dots.transcript t, dots.translatedAAFeature taf WHERE g.na_feature_id = t.parent_id AND t.na_feature_id = taf.na_feature_id UNION SELECT taf.source_id, taf.aa_sequence_id FROM dots.translatedAAFeature taf" --targetTable "DoTS::TranslatedAASequence" --lineOfEvidence "${name}" --inputIdColumn id --tolerateMissingSeqs --skipBadGOTerms @@dataDir@@/badGOTerms.log</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="EnzymeCommissionAssociations" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="version"/>
    <prop name="name"/>

    <graphTemplateFile name="organismSpecific.xml"/>

    <resource plugin="GUS::Community::Plugin::InsertECMapping"
              resource="${organismAbbrev}_${name}_ECAssociations_RSRC"
              version="${version}"
              scope="organism"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/function/${name}_ECAssociations/${version}/final/ec.txt">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--ECMappingFile @@dataDir@@/ec.txt --evidenceCode "${name}" --aaSeqLocusTagMappingSql "SELECT aa_sequence_id FROM dots.Transcript t, dots.TranslatedAAFeature taf WHERE t.parent_id =? AND t.na_feature_id = taf.na_feature_id"</pluginArgs>
    </resource>

  </datasetClass>

  <datasetClass class="ECAssocFromUniprot" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev"/>
    <prop name="version"/>
    <prop name="speciesNcbiTaxonId"/>

    <graphTemplateFile name="organismSpecific.xml"/>

    <resource plugin="GUS::Community::Plugin::InsertECMapping"
              resource="${organismAbbrev}_Uniprot_ECAssociations_RSRC"
              version="${version}"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
  
     <wgetArgs url="www.uniprot.org/uniprot/?query=taxonomy%3a${speciesNcbiTaxonId}+AND+keyword%3a181&amp;amp;force=yes&amp;amp;format=tab&amp;amp;columns=id,genes,organism,ec"> --output-document=@@dataDir@@/ecAssocFromUniprot.tab --content-disposition </wgetArgs>
     
     <unpack>printOrgSpecificGeneToEC --infile @@dataDir@@/ecAssocFromUniprot.tab --outfile @@dataDir@@/${organismAbbrev}LocTagToEC.tab --orgAbbrev ${organismAbbrev}</unpack>     

      <pluginArgs>--ECMappingFile @@dataDir@@/${organismAbbrev}LocusTagToEC.tab --evidenceCode "Uniprot" --aaSeqLocusTagMappingSql "SELECT aa_sequence_id FROM dots.Transcript t, dots.TranslatedAAFeature taf WHERE t.parent_id =? AND t.na_feature_id = taf.na_feature_id"</pluginArgs>
    </resource>

  </datasetClass>
  

  <!-- Category: comments -->

  <datasetClass class="comments" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
 
    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_${name}_comments_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertNaFeatCommentFromTabFile"
              scope="organism"
              type="gene_annotation"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/comment/${name}/${version}/final/comments.txt">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--file @@dataDir@@/comments.txt  --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: isolates -->

  <!-- NOTE: this dataset class only gets the isolates, it does not map
       them to the genome.  See isolatesFromFamilyRepresentative
       ONLY INCLUDE IF A REFERENCE STRAIN
  -->

  <datasetClass class="familyRepresentative-isolatesGenbank" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
 
    <graphTemplateFile name="isolatesFromNonHtsSequencing.xml"/>

    <resource resource="${organismAbbrev}_isolates_genbank_RSRC" version="TODAY"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="species"
              organismAbbrev="${organismAbbrev}"
              type="isolates"
              subType="sequencing_typed"
	      >

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <!-- get the file from genbank, using organismAbbrev to find familyNcbiTaxonIds in Organism table -->
      <unpack>getIsolatesFromGenbank @@dataDir@@/isolates.gb "${organismAbbrev}"</unpack>

      <unpack>fixIsolateSequences --seq_file @@dataDir@@/isolates.gb --fixed_seq_file @@dataDir@@/isolates_fixed_1.gb --removed_seq_file @@dataDir@@/isolates_excluded.gb</unpack>

      <unpack>sed "s/SOURCE\tplastid/SOURCE\t/" @@dataDir@@/isolates_fixed_1.gb | sed "s/SOURCE\tapicoplast/SOURCE\t/" | sed "s/SOURCE\tmitochondrion/SOURCE\t/" > @@dataDir@@/isolates_fixed_2.gb</unpack>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/isolatesGenbank2gus.xml --inputFileOrDir @@dataDir@@/isolates_fixed_2.gb --fileFormat genbank --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId}  --seqSoTerm "region" --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </resource>
  </datasetClass>



  <!-- NOTE: update isolates loaded from Genbank files with additional information provided by provider -->

  <datasetClass class="updateIsolatesInfo" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>

    <graphTemplateFile name="isolatesFromNonHtsSequencing.xml"/>

    <resource resource="${organismAbbrev}_updateIsolatesInfo_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::UpdateIsolates"
              scope="species"
              type="isolates"
              subType="sequencing_typed"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/${name}/${version}/final/updates.txt">
        <dir name="final">
        </dir>
      </manualGet>

     <pluginArgs>--extDbRlsSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%" --inputFile @@dataDir@@/updates.txt </pluginArgs>
    </resource>
  </datasetClass>


  <!-- NOTE: this dataset class only gets the isolates, it does not map
       them to the genome.  See isolatesFromFamilyRepresentative
       ONLY INCLUDE IF A FAMILY REPRESENTATIVE

  -->

  <datasetClass class="familyRepresentative-isolateSequencesFasta" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="sourceIdRegex"/>

    <graphTemplateFile name="isolatesFromNonHtsSequencing.xml"/>

    <resource resource="${organismAbbrev}_isolates_${name}_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="species"
              type="isolates"
              subType="sequencing_typed"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/${name}/${version}/final/isolates.fasta">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/seqs.fasta --soTermName region --regexSourceId "${sourceIdRegex}" --tableName "DoTS::ExternalNASequence"</pluginArgs>
    </resource>
  </datasetClass>


  <!-- the ncbi taxon ID is not important.  isolate strain info is provided by dedicated isolate info tables -->
  <datasetClass class="familyRepresentative-isolateFeaturesGFF2" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="mapFile"/>
 
    <graphTemplateFile name="isolatesFromNonHtsSequencing.xml"/>

    <resource resource="${organismAbbrev}_isolates_${name}_features_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
              scope="species"
	      parentResource="${organismAbbrev}_isolates_${name}_RSRC"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/${name}/${version}/final/isolates.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs> --extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/isolates.gff --fileFormat gff2 --gff2GroupTag locus_tag --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --soExtDbRlsName "SO_RSRC" --defaultOrganism ${ncbiTaxonId} --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </resource>
  </datasetClass>

  <!-- NOTE: this dataset does not get the isolates, but it does map
       them to the genome.  It extracts the sequences from the database
  -->

  <datasetClass class="isolatesFromFamilyRepresentative" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="familyRepOrganismAbbrev"/>
    <prop name="name"/>
 
    <graphTemplateFile name="organismSpecific.xml"/>
  </datasetClass>



  <!-- NOTE: this class is specific to Crypto and is used to assign "is_reference" status to some isolates  -->

  <datasetClass class="isolatesUpdateIsReference" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>

    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_isolateIsReference_RSRC"
              version="${version}"
             plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="species"
              type="isolates"
              subType="sequencing_typed"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/${name}/${version}/final/reference_isolates.txt">
        <dir name="final">
        </dir>
      </manualGet>

     <unpack>addIsReferenceToIsolateSource.pl --file @@dataDir@@/reference_isolates.txt --gus_Config @@gusHome@@/config/gus.config  --extDbName ${organismAbbrev}_isolates_genbank_RSRC --extDbVer 'TODAY'</unpack>
     <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="massSpecPreprocessed" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="genomeVersion"/>
    <prop name="fileNameRegex"/>

    <graphTemplateFile name="massSpec.xml"/>

    <resource resource="${organismAbbrev}_massSpec_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertMassSpecFeaturesAndSummaries"
              scope="organism"
              type="protein_expression"
              organismAbbrev="${organismAbbrev}"
	      >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/massSpec/${name}/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--inputDir @@dataDir@@/final --externalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%" --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --organismAbbrev ${organismAbbrev} --fileNameRegex '${fileNameRegex}'</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="orthomclPhyletic" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="version"/>

    <graphTemplateFile name="comparativeGenomics.xml"/>

    <resource resource="OrthoMCL_Phyletic_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertPhylogeneticProfile"
              scope="global"
              type="orthology"
              >

      <manualGet fileOrDir="common/orthology/orthoMCL/${version}/orthomclGroups.txt">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--projectName ${projectName} --groupsFile @@dataDir@@/orthomclGroups.txt</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="orthomcl" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="version"/>

    <graphTemplateFile name="comparativeGenomics.xml"/>

    <resource resource="OrthoMCL_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertOrthologousGroups"
              scope="global"
              type="orthology"
              >

      <manualGet fileOrDir="common/orthology/orthoMCL/${version}/orthomclGroups.txt">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--projectName ${projectName} --OrthologFile @@dataDir@@/orthomclGroups.txt --AnalysisName 'OrthoMCL-based Orthology Predictions' --AnalysisDescription 'OrthoMCL-based Orthology Predictions' --ElementResultTable "DoTS::GeneFeature"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="orthomclTree" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="version"/>

    <graphTemplateFile name="comparativeGenomics.xml"/>

    <resource resource="OrthoMCLTree_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertOrthomclTaxon"
              scope="global"
              type="orthology"
              >

      <!-- use non-standard approach here to get two individual files rather
           than the whole dir, which has some very large files we don't need -->
      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
      <unpack>cp @@manualDeliveryDir@@/common/orthology/orthoMCL/%RESOURCE_VERSION%/orthomclClades.txt @@dataDir@@</unpack>
      <unpack>cp @@manualDeliveryDir@@/common/orthology/orthoMCL/%RESOURCE_VERSION%/orthomclTaxons.txt @@dataDir@@</unpack>

      <pluginArgs>--cladeFile @@dataDir@@/orthomclClades.txt --speciesFile @@dataDir@@/orthomclTaxons.txt</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="geneOntology" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>
    <resource resource="GO_RSRC" version="${version}"
      plugin="GUS::Supported::Plugin::InsertGeneOntology"
              scope="global"
              type="function"
              >
    <manualGet fileOrDir="common/ontology/geneOntology/${version}/final/gene_ontology.obo">
        <dir name="final">
        </dir>
    </manualGet>
    <pluginArgs>--oboFile @@dataDir@@/gene_ontology.obo --extDbRlsName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --calcTransitiveClosure</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="enzymeDB" category="" datasetFileHint="">
    <purpose></purpose>
    <resource resource="enzymeDB_RSRC" version="TODAY"
      plugin="GUS::Community::Plugin::LoadEnzymeDatabase"
              scope="global"
              type="function"
              >
    <wgetArgs url="ftp://ftp.expasy.org/databases/enzyme/">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=3 --include list  --accept=enzclass.txt,enzyme.dat</wgetArgs>
    <pluginArgs>--InPath @@dataDir@@ --enzymeDbName %RESOURCE_NAME% --enzymeDbRlsVer %RESOURCE_VERSION%</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="PDBProteinSequences" category="" datasetFileHint="">
    <purpose></purpose>
    <resource resource="PDBProteinSequences_RSRC" version="TODAY"
      plugin="GUS::Supported::Plugin::LoadFastaSequences"
              scope="global"
              type="external_sequences"
              >
    <wgetArgs url="ftp://ftp.wwpdb.org/pub/pdb/derived_data/pdb_seqres.txt.gz">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=3 --output-document=@@dataDir@@/pdb_seqres.txt.gz</wgetArgs>
    <unpack>gunzip @@dataDir@@/pdb_seqres.txt.gz</unpack>
    <unpack>filterPdbFile --inputFile @@dataDir@@/pdb_seqres.txt --outputFile  @@dataDir@@/pdb.fsa.tmp</unpack>
    <unpack><![CDATA[cat @@dataDir@@/pdb.fsa.tmp | perl -e 'while(<>) { s/J|O/X/g;print}' > @@dataDir@@/pdb.fsa]]></unpack>
    <unpack>rm @@dataDir@@/pdb.fsa.tmp</unpack>
    <unpack>xdformat -p @@dataDir@@/pdb.fsa</unpack>
    <getAndUnpackOutput file="@@dataDir@@/pdb.fsa"/>   
    <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --sequenceFile  @@dataDir@@/pdb.fsa --SOTermName 'polypeptide'  --noSequence --regexSourceId  '>(\w+)\s+mol:protein' --regexDesc 'length:\d+\s+(.+)$' --tableName "DoTS::ExternalAASequence"</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="taxonomy" category="" datasetFileHint="">
    <purpose></purpose>
  <resource resource="taxonomy_RSRC" version="TODAY"
      plugin="GUS::Supported::Plugin::LoadTaxon"
              scope="global"
              type="sres"
              >
    <wgetArgs url="ftp://ftp.ncbi.nih.gov/pub/taxonomy/">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=2 --include list --accept=gi_taxid_prot.dmp.gz,taxdump.tar.gz</wgetArgs>
    <unpack>gunzip @@dataDir@@/gi_taxid_prot.dmp.gz</unpack>
    <unpack>$currDir=`pwd`; cd @@dataDir@@ ; tar -xzf taxdump.tar.gz ; rm -f taxdump.tar ; cd $currDir</unpack>
    <pluginArgs>--names @@dataDir@@/names.dmp --nodes @@dataDir@@/nodes.dmp --gencode @@dataDir@@/gencode.dmp --merged @@dataDir@@/merged.dmp --verbose</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="updatePDBTaxon" category="" datasetFileHint="">
    <purpose></purpose>
  <resource resource="updatePDBTaxon_RSRC" version="TODAY"
      plugin="ApiCommonData::Load::Plugin::UpdateTaxonFieldFromFile"
              scope="global"
              type="external_sequences"
              >
    <wgetArgs url="ftp://ftp.wwpdb.org/pub/pdb/derived_data/index/source.idx">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=4 --output-document=@@dataDir@@/source.idx</wgetArgs>
    <unpack>processSourceIdxFile --inFile @@dataDir@@/source.idx --outFile @@dataDir@@/source.idx.processed</unpack>
    <pluginArgs>--fileName @@dataDir@@/source.idx.processed --sourceIdRegex  '^(\w+)' --taxonNameRegex '^\w+\s+(.+)' --sourceIdSubstringLength 4  --extDbRlsName 'PDBProteinSequences_RSRC'  --tableName 'DoTS::ExternalAASequence'</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="sequenceOntology" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>
  <resource resource="SO_RSRC" version="${version}"
              plugin="GUS::Supported::Plugin::InsertSequenceOntologyOBO"
              scope="global"
              type="sres"
              >
    <manualGet fileOrDir="common/ontology/sequenceOntology/${version}/final/so.obo">
        <dir name="final">
        </dir>
    </manualGet>
    <pluginArgs>--inputFile @@dataDir@@/so.obo --soExtDbRlsName "SO_RSRC"</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="mgedOntologyTermTypes" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>   
  <resource resource="Mged_Ontology_Term_Types_RSRC" version="${version}"
              plugin="GUS::Supported::Plugin::InsertOntologyTermType"
              scope="global"
              type="sres"
              >
    <manualGet fileOrDir="common/ontology/Mged/${version}/final/MgedOntologyTermTypes.tab">
        <dir name="final">
        </dir>
      </manualGet>
    <pluginArgs>--inputFile @@dataDir@@/MgedOntologyTermTypes.tab</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="mgedOntologyRelationshipTypes" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>   
  <resource resource="Mged_Ontology_Relationship_Types_RSRC" version="${version}"
              plugin="GUS::Supported::Plugin::InsertOntologyRelationshipType"
              scope="global"
              type="sres"
              >
    <manualGet fileOrDir="common/ontology/Mged/${version}/final/MgedOntologyRelationshipTypes.tab">
        <dir name="final">
        </dir>
      </manualGet>
    <pluginArgs>--inputFile @@dataDir@@/MgedOntologyRelationshipTypes.tab</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="mgedOntology" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>   
  <resource resource="MGED_Ontology_RSRC" version="${version}"
              plugin="GUS::Supported::Plugin::InsertOntologyTermsAndRelationships"
              scope="global"
              type="sres"
              >
    <wgetArgs url="http://mged.sourceforge.net/ontologies/MGEDOntology.owl">--tries=5 --no-directories --no-host-directories --accept=@@dataDir@@/MGEDOntology.owl </wgetArgs>
    <pluginArgs>--inFile @@dataDir@@/MGEDOntology.owl --extDbName %RESOURCE_NAME% --extDbVersion %RESOURCE_VERSION% --uri 'http://mged.sourceforge.net/ontologies/MGEDontology.php' --parserType MgedRdfRow</pluginArgs>
  </resource>
  </datasetClass>

  <!-- this should probably be just a step in the flow, not a dataset class -->
  <datasetClass class="mgedOntologyEntry" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>
  <resource resource="Mged_Ontology_Entry_RSRC" version="${version}"
              plugin="GUS::Community::Plugin::LoadOntologyEntryFromMO"
              scope="global"
              type="sres"
              >
    <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>
    <pluginArgs>--externalDatabase MGED_Ontology_RSRC --externalDatabaseRls %RESOURCE_VERSION%</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="geneOntologyEvidenceCodes" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>
  <resource resource="GO_evidence_codes_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertGOEvidenceCodesFromObo"
              scope="global"
              type="sres"
              >
    <manualGet fileOrDir="common/ontology/goEvidenceCodes/${version}/final/evidence_code.obo">
        <dir name="final">
        </dir>
    </manualGet>
    <pluginArgs>--oboFile @@dataDir@@/evidence_code.obo</pluginArgs>
  </resource>
  </datasetClass>

  <!-- the interpro data must be installed manually on the cluster -->
  <datasetClass class="interproscanData" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>
  <resource resource="InterproscanData_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertInterproDomainDbs"
              scope="global"
              type="external_sequences"
              >

    <manualGet fileOrDir="common/domain/iprscanData/${version}/iprscan">
        <dir name="final">
        </dir>
      </manualGet>

    <unpack>fixSuperfamily @@dataDir@@/iprscan/data/</unpack>
    <pluginArgs>--inPath @@dataDir@@/iprscan/data/</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="NRDB" category="" datasetFileHint="">
    <purpose></purpose>
  <resource resource="NRDB_RSRC" version="TODAY"
      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="global"
              type="external_sequences"
              >
    <wgetArgs url="ftp://ftp.ncbi.nih.gov/blast/db/FASTA/">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=3 --accept=nr.gz </wgetArgs>
    <unpack>gunzip @@dataDir@@/nr.gz </unpack>
    <unpack>shortenDefLine --inputFile @@dataDir@@/nr --outputFile @@dataDir@@/nrdb-short-defline.fsa.tmp</unpack>
    <unpack><![CDATA[cat @@dataDir@@/nrdb-short-defline.fsa.tmp | perl -e 'while(<>) { s/J|O/X/g;print}' > @@dataDir@@/nrdb-short-defline.fsa]]></unpack>
    <unpack>rm @@dataDir@@/nrdb-short-defline.fsa.tmp</unpack>
    <unpack><![CDATA[cat @@dataDir@@/nrdb-short-defline.fsa | perl -e '$flag=0; while(<>){if ($_ =~ />/){if ($_ =~ /sp\|/){$flag=1;}else{$flag=0;}} if ($flag == 1){ print;}}'> @@dataDir@@/nrdb-short-defline-sp.fsa]]></unpack>
    <getAndUnpackOutput file="@@dataDir@@/nrdb-short-defline-sp.fsa"/>
    <getAndUnpackOutput file="@@dataDir@@/nrdb-short-defline.fsa"/>
    <getAndUnpackOutput file="@@dataDir@@/nr"/>
    <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="blatAlignmentQuality" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>
  <resource resource="blatAlignmentQuality_RSRC" version="${version}"
              plugin="GUS::Supported::Plugin::LoadGusXml"
              scope="global"
              type="sres"
              >
    <manualGet fileOrDir="common/ontology/alignmentQuality/${version}/final/blatalignmentquality.xml">
        <dir name="final">
        </dir>
      </manualGet>
    <pluginArgs>--filename @@dataDir@@/blatalignmentquality.xml</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="isolateVocabulary" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>

    <graphTemplateFile name="isolatesVocabulary.xml"/>

    <resource resource="isolateVocabulary_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertIsolateVocabulary"
              scope="global"
              type="sres"
              >
      <manualGet fileOrDir="common/ontology/isolateVocabulary/${version}/final/isolateVocabulary.txt">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--isolateVocabularyFile @@dataDir@@/isolateVocabulary.txt</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="isolateGeographicLocationVocabulary" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>

    <graphTemplateFile name="isolatesVocabulary.xml"/>

    <resource resource="geographicLocations_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertContinents"
              scope="global"
              type="sres"
              >
      <manualGet fileOrDir="common/ontology/geographicLocations/${version}/final/geographicLocations.txt">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--continentsFile @@dataDir@@/geographicLocations.txt</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="isolateGeographicLocationGPS" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>

    <graphTemplateFile name="isolatesVocabulary.xml"/>

    <resource resource="geographicLocationGPS_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertIsolateGPS"
              scope="global"
              type="sres"
              >
      <manualGet fileOrDir="common/ontology/geographicLocations/${version}/final/countryGPS.txt">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--isolateGPSFile @@dataDir@@/countryGPS.txt</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="isolateQualifierToVocabMapping" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>

    <graphTemplateFile name="isolatesVocabulary.xml"/>

    <resource plugin="ApiCommonData::Load::Plugin::InsertIsolateVocabMapping"
              resource="isolateVocabularyMap_RSRC"
              version="${version}"
              scope="global"
              >
      <manualGet fileOrDir="common/ontology/isolateVocabulary/${version}/final/qualifierToVocabMapping/">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--geographicXmlFile @@dataDir@@/qualifierToVocabMapping/geographicLocation.xml  --sourceXmlFile @@dataDir@@/qualifierToVocabMapping/isolationSource.xml --hostXmlFile @@dataDir@@/qualifierToVocabMapping/specificHost.xml</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="bibRefType" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="version"/>


    <resource resource="BibRefType_RSRC" version="${version}"
              plugin="GUS::Supported::Plugin::LoadGusXml"
              scope="global"
              type="sres"
              >
      <manualGet fileOrDir="common/ontology/bibliographicReferenceType/${version}/final/ncbiPublicationTypes.xml">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--filename @@dataDir@@/ncbiPublicationTypes.xml</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="yeastTwoHybrid" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>

    <graphTemplateFile name="organismSpecific.xml"/>
    
    <resource resource="${organismAbbrev}_interaction_${name}_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertYeastTwoHybrid"
              type="interaction"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/interaction/${name}/${version}/final/interaction_dataset.txt" >
	<dir name="final">
	</dir>
      </manualGet>
      <pluginArgs>--interactionFile @@dataDir@@/interaction_dataset.txt</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="antiCodon" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="version"/>
    <prop name="genomeVersion"/>
    <graphTemplateFile name="organismSpecific.xml"/>
    
    <resource resource="${organismAbbrev}_mRNA_anticodon_RSRC"  version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertAntiCodon"
       	      scope="organism"
              type="sres"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/mRNA/anticodon/${version}/final/antiCodons.txt" >
     	<dir name="final">
	</dir>
     </manualGet>
     <pluginArgs>--data_file @@dataDir@@/antiCodons.txt --genomeDbName '${organismAbbrev}_primary_genome_RSRC' --genomeDbVer '${genomeVersion}' </pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="relatedNaFeature" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <graphTemplateFile name="organismSpecific.xml"/>
   
    <resource resource="${organismAbbrev}_interaction_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertRelatedNaFeature"
	      scope="organism"
              type="feature"
	      organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/interaction/${name}/${version}/final/above-2-links">
	<dir name="final">
	</dir>
      </manualGet>
      <pluginArgs>--interactionFile @@dataDir@@/above-2-links --extDbName %RESOURCE_NAME% --extDbVersion %RESOURCE_VERSION% --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="phenotypeFeatures" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <graphTemplateFile name="organismSpecific.xml"/>
   
    <resource resource="${organismAbbrev}_phenotype_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertPhenotypeFeatures"
	      scope="organism"
              type="phenotype"
	      organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/phenotype/${name}/${version}/final/phenotype_features.xml">
	<dir name="final">
	</dir>
      </manualGet>
      <pluginArgs>--inputFile @@dataDir@@/phenotype_features.xml --extDbName %RESOURCE_NAME% --extDbVer %RESOURCE_VERSION% --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="isolateSNPsFromChip" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="isolateType"/>
    <graphTemplateFile name="organismSpecific.xml"/>
    
    <resource resource="${organismAbbrev}_SNP_${name}_RSRC" version="${version}"
        plugin="ApiCommonData::Load::Plugin::InsertIsolateBarcodeChip"
        scope="organism"
        type="isolates"
        subType="${isolateType}"
        allowedSubTypes="barcode,hd_array,3k_chip"
        organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/SNP/${name}/${version}/final/isolateSNPs.txt">
      <dir name="final">
      </dir>
      </manualGet>
      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --inputFile @@dataDir@@/isolateSNPs.txt --SOTermName 'SNP'</pluginArgs>
    </resource>
  </datasetClass> 


  <datasetClass class="predictedAAFeature" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="category"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="genomeVersion"/>
    <graphTemplateFile name="organismSpecific.xml"/>
   
    <resource resource="${organismAbbrev}_${category}_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertPredictedAAFeature"
              type="aa_feature"
	      scope="organism"
	      organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/${category}/${name}/${version}/final/apFile.txt">
	<dir name="final">
	</dir>
      </manualGet>
      <pluginArgs>--inputFile @@dataDir@@/apFile.txt --extDbRelSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%" --seqExtDbRelSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --category "secretome" --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="singleMotifMultMappings" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="category"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="motif"/>
    <prop name="motifName"/>
    <graphTemplateFile name="organismSpecific.xml"/>
   
    <resource resource="${organismAbbrev}_${category}_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertSingleMotifMultMappings"
              type="aa_feature"
	      scope="organism"
	      organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/${category}/${name}/${version}/final/singleMotifMultMappings.txt">
	<dir name="final">
	</dir>
      </manualGet>
      <pluginArgs>--inputFile @@dataDir@@/singleMotifMultMappings.txt --motif "${motif}" --motifName "${motifName}" --description "motif" --category "secretome" --extDbRelSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%" --seqExtDbRelSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="geneFeatureLODScores" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_eQTL_${name}_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertGeneFeatureLODScores"
              type="genetic_mapping"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/eQTL/${name}/${version}/final/All_LODscores.txt">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--file @@dataDir@@/All_LODscores.txt   --extDbName  "%RESOURCE_NAME%" --extDbVer "%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>



  <datasetClass class="SnpGffFeatures" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_${name}_SNP_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertGFF3"
              type="feature"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/SNP/${name}/${version}/final/${organismAbbrev}_${name}_SNP.gff">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--file @@dataDir@@/${organismAbbrev}_${name}_SNP.gff  --gff3DbName  "%RESOURCE_NAME%" --gff3DbVer "%RESOURCE_VERSION%"  --gffFormat 2</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="massSpecExpressionProfiles" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <graphTemplateFile name="massSpec.xml"/>
   
    <resource resource="${organismAbbrev}_massSpec_${name}_RSRC" version="${version}"
              plugin="ApiCommonData::Load::Plugin::InsertExpressionProfiles"
              type="protein_expression"
              scope="organism"
              organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/massSpec/${name}/${version}/final/">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--inputDir @@dataDir@@/final --configFile @@dataDir@@/final/mass_spec_profiles.config --tolerateMissingIds --externalDatabase "%RESOURCE_NAME%" --externalDatabaseRls "%RESOURCE_VERSION%" --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="phylogeneticProfiles" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="version"/>
    <prop name="threshold"/>
    <graphTemplateFile name="organismSpecific.xml"/>
    <resource resource="${organismAbbrev}_phylogeny_phylogeneticProfiles_RSRC" version="{$version}"
            plugin="GUS::Community::Plugin::InsertPhylogeneticProfiles"
            type="orthology"
            scope="organism"
            organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/phylogeny/PhylogeneticProfiles/${version}/final">
        <dir name="final">
        </dir>
      </manualGet>
      <pluginArgs>--ProfileSetDescription 'the phylogenetic profiles for ${organismAbbrev}' --headerFile @@dataDir@@/final/taxonNameHeaders --profilesDataFile @@dataDir@@/final/phylogenetic-profiles-any-and-target-organism.gz --mutualInformationDataFile @@dataDir@@/final/phylogenetic-profiles-any-and-target-organism.muinfo.gz --tolerateMissingIds 1 --dontLoadScores --threshold "${threshold}" --organismAbbrev ${organismAbbrev}</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="UpdateRodentPlasmodiumChromosomes" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="organismFullName"/>
    <prop name="rodentOrganisms"/>

    <graphTemplateFile name="organismSpecific.xml"/>
    
    <resource resource="${organismAbbrev}_UpdateRodentPlasmoChr_${name}_RSRC" version="${version}"
        plugin="ApiCommonData::Load::Plugin::UpdateRodentPlasmodiumChromosomes"
        type="genome"
        scope="organism"
        organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/comparativeGenomics/${name}/${version}/final/RMP_Pf_fromKooij.txt">
      <dir name="final">
      </dir>
      </manualGet>
      <pluginArgs>--mappingFile @@dataDir@@/RMP_Pf_fromKooij.txt --falciparum_organism "${organismFullName}" --rodent_organisms "${rodentOrganisms}" --addChrColorTable 1</pluginArgs>
    </resource>
  </datasetClass> 


  <datasetClass class="pfalLocationsWithSqlLdr" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <graphTemplateFile name="organismSpecific.xml"/>
    
    <resource resource="${organismAbbrev}_LocMapSqlLdr_${name}_RSRC" version="${version}"
        plugin="ApiCommonData::Load::Plugin::InsertPlasmoPfalLocationsWithSqlLdr"
        type="unknown"
        scope="organism"
        organismAbbrev="${organismAbbrev}">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/SNP/${name}/${version}/final/map_v6.0.sql">
      <dir name="final">
      </dir>
      </manualGet>
      <pluginArgs>--dataFile  @@dataDir@@/map_v6.0.sql</pluginArgs>
    </resource>
  </datasetClass> 


  <datasetClass class="plasmoMapp" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>

    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_genomeFeature_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              type="feature"
	      scope="organism"
	      organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}/${version}/final">
	<dir name="final">
	</dir>
      </manualGet>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>

    </resource>
  </datasetClass>


    <datasetClass class="geneName" category="" datasetFileHint="">
      <purpose></purpose>
      <prop name="projectName"/>
      <prop name="organismAbbrev"/>
      <prop name="name"/>
      <prop name="version"/>
      <prop name="genomeVersion"/>

      <graphTemplateFile name="organismSpecific.xml"/>

      <resource resource="${organismAbbrev}_genome_${name}_RSRC" version="${version}" 
		plugin="ApiCommonData::Load::Plugin::InsertGeneNamesFromTabFile"
                type="gene_annotation"
		scope="organism"
		organismAbbrev="${organismAbbrev}">

	<manualGet fileOrDir="${projectName}/${organismAbbrev}/function/${name}_gene_names/${version}/final/geneName.txt">
	  <dir name="final">
	  </dir>
	</manualGet>
	<pluginArgs>--file @@dataDir@@/geneName.txt --geneNameDbName '${organismAbbrev}_primary_genome_RSRC' --geneNameDbVer '${genomeVersion}'</pluginArgs>
      </resource>
    </datasetClass>
    

  <!-- This dataset class load old sequences of genes in ApiDB.OldCodingSequence and old GO ids, EC numbers and product in ApiDB.OldAnnotation-->
  <datasetClass class="insertOldAnnotation" category="" datasetFileHint="">
    <purpose>Gene features that are not provided by the annotation center</purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>


    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_InsertOldAnnotation_${name}_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertOldAnnotation"
              scope="organism"
              type="feature"
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/gff/${name}_GFF/${version}/final/features.gff">
        <dir name="final">
        </dir>
      </manualGet>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION%  --gffFile @@dataDir@@/features.gff</pluginArgs>
    </resource>
  </datasetClass>

  <!-- NOTE: this class is specific to Crypto and is used to populate apidb.continents  -->
  <datasetClass class="updateIsolatesByContinents" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="version"/>

    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_updateIsolatesByContinents_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="isolates"
              subType=""
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/updateIsolatesByContinents/${version}/final/continents.txt">
        <dir name="final">
        </dir>
      </manualGet>

     <unpack>updateContinents.pl --file @@dataDir@@/continents.txt </unpack>
     <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>

  <!-- NOTE: this class is specific to Crypto and is used to update product and product_alias in dots.isolatefeature -->
  <datasetClass class="updateIsolateFeaturesByProductAlias" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="version"/>

    <graphTemplateFile name="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_updateIsolateFeaturesByProductAlias_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
              scope="organism"
              type="isolates"
              subType=""
              organismAbbrev="${organismAbbrev}">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/updateIsolateFeaturesByProductAlias/${version}/final/productAlias.txt">
        <dir name="final">
        </dir>
      </manualGet>

     <unpack>addProductAliasToIsolateFeature.pl --file @@dataDir@@/productAlias.txt --extDbName ${organismAbbrev}_isolates_genbank_RSRC --extDbVer 'TODAY'</unpack>
     <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="orthomclClade" category="" datasetFileHint="">
    <purpose></purpose>
    <prop name="cladeAbbrev"/>
    <prop name="version"/>

    <graphTemplateFile name="orthomclProject.xml"/>

    <resource resource="${cladeAbbrev}_orthomclClade_RSRC"
              version="${version}"
              plugin=""
              scope=""
              organismAbbrev="">

      <manualGet fileOrDir="common/empty">
        <dir name="final">
        </dir>
      </manualGet>

      <unpack>ln -s @@manualDeliveryDir@@/OrthoMCL/${cladeAbbrev}/${version}/final/ @@dataDir@@/final</unpack>
     <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>

    </resource>
  </datasetClass>



</datasetClasses>
