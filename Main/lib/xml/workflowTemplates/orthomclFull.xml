<workflowGraph name="">

  <!-- NEEDS UPGRADE TO ADD BAD PROTEINS TO SINGLETONS !! -->

  <constant name="globalDatasetLoaderXmlFile">global.xml</constant>
  <constant name="globalDataDir">global</constant>

  <!-- we want all steps in the flow to depend on this one because it validates the project name and version -->
  <step name="initUserGroupProject" 
	stepClass="ApiCommonWorkflow::Main::WorkflowSteps::InitUserGroupProject">
    <paramValue name="projectName">$$projectName$$</paramValue>
  </step>

  <step name="makeGlobalDataDir" stepClass="ReFlow::StepClasses::MakeDataDir">
    <paramValue name="dataDir">$$globalDataDir$$</paramValue>
    <depends name="initUserGroupProject"/>
  </step>

  <subgraph name="GO_RSRC" xmlFile="loadDataset.xml">
    <paramValue name="datasetName">GO_RSRC</paramValue>
    <paramValue name="datasetLoaderXmlFileName">$$globalDatasetLoaderXmlFile$$</paramValue>
    <paramValue name="parentDataDir">$$globalDataDir$$</paramValue>
    <depends name="makeGlobalDataDir"/>
    <depends name="initUserGroupProject"/>
  </subgraph>

  <subgraph name="SO_RSRC" xmlFile="loadDataset.xml">
    <paramValue name="datasetName">SO_RSRC</paramValue>
    <paramValue name="datasetLoaderXmlFileName">$$globalDatasetLoaderXmlFile$$</paramValue>
    <paramValue name="parentDataDir">$$globalDataDir$$</paramValue>
    <depends name="makeGlobalDataDir"/>
    <depends name="initUserGroupProject"/>
  </subgraph>

  <subgraph name="taxonomy_RSRC" xmlFile="loadDataset.xml">
    <paramValue name="datasetName">taxonomy_RSRC</paramValue>
    <paramValue name="datasetLoaderXmlFileName">$$globalDatasetLoaderXmlFile$$</paramValue>
    <paramValue name="parentDataDir">$$globalDataDir$$</paramValue>
    <depends name="makeGlobalDataDir"/>
    <depends name="initUserGroupProject"/>
  </subgraph>

  <subgraph name="interproscanData_RSRC" xmlFile="loadDataset.xml">
    <paramValue name="datasetName">InterproscanData_RSRC</paramValue>
    <paramValue name="datasetLoaderXmlFileName">$$globalDatasetLoaderXmlFile$$</paramValue>
    <paramValue name="parentDataDir">$$dataDir$$</paramValue>
    <depends name="makeGlobalDataDir"/>
    <depends name="initUserGroupProject"/>
  </subgraph>

  <subgraph name="enzymeDB_RSRC" xmlFile="loadDataset.xml">
    <paramValue name="datasetName">enzymeDB_RSRC</paramValue>
    <paramValue name="datasetLoaderXmlFileName">$$globalDatasetLoaderXmlFile$$</paramValue>
    <paramValue name="parentDataDir">$$dataDir$$</paramValue>
    <depends name="makeGlobalDataDir"/>
    <depends name="initUserGroupProject"/>
  </subgraph>

  <!-- load the OrthomclTaxon table with our tree of life -->
  <datasetTemplate class="orthomclClades">
    <subgraph name="orthomclClades" xmlFile="loadDataset.xml">
      <paramValue name="datasetName">orthomclClades_RSRC</paramValue>
      <paramValue name="datasetLoaderXmlFileName">OrthoMCL.xml</paramValue>
      <paramValue name="parentDataDir"></paramValue>
      <depends name="initUserGroupProject"/>
    </subgraph>
  </datasetTemplate>  

  <step name="makeProteomesDir" stepClass="ReFlow::StepClasses::MakeDataDir">
    <paramValue name="dataDir">proteomes</paramValue>
  </step>

  <datasetTemplate class="orthomclProteome">
    <prop name="abbrev"/>
    <prop name="ncbiTaxonId"/>

    <subgraph name="${abbrev}_orthomclProteome_RSRC" xmlFile="loadDataset.xml">
      <paramValue name="datasetName">${abbrev}_orthomclProteome_RSRC</paramValue>
      <paramValue name="datasetLoaderXmlFileName">OrthoMCL.xml</paramValue>
      <paramValue name="parentDataDir">proteomes</paramValue>
      <depends name="makeProteomesDir"/>
      <depends name="initUserGroupProject"/>
    </subgraph>

  </datasetTemplate>
  
  <step name="makeGoodProteinsFile" stepClass="ApiCommonWorkflow::Main::WorkflowSteps::OrthomclMakeGoodProteins">
    <paramValue name="proteomesDir">proteomes</paramValue>
    <paramValue name="outputGoodProteinsFile">good.fasta</paramValue>
    <paramValue name="outputBadProteinsFile">bad.fasta</paramValue>
    <paramValue name="minLength">10</paramValue>
    <paramValue name="maxStopPercent">20</paramValue>
    <dependsPattern name="*_orthomclProteome_RSRC"/>
  </step>

  <step name="initClusterHomeDir"
        stepClass="ReFlow::StepClasses::InitClusterHomeDir">
  </step>

  <step name="mirrorProteinsToCluster" stepClass="ReFlow::StepClasses::MirrorToComputeCluster">
    <paramValue name="fileOrDirToMirror">good.fasta</paramValue>
    <depends name="makeGoodProteinsFile"/>
    <depends name="initClusterHomeDir"/>
  </step>

  <!-- NEEDS WORK -->
  <subgraph name="makeGroups" xmlFile="makeOrthologGroups.xml">
    <paramValue name="parentDataDir"></paramValue>
    <paramValue name="inputProteinFile">good.fasta</paramValue>
    <paramValue name="inputTaxaDir">???</paramValue>
    <paramValue name="outputGroupsDir">groupsOutput</paramValue>
    <paramValue name="suffix"></paramValue>
    <paramValue name="useExistingSimSeqs">false</paramValue>
    <paramValue name="collapseClades">false</paramValue>
    <paramValue name="includeSingletonGroups">true</paramValue>
    <depends name="mirrorProteinsToCluster"/>
  </subgraph>

  <!-- insert groups -->
  <step name="InsertGroups" stepClass="OrthoMCLWorkflow::Main::WorkflowStep::InsertGroups">
    <paramValue name="inputGroupsDir">groupsOutput</paramValue>
    <depends name="makeGroups"/>
  </step>

  <!-- run group statistics -->
  <step name="UpdateGroupStatistics" stepClass="OrthoMCLWorkflow::Main::WorkflowStep::UpdateGroupStatistics">
    <depends name="insertGroups"/>
  </step>


  <!-- run interpro -->
    <subgraph name="interpro" xmlFile="interpro.xml">
      <paramValue name="proteinsFile">good.fasta</paramValue>
      <paramValue name="parentDataDir">$$dataDir$$</paramValue>
      <depends name="mirrorProteinsToCluster"/>
      <depends name="interproscanData_RSRC"/>
    </subgraph>

    <step name="document-interpro"
          stepClass="ApiCommonWorkflow::Main::WorkflowSteps::InsertAnalysisMethodInvocation">
      <paramValue name="method">interProScan_MTHD</paramValue>
      <paramValue name="version">most recent</paramValue>
      <paramValue name="parameters"></paramValue>
      <depends name="interpro"/>
    </step>


  <!-- run EC analysis -->

  <!-- extract files for MSA -->
  <!-- NEEDS WORK -->
  <step name="extractMsaFastaFiles" stepClass="OrthoMCLWorkflow::Main::WorkflowStep::ExtractFilesForMsa">
    <paramValue name="outputDir">MsaFastaFiles</paramValue>
    <paramValue name="filesPerTarball">500</paramValue>
    <depends name="insertGroups"/>
  </step>

  <step name="mirrorMsaFastaFilesToCluster" stepClass="ReFlow::StepClasses::MirrorToComputeCluster">
    <paramValue name="fileOrDirToMirror">MsaFastaFiles</paramValue>
    <depends name="extractMsaFastaFiles"/>
    <depends name="initClusterHomeDir"/>
  </step>

  <!-- run MSA -->
  <!-- NEEDS WORK -->
    <subgraph name="muscle" xmlFile="muscleMSA.xml">
      <paramValue name="proteinsFile">good.fasta</paramValue>
      <paramValue name="parentDataDir">$$dataDir$$</paramValue>
      <depends name="extractFilesForMsa"/>
    </subgraph>

    <step name="document-interpro"
          stepClass="ApiCommonWorkflow::Main::WorkflowSteps::InsertAnalysisMethodInvocation">
      <paramValue name="method">interProScan_MTHD</paramValue>
      <paramValue name="version">most recent</paramValue>
      <paramValue name="parameters"></paramValue>
      <depends name="interpro"/>
    </step>


  <!-- run biolayout -->

  <!-- load GroupTaxonMatrix (phyletic pattern) -->

  <!-- create Oracle Text indexes -->

  <!-- make the downloadSite -->

  <!-- make web services dir -->

  <!-- copy blast DB to cluster for proteome service -->

  <!-- domain keywords -->

  <!-- description keywords -->




</workflowGraph>
