<datasetClasses>

  <datasetClass class="organism">
    <prop name="organismAbbrev"/>
    <prop name="projectName"/>
    <prop name="publicOrganismAbbrev"/>
    <prop name="organismFullName"/>
    <prop name="organismNameForFiles"/>
    <prop name="ncbiTaxonId"/>
    <prop name="speciesNcbiTaxonId"/>
    <prop name="isReferenceStrain"/>
    <prop name="referenceStrainOrganismAbbrev"/>
    <prop name="isAnnotatedGenome"/>
    <prop name="isDraftGenome"/>
    <prop name="hasTemporaryNcbiTaxonId"/>
    <prop name="orthomclAbbrev"/>
    <prop name="strainAbbrev"/>
    <prop name="hasPlastidGenomeSequence"/>
    <prop name="hasMitochondrialGenomeSequence"/>
    <prop name="isHaploid"/>
    <prop name="hasDeprecatedGenes"/>
    <prop name="genomeSource"/>
    <prop name="genomeVersion"/>
    <prop name="runtRNAScan"/>
    <prop name="runExportPred"/>
    <prop name="taxonHierarchyForBlastxFilter"/>
    <prop name="skipGenomeAnalysis"/>

    <prop name="maxIntronSize"/>
    <prop name="genomeSize"/>

    <graphFile planFile="project.xml"/>

  </datasetClass>

  <datasetClass class="validateOrganismInfo">
    <prop name="organismAbbrev"/>
    <prop name="strainAbbrev"/>
    <prop name="projectName"/>
    <prop name="ncbiTaxonId"/>
    <prop name="speciesNcbiTaxonId"/>
  </datasetClass>


  <!-- an instance of this class is needed if and only if an organism is a -->
  <!-- reference strain.  it is used by the strain comparison machinery -->
  <datasetClass class="referenceStrain">
    <prop name="organismAbbrev"/>
    <prop name="isAnnotatedGenome"/>

    <graphFile planFile="project.xml"/>

  </datasetClass>



  <!-- Category: genome -->

  <datasetClass class="genbank_primary_genome">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="mapFile"/>

    <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_genbank/%RESOURCE_VERSION%/final/genome.gbf"/>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.gbf --fileFormat genbank --soCvsVersion @@SO_VER@@ --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out --validationLog @@dataDir@@/validation.log</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="genbank_secondary_genome">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="mapFile"/>

    <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_${soTerm}_${name}_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      parentResource="${organismAbbrev}_primary_genome_RSRC">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_genbank/%RESOURCE_VERSION%/final/genome.gbf"/>

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.gbf --fileFormat genbank --soCvsVersion @@SO_VER@@ --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out --validationLog @@dataDir@@/validation.log</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="embl_primary_genome">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="mapFile"/>

    <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_embl/%RESOURCE_VERSION%/final/genome.embl"/>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.embl --fileFormat embl --soCvsVersion @@SO_VER@@ --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out --validationLog @@dataDir@@/validation.log</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="embl_secondary_genome">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="mapFile"/>

    <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_${soTerm}_${name}_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      parentResource="${organismAbbrev}_primary_genome_RSRC">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_embl/%RESOURCE_VERSION%/final/genome.embl"/>

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.embl --fileFormat embl --soCvsVersion @@SO_VER@@ --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out--validationLog @@dataDir@@/validation.log</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="GeneDB_GFF_primary_genome_sequence">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="regex"/>

    <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/GeneDB_GFF/%RESOURCE_VERSION%/final"/>

      <unpack>splitGff3FilesIntoFastaAndCustomGff3 --input_dir @@dataDir@@/final --output_fasta @@dataDir@@/genome.fasta --output_gff @@dataDir@@/genome.gff3</unpack>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>

      <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --ncbiTaxId ${ncbiTaxonId} --externalDatabaseVersion %RESOURCE_VERSION% --sequenceFile @@dataDir@@/genome.fasta --SOTermName '${soTerm}'  --regexSourceId  '${regex}' --tableName "DoTS::ExternalNASequence"</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="GeneDB_GFF_primary_genome_features">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      internalDescrip="">

      <manualGet fileOrDir="global/empty"/>

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/geneDBGFF2Gus.xml --inputFileOrDir @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soCvsVersion @@SO_VER@@ --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="Broad_GFF_primary_genome_features">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>

    <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_Broad_gff3/%RESOURCE_VERSION%/final/genome.gtf"/>

      <unpack>convertGTFToGFF3 @@dataDir@@/genome.gtf > @@dataDir@@/genome.gff3</unpack>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>    

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/broadGFF32Gus.xml --inputFileOrDir @@dataDir@@/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soCvsVersion @@SO_VER@@ --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="fasta_primary_genome">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="table"/>  <!-- example:  DoTS::NASequence -->
    <prop name="soTerm"/>
    <prop name="regexSourceId"/>
 
    <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
	      internalDescrip=""
     >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_fasta/%RESOURCE_VERSION%/final/genome.fasta"/>

      <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/genome.fasta --soTermName ${soTerm} --regexSourceId "${regexSourceId}" --tableName "${table}"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="fasta_secondary_genome">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="table"/>  <!-- example:  DoTS::NASequence -->
    <prop name="soTerm"/>
    <prop name="regexSourceId"/>
 
    <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_${soTerm}_${name}_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
	      internalDescrip=""
              parentResource="${organismAbbrev}_primary_genome_RSRC" >

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_fasta/%RESOURCE_VERSION%/final/genome.fasta"/>

      <pluginArgs>--externalDatabaseName %PARENT_RESOURCE_NAME% --externalDatabaseVersion %PARENT_RESOURCE_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/genome.fasta --soTermName ${soTerm} --regexSourceId "${regexSourceId}" --tableName "${table}"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="genome_virtual_sequence_agp">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="virtualSeqSOTerm"/>
    <prop name="sourceIdPrefix"/>  <!-- optional.  add this prefix to the source ID -->
    <prop name="genomeVersion"/>

    <graphFile planFile="primaryVirtualGenome.xml"/>

    <resource resource="${organismAbbrev}_primary_virtual_genome_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertVirtualSeqFromAgpFile">
      
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${virtualSeqSOTerm}_assembly_agp/%RESOURCE_VERSION%/final/assembly.agp"/>

      <pluginArgs>--agpFile @@dataDir@@/assembly.agp --seqPieceExtDbName ${organismAbbrev}_primary_genome_RSRC --seqPieceExtDbRlsVer ${genomeVersion} --virSeqExtDbName %RESOURCE_NAME% --virSeqExtDbRlsVer %RESOURCE_VERSION% --virtualSeqSOTerm ${virtualSeqSOTerm}  --ncbiTaxId ${ncbiTaxonId} --soVer @@SO_VER@@ --sourceIdPrefix ${sourceIdPrefix}</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: genomeFeature -->

  <datasetClass class="genomeFeatures_GFF2">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="mapFile"/>
    <prop name="gff2GroupTag"/>
    <prop name="genomeVersion"/>


    <graphFile planFile="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_genomeFeature_${name}_GFF2_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures">
	      parentResource="${organismAbbrev}_primary_genome_RSRC">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}_GFF/%RESOURCE_VERSION%/final/features.gff"/>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --seqExtDbName ${organismAbbrev}_primary_genome_RSRC --seqExtDbRlsVer ${genomeVersion} --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/features.gff --fileFormat gff2  --gff2GroupTag "${gff2GroupTag}" --soCvsVersion @@SO_VER@@ --defaultOrganism ${ncbiTaxonId} --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </resource>
  </datasetClass>


  <!-- Category: ESTs -->

  <!-- NOTE: this dataset class only gets the sequences, it does not map
       them to the genome.  See transcriptsFromReferenceStrain
  -->

  <datasetClass class="dbEST">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="speciesNcbiTaxonId"/>

    <graphFile planFile="ESTs.xml"/>

    <resource resource="${organismAbbrev}_dbEST_RSRC" version="@@${organismAbbrev}_dbEST_VER@@"
	      plugin="GUS::Supported::Plugin::dbEST"
	      internalDescrip="">
      <manualGet fileOrDir="global/empty"/>

      <unpack>getSubTaxa --ncbiTaxId ${speciesNcbiTaxonId} --outputFile @@dataDir@@/taxonIdFile</unpack>

      <unpack>createPropFile --file @@dataDir@@/dbestProp --propList "dbestLogin:@@dbestLogin@@,dbestPswd:@@dbestPswd@@"</unpack>

      <pluginArgs>--span 500 --taxonFile @@dataDir@@/taxonIdFile --extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --soVer @@SO_VER@@ --dbestLoginFile @@dataDir@@/dbestProp --dbestConnect "@@dbestConnect@@" </pluginArgs>
    </resource>
  </datasetClass>


  <!-- NOTE: this dataset class only gets the sequences, it does not map
       them to the genome.  See transcriptsFromReferenceStrain
  -->

  <datasetClass class="ESTsFromFasta">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="name"/>
    <prop name="sourceIdRegex"/>
    <prop name="soTerm"/>
    <prop name="isPutativeFullLength"/> <!-- true or false -->
    <prop name="libraryVector"/>
    <prop name="libraryStage"/>
    <prop name="libraryName"/>
    <prop name="libraryDesc"/>
    <prop name="contactName"/>
    <prop name="contactAddress1"/>
    <prop name="contactAddress2"/>

    <graphFile planFile="ESTs.xml"/>

    <resource resource="${organismAbbrev}_EST_${name}_sequences_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadEstsFromFastaFile"
	      internalDescrip="">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/EST/${name}/${version}/final/ests.fasta"/>
      <pluginArgs>--sourceIdRegex "${sourceIdRegex}" --fastaFile @@dataDir@@/ests.fasta --externalDatabaseName %RESOURCE_NAME% --externalDatabaseVer %RESOURCE_VERSION%  --SOTermName '${soTerm}' --ncbiTaxId ${ncbiTaxonId} --libraryVector '${libraryVector}' --contactName '${contactName}' --contactAddress1 "${contactAddress1}" --contactAddress2 "${contactAddress2}" --isPutativeFullLength ${isPutativeFullLength} --libraryStage '${libraryStage}' --libraryName '${libraryName}' --libraryDesc "${libraryDesc}"</pluginArgs>
    </resource>
  </datasetClass>


  <!-- This class gets its data from ESTs and transcripts loaded by the
       reference strain.  It finds all of them in the database and maps them to
       our genome.  The reference strain DOES need to include an instance
       of this class so that its transcripts get mapped to its genome  -->

  <datasetClass class="transcriptsFromReferenceStrain">
    <prop name="referenceStrainOrganismAbbrev"/>

    <graphFile planFile="mapTranscriptsToGenome.xml"/>

  </datasetClass>


  <!-- Category: IEDB epitopes -->

  <!-- this should generate a plan file so we can lose the loadEpitopes flag in organism -->
  <!-- only include this if a reference genome -->
  <datasetClass class="epitope_sequences_IEDB" >
    <prop name="organismAbbrev"/>
    <prop name="speciesNcbiTaxonId"/>

    <graphFile planFile="mapEpitopes.xml"/>

    <resource resource="${organismAbbrev}_epitope_IEDB_RSRC"
              version="@@${organismAbbrev}_epitope_IEDB_VER@@"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences">

      <manualGet fileOrDir="global/empty"/>

      <!-- validate that IEDB knows about this taxon id.  this unpack just greps IEDB's taxon list -->
      <unpack><![CDATA[unzip -p @@manualDeliveryDir@@/common/epitope/IEDB/@@${organismAbbrev}_epitope_IEDB_VER@@/fromProvider/OrganismList.zip | grep "<OrganismId>${speciesNcbiTaxonId}<"]]></unpack>

      <unpack>iedbMakeTabFileFromXml --input_dir @@manualDeliveryDir@@/common/epitope/IEDB/@@${organismAbbrev}_epitope_IEDB_VER@@/final/iedb_export_fixed --outputfile @@dataDir@@/oneOrganism.txt --NCBITaxId ${speciesNcbiTaxonId}</unpack>

      <unpack>mkdir -p @@dataDir@@/fasta</unpack>

      <unpack>iedbSimplifyTabFile --inputFile @@dataDir@@/oneOrganism.txt --outputFile @@dataDir@@/oneOrganismSimplified.txt </unpack>

      <unpack>generateEpitopeFastaFile --inputFile @@dataDir@@/oneOrganismimplified.txt --outputFile @@dataDir@@/fasta/IEDBExport.fsa </unpack>

      <getAndUnpackOutput dir="@@dataDir@@/fasta"/>

      <getAndUnpackOutput file="@@dataDir@@/simplified.txt"/>

      <pluginArgs><![CDATA[--seqFileDir @@dataDir@@/fasta --externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --soTermName "protein_binding_site" --regexSourceId ">(\d+)|" --tableName "DoTS::MotifAASequence" --logFrequency 100 --regexNcbiTaxId "\|.*\|(.*)" --regexName "\|(.*)\|.*"]]></pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="IEDB_dbxrefs">
    <prop name="organismAbbrev"/>

    <graphFile planFile="mapEpitopes.xml"/>

    <resource resource="${organismAbbrev}_dbxref_epitope_IEDB_RSRC"
	      version="@@${organismAbbrev}_epitope_IEDB_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs">

      <manualGet fileOrDir="global/empty"/>

      <unpack>createEpitopeDbRefFile --inputDir @@dataDir@@/../${organismAbbrev}_epitope_IEDB_RSRC/IEDB_Epitopes_fixed --outputFile @@dataDir@@/dbRefs.txt</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/dbRefs.txt --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "primary_identifier, remark" --tableName "AASequenceDbRef"</pluginArgs>
    </resource>
  </datasetClass>


  <!-- Category: gene aliases -->

  <datasetClass class="geneAliases">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="version"/>
    <prop name="name"/>
    <prop name="idType"/>  <!-- previous id, alternate id -->

    <graphFile planFile="geneAliases.xml"/>

    <resource resource="${organismAbbrev}_${name}_gene_aliases_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dbxref/${name}_gene_aliases/%RESOURCE_VERSION%/final/geneAliases.txt"/>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/mapping.txt --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "primary_identifier" --tableName DBRefNAFeature --idType '${idType}'</pluginArgs>
    </resource>
  </datasetClass>


  <!-- Category: dbxrefs -->
  <datasetClass class="dbxref_simple">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="columnSpec"/>
    <prop name="type"/>  <!-- DBRefNASequence, AASequenceDBRef, DBRefAAFeature, DBRefNAFeature -->

    <graphFile planFile="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_${name}_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dbxref/${name}/%RESOURCE_VERSION%/final/mapping.txt"/>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/mapping.txt --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "${columnSpec}" --tableName ${type}</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="dbxref_gene2ApiLoc">
    <prop name="organismAbbrev"/>
    <prop name="projectName"/>
    <prop name="ApiLocOrganism"/>   <!-- organism name as found on the ApiLoc site -->


    <graphFile planFile="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_ApiLoc_RSRC"
	      version="@@${organismAbbrev}_dbxref_ApiLoc_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dbxref/gene2ApiLoc/%RESOURCE_VERSION%/final/${organismAbbrev}.html"/>

      <unpack>makeDbxRefsFromApiLocHtml @@dataDir@@/${organismAbbrev}.html "${ApiLocOrganism}" > @@dataDir@@/dbxrefs.txt</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/dbxrefs.txt --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "remark" --tableName "DbRefNAFeature"</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="dbxref_gene2Entrez">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="genomeVersion"/>

    <graphFile planFile="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_gene2Entrez_RSRC"
	      version="@@${organismAbbrev}_dbxref_gene2Entrez_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs">


      <manualGet fileOrDir="common/dbxref/gene2Entrez/%RESOURCE_VERSION%/final/gene_info.gz"/>

      <unpack>ncbiGeneInfo2DbRefsFile @@dataDir@@/gene_info.gz ${ncbiTaxonId} > @@dataDir@@/gene2entrez.tab</unpack>

      <unpack>rm -f @@dataDir@@/gene_info.gz</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/gene2entrez.tab --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "primary_identifier,secondary_identifier,remark" --tableName "DbRefNAFeature"  --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}'  --idType 'alternate id'</pluginArgs>

    </resource>
  </datasetClass>

  <!-- depends on dbxref_gene2Entrez -->
  <datasetClass class="dbxref_gene2Uniprot">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="genomeVersion"/>

    <graphFile planFile="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_gene2Uniprot_RSRC"
	      version="@@${organismAbbrev}_dbxref_gene2Uniprot_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs">

      <manualGet fileOrDir="common/dbxref/gene2Uniprot/%RESOURCE_VERSION%/final/idmapping_selected.tab.gz"/>

      <!-- need to use the gene2entrez file to get map of NCBI ids -->
      <unpack>uniprotIdMap2DbRefsFile @@dataDir@@/idmapping_selected.tab.gz @@dataDir@@/../${organismAbbrev}_dbxref_gene2Entrez_RSRC/entrez2gene.tab > @@dataDir@@/gene2uniprot.tab</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/gene2uniprot.tab --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "primary_identifier,secondary_identifier,remark" --tableName "DbRefNAFeature"  --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' --idType 'alternate id'</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: SNPs -->

  <!-- FIX WORKFLOW: need to change getAndAnalyzeSnps to use SNPs.gff -->
  <datasetClass class="SNPs_GFF">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>

    <graphFile planFile="SNPs.xml"/>

    <resource resource="${organismAbbrev}_SNP_${name}_gff_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/SNP/${name}/%RESOURCE_VERSION%/final/SNPs.gff"/>
      <getAndUnpackOutput file="@@dataDir@@/SNPs.gff"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="SNPs_HTS">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="snpStrainAbbrev"/>
    <prop name="hasPairedReads"/>
    <prop name="name"/>
    <prop name="version"/>

    <graphFile planFile="SNPs.xml"/>

    <resource resource="${organismAbbrev}_SNP_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
	      internalDescrip="">

      <manualGet fileOrDir="global/empty"/>
      <unpack>ln -s @@manualDeliveryDir@@/${projectName}/${organismAbbrev}/SNPs/${name}/%RESOURCE_VERSION%/final/ @@dataDir@@/final</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final" />
      <getAndUnpackOutput file="@@dataDir@@/final/reads.txt"/>
      <getAndUnpackOutput file="@@dataDir@@/final/readsPaired.txt"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: microarrayPlatform -->

  <datasetClass class="microarrayPlatform">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="isAffymetrixGeneArray"/>
    <prop name="isNimbleGenGeneArray"/>
    <prop name="limitNU"/>
    <prop name="variableLengthReads"/>
    <prop name="numInsertions"/>

    <graphFile planFile="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_microarrayPlatform_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayPlatform/${name}/%RESOURCE_VERSION%/final"/>

      <unpack>probeFasta2Tab @@dataDir@@/final/probes.fsa > @@dataDir@@/probes.tab</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>
      <getAndUnpackOutput file="@@dataDir@@/final/probes.fsa"/>
      <getAndUnpackOutput file="@@dataDir@@/probes.tab"/>
      <getAndUnpackOutput file="@@dataDir@@/final/geneProbeMapping.cdf"/>
      <getAndUnpackOutput file="@@dataDir@@/final/geneProbeMapping.ndf"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="chipChipPlatform">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="limitNU"/>
    <prop name="numInsertions"/>

    <graphFile planFile="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_chipChipPlatform_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayPlatform/${name}/%RESOURCE_VERSION%/final/probes.fsa"/>

      <unpack>probeFasta2Tab @@dataDir@@/final/probes.fsa > @@dataDir@@/probes.tab</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>
      <getAndUnpackOutput file="@@dataDir@@/final/probes.fsa"/>
      <getAndUnpackOutput file="@@dataDir@@/probes.tab"/>


      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>


  <!-- Category: microarrayExpression -->

  <!-- FIX: needs an analysis config file -->
  <!-- manual delivery and plugin or step class must be upgraded see redmine #4257 -->
  <datasetClass class="microarrayExpressionExperiment">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="experimentName"/>
    <prop name="experimentVersion"/>
    <prop name="microarrayPlatformName"/>
    <prop name="microarrayPlatformVersion"/>
    <prop name="doExpressionAnalysis"/>
    <prop name="hasTimeSeries"/>
    <prop name="usesAffymetrixGeneArray"/>
    <prop name="usesNimbleGenGeneArray"/>

    <graphFile planFile="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_microarrayExpression_${experimentName}_RSRC" version="${experimentVersion}"
	      plugin="ApiCommonData::Load::Plugin::DoNothing"
	      internalDescrip="">
      
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayExpression/${experimentName}/%RESOURCE_VERSION%/final"/>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>
      <getAndUnpackOutput file="@@dataDir@@/final/analysis_result_config.txt"/>
      <getAndUnpackOutput file="@@dataDir@@/final/expression_profile_config.txt"/>
      <getAndUnpackOutput file="@@dataDir@@/final/analysisConfig.xml"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>

    </resource>
  </datasetClass>


  <!-- Category: ChIP Chip-->

  <datasetClass class="chipChipExperiment">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="experimentName"/>
    <prop name="experimentVersion"/>
    <prop name="chipChipPlatformName"/>
    <prop name="chipChipPlatformVersion"/>
    <prop name="peakFinderArgs"/>
    <prop name="loadPeakCalls"/>

    <graphFile planFile="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_chipChipExper_${experimentName}_RSRC" version="${experimentVersion}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
	      internalDescrip="">

     <manualGet fileOrDir="${projectName}/${organismAbbrev}/chipChip/${experimentName}/%RESOURCE_VERSION%/final"/>

     <getAndUnpackOutput dir="@@dataDir@@/final" />

     <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>

    </resource>
  </datasetClass>


  <!-- the files containing the sample data are assumed to be normalized -->
  <datasetClass class="chipChipSample">
    <prop name="organismAbbrev"/>
    <prop name="experimentName"/>
    <prop name="sampleName"/>
 
    <graphFile planFile="chipChipSamples.xml"/>

      <!-- we load a fake resource here so we can make a getAndUnpackOutput -->
      <!-- to declare existence of sample file that is acquired by experiment, for test mode -->
    <resource resource="${organismAbbrev}_${experimentName}_${sampleName}_chipChipSample_RSRC" version="dontcare"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing">

      <manualGet fileOrDir="global/empty"/>

      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_chipChipExper_${experimentName}_RSRC/final/${sampleName}_smoothed_config.txt" />
      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_chipChipExper_${experimentName}_RSRC/final/${sampleName}_peak_config.txt" />
      <getAndUnpackOutput file="@@dataDir@@/../${organismAbbrev}_chipChipExper_${experimentName}_RSRC/final/${sampleName}.txt" />

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>



  </datasetClass>


  <!-- NOTE:  because the data files are so large, we don't copy into our
       workflow data dir, but use a symlink into manual deliv instead -->

  <datasetClass class="rnaSeqExperiment">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="limitNU"/>
    <prop name="hasVariableLengthReads"/> 
    <prop name="numInsertions"/>
    <prop name="hasOnlyOneSample"/>
    <prop name="hasPairedEnds"/>
    <prop name="isStrandSpecific"/>

    <graphFile planFile="organismSpecificOnTopLevelGenome.xml"/>

    <resource resource="${organismAbbrev}_${name}_rnaSeq_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing">

      <manualGet fileOrDir="global/empty"/>
      <unpack>ln -s @@manualDeliveryDir@@/${projectName}/${organismAbbrev}/rnaSeq/${name}/%RESOURCE_VERSION%/final/ @@dataDir@@/final</unpack>

      <getAndUnpackOutput dir="@@dataDir@@/final" />
      <getAndUnpackOutput file="@@dataDir@@/final/expression_profile_config.txt"/>
      <getAndUnpackOutput file="@@dataDir@@/final/analysisConfig.xml"/>
      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>

  </datasetClass>

  <datasetClass class="rnaSeqSample">
    <prop name="organismAbbrev"/>
    <prop name="experimentName"/>
    <prop name="sampleName"/>
 
    <graphFile planFile="rnaSeqSamples.xml"/>

      <!-- we load a fake resource here so we can make a getAndUnpackOutput -->
      <!-- to declare existence of sample file that is acquired by experiment, for test mode -->
    <resource resource="${organismAbbrev}_${experimentName}_${sampleName}_rnaSeqSample_RSRC" version="dontcare"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing">

      <manualGet fileOrDir="global/empty"/>

      <getAndUnpackOutput dir="@@dataDir@@/../../${organismAbbrev}_${experimentName}_rnaSeq_RSRC/final/${sampleName}.txt" />

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>


  </datasetClass>

  <!-- NOTE: this dataset class only gets the sequences, it does not map
       them to the genome.  For that use clonedInsertEndsFromReferenceStrain
  -->

  <datasetClass class="clonedInsertEnds">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTermName"/>
    <prop name="regexSourceId"/>

    <graphFile planFile="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_${name}_clonedInsertEnds_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dnaSeq/${name}/%RESOURCE_VERSION%/final/seqs.fasta"/>

      <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/seqs.fasta --soTermName ${soTermName} --regexSourceId "${regexSourceId}" --tableName "DoTS::ExternalNaSequence"</pluginArgs>
    </resource>
  </datasetClass>

  <!-- This class gets its data from cloned insert ends loaded by the
       reference strain.  It finds them in the database and maps them to
       our genome.  The reference strain DOES need to include an instance
       of this class for each dataset, so that it gets mapped  -->

  <datasetClass class="clonedInsertEndsFromReferenceStrain">
    <prop name="referenceStrainOrganismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>

    <graphFile planFile="organismSpecific.xml"/>

  </datasetClass>


  <!-- GOT TO HERE -->


  <!-- Category: SAGE tags -->

  <datasetClass class="sageTagSequences">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="isMissingCATG"/>
    <prop name="bowtieParams"/>
 
    <graphFile planFile="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_sageTag_${name}_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadSagePrimers">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/sageTag/${name}/%RESOURCE_VERSION%/final/primers.txt"/>

      <pluginArgs>--primers_file @@dataDir@@/primers.txt</pluginArgs>

    </resource>
  </datasetClass>

  <datasetClass class="sageTagFrequencies">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="normalizeFrequencies"/>
 
    <graphFile planFile="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_sageTag_${name}_frequencies_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadSageFrequencies"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/sageTag/${name}/%RESOURCE_VERSION%/final/freqs.txt"/>

      <pluginArgs>--freq_file @@dataDir@@/freqs.txt</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: product names -->

  <datasetClass class="productNames">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
 
    <graphFile planFile="productNames.xml"/>

    <resource resource="${organismAbbrev}_function_${name}_product_names_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertGeneFeatProductFromTabFile"
	      parentResource="${organismAbbrev}_primary_genome_RSRC">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/function/${name}_product_names/%RESOURCE_VERSION%/final/products.txt"/>

      <pluginArgs>--file @@dataDir@@/products.txt  --productDbName %PARENT_RESOURCE_NAME% --productDbVer %PARENT_RESOURCE_VERSION%</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: comments -->

  <datasetClass class="comments">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
 
    <graphFile planFile="comments.xml"/>

    <resource resource="${organismAbbrev}_function_${name}_comments_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertNaFeatCommentFromTabFile"
	      parentResource="${organismAbbrev}_primary_genome_RSRC">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/comment/${name}_comments/%RESOURCE_VERSION%/final/comments.txt"/>

      <pluginArgs>--file @@dataDir@@/comments.txt  --genomeDbName %PARENT_RESOURCE_NAME% --genomeDbVer %PARENT_RESOURCE_VERSION%</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: isolates -->

  <!-- NOTE: this dataset class only gets the isolates, it does not map
       them to the genome.  See isolatesFromReferenceStrain
  -->

  <datasetClass class="isolatesGenbank">
    <prop name="organismAbbrev"/>
    <prop name="speciesNcbiTaxonId"/>
 
    <graphFile planFile="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_isolates_genbank_RSRC" version="TODAY"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      internalDescrip="">

      <manualGet fileOrDir="global/empty"/>

      <!-- get the file from genbank, querying by ncbiTaxonId -->
      <unpack>getIsolatesFromGenbank ${speciesNcbiTaxonId} @@dataDir@@/isolates.gb</unpack>

      <unpack>fixIsolateSequences --seq_file @@dataDir@@/isolates.gb --fixed_seq_file @@dataDir@@/isolates_fixed_1.gb --removed_seq_file @@dataDir@@/isolates_excluded.gb</unpack>

      <unpack>sed "s/SOURCE\tplastid/SOURCE\t/" @@dataDir@@/sequences_fixed.gb | sed "s/SOURCE\tapicoplast/SOURCE\t/" | sed "s/SOURCE\tmitochondrion/SOURCE\t/" > @@dataDir@@/isolates_fixed_2.gb</unpack>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/isolatesGenbank2gus.xml --inputFileOrDir @@dataDir@@/isolates_fixed_2.gb --fileFormat genbank --soCvsVersion @@SO_VER@@ --defaultOrganism ${speciesNcbiTaxonId}  --seqSoTerm "region" --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </resource>
  </datasetClass>


  <!-- NOTE: this dataset class only gets the isolates, it does not map
       them to the genome.  See isolatesFromReferenceStrain
  -->

  <datasetClass class="isolateSequencesFasta">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="regexSourceId"/>

    <resource resource="${organismAbbrev}_isolates_${name}_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/${name}/%RESOURCE_VERSION%/final/isolates.fasta"/>

      <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/seqs.fasta --soTermName region --regexSourceId "${regexSourceId}" --tableName "DoTS::ExternalNaSequence"</pluginArgs>
    </resource>
  </datasetClass>


  <!-- the ncbi taxon ID is not important.  isolate strain info is provided by dedicated isolate info tables -->
  <datasetClass class="isolateFeaturesGFF2">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="mapFile"/>
 
    <graphFile planFile="organismSpecific.xml"/>

    <resource resource="${organismAbbrev}_isolates_${name}_features_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/${name}/%RESOURCE_VERSION%/final/isolates.gff"/>

      <pluginArgs> --extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/isolates.gff --fileFormat gff2 --gff2GroupTag locus_tag --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --soCvsVersion @SO_VER@ --defaultOrganism ${ncbiTaxonId} --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </resource>
  </datasetClass>

  <!-- NOTE: this dataset does not get the isolates, but it does map
       them to the genome.  It extracts the sequences from the database
  -->

  <datasetClass class="isolatesFromReferenceStrain">
    <prop name="referenceStrainOrganismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
 
    <graphFile planFile="organismSpecific.xml"/>
  </datasetClass>

  <datasetClass class="massSpecPreprocessed">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="flag"/>
    <prop name="genomeVersion"/>
 
    <graphFile planFile="massSpec.xml"/>

    <resource resource="${organismAbbrev}_massSpec_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertMassSpecPreprocessed"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/massSpec/${name}/%RESOURCE_VERSION%/final"/>

      <pluginArgs>--inputDir @@dataDir@@/final --externalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%" --geneExternalDatabaseSpec '${organismAbbrev}_primary_genome_RSRC|${genomeVersion}' ${flag} </pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="orthomclPhyletic">
    <prop name="projectName"/>

    <graphFile planFile="comparativeGenomics.xml"/>

    <resource resource="OrthoMCL_Phyletic_RSRC" version="@@OrthoMCL_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertPhylogeneticProfile">
      <manualGet fileOrDir="common/orthology/orthoMCL/%RESOURCE_VERSION%/orthomclGroups.txt"/>
      <pluginArgs>--projectName ${projectName} --groupsFile @@dataDir@@/orthomclGroups.txt</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="orthomcl">
    <prop name="projectName"/>

    <graphFile planFile="comparativeGenomics.xml"/>

    <resource resource="OrthoMCL_RSRC" version="@@OrthoMCL_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertOrthologousGroups">
      <manualGet fileOrDir="common/orthology/orthoMCL/%RESOURCE_VERSION%/orthomclGroups.txt"/>
      <pluginArgs>--projectName ${projectName} --OrthologFile @@dataDir@@/orthomclGroups.txt --AnalysisName 'OrthoMCL-based Orthology Predictions' --AnalysisDescription 'OrthoMCL-based Orthology Predictions' --ElementResultTable "DoTS::GeneFeature"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="orthomclTree">
    <prop name="projectName"/>

    <graphFile planFile="comparativeGenomics.xml"/>

    <resource resource="OrthoMCLTree_RSRC" version="@@OrthoMCL_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertOrthomclTaxon">

      <!-- use non-standard approach here to get two individual files rather
           than the whole dir, which has some very large files we don't need -->
      <manualGet fileOrDir="global/empty"/>
      <unpack>cp @@manualDeliveryDir@@/common/orthology/orthoMCL/%RESOURCE_VERSION%/orthomclClades.txt @@dataDir@@</unpack>
      <unpack>cp @@manualDeliveryDir@@/common/orthology/orthoMCL/%RESOURCE_VERSION%/orthomclTaxons.txt @@dataDir@@</unpack>

      <pluginArgs>--cladeFile @@dataDir@@/orthomclClades.txt --speciesFile @@dataDir@@/orthomclTaxons.txt</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="geneOntology">
  <resource resource="GO_RSRC" version="@@GO_VER@@"
      plugin="GUS::Supported::Plugin::InsertGeneOntology">
    <manualGet fileOrDir="global/ontology/geneOntology/%RESOURCE_VERSION%/gene_ontology.obo"/>
    <pluginArgs>--oboFile @@dataDir@@/gene_ontology.obo --extDbRlsName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --calcTransitiveClosure</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="enzymeDB">
    <prop name="version"/>
  <resource resource="enzymeDB_RSRC" version="${version}"
      plugin="GUS::Community::Plugin::LoadEnzymeDatabase">
    <wgetArgs url="ftp://ftp.expasy.org/databases/enzyme/">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=3 --include list  --accept=enzclass.txt,enzyme.dat</wgetArgs>
    <pluginArgs>--InPath @@dataDir@@ --enzymeDbName %RESOURCE_NAME% --enzymeDbRlsVer %RESOURCE_VERSION%</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="PDBProteinSequences">
  <resource resource="PDBProteinSequences_RSRC" version="@@PDBProteinSequences_VER@@"
      plugin="GUS::Supported::Plugin::LoadFastaSequences">
    <wgetArgs url="ftp://ftp.wwpdb.org/pub/pdb/derived_data/pdb_seqres.txt.gz">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=3 --output-document=@@dataDir@@/pdb_seqres.txt.gz</wgetArgs>
    <unpack>gunzip @@dataDir@@/pdb_seqres.txt.gz</unpack>
    <unpack>filterPdbFile --inputFile @@dataDir@@/pdb_seqres.txt --outputFile  @@dataDir@@/pdb.fsa</unpack>
     <getAndUnpackOutput file="@@dataDir@@/pdb.fsa"/>   
    <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --sequenceFile  @@dataDir@@/pdb.fsa --SOTermName 'polypeptide'  --noSequence --regexSourceId  '>(\w+)\s+mol:protein' --regexDesc 'length:\d+\s+(.+)$' --tableName "DoTS::ExternalAASequence"</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="taxonomy">
  <resource resource="taxonomy_RSRC" version="@@taxonomy_VER@@"
      plugin="GUS::Supported::Plugin::LoadTaxon">
    <wgetArgs url="ftp://ftp.ncbi.nih.gov/pub/taxonomy/">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=2 --include list --accept=gi_taxid_prot.dmp.gz,taxdump.tar.gz</wgetArgs>
    <unpack>gunzip @@dataDir@@/gi_taxid_prot.dmp.gz</unpack>
    <unpack>$currDir=`pwd`; cd @@dataDir@@ ; tar -xzf taxdump.tar.gz ; rm -f taxdump.tar ; cd $currDir</unpack>
    <pluginArgs>--names @@dataDir@@/names.dmp --nodes @@dataDir@@/nodes.dmp --gencode @@dataDir@@/gencode.dmp --merged @@dataDir@@/merged.dmp --verbose</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="updatePDBTaxon">
    <prop name="version"/>
  <resource resource="updatePDBTaxon_RSRC" version="${version}"
      plugin="ApiCommonData::Load::Plugin::UpdateTaxonFieldFromFile">
    <wgetArgs url="ftp://ftp.wwpdb.org/pub/pdb/derived_data/index/source.idx">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=4 --output-document=@@dataDir@@/source.idx</wgetArgs>
    <unpack>processSourceIdxFile --inFile @@dataDir@@/source.idx --outFile @@dataDir@@/source.idx.processed</unpack>
    <pluginArgs>--fileName @@dataDir@@/source.idx.processed --sourceIdRegex  '^(\w+)' --taxonNameRegex '^\w+\s+(.+)' --idSql 'select substr(lower(source_id),0,4),aa_sequence_id from dots.externalaasequence' --extDbRelSpec 'PDBProteinSequences_RSRC|@@PDBProteinSequences_VER@@'  --tableName 'DoTS::ExternalAASequence'</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="sequenceOntology">
  <resource resource="SO_RSRC" version="@@SO_VER@@"
      plugin="GUS::Supported::Plugin::InsertSequenceOntologyOBO">
    <wgetArgs url="http://song.cvs.sourceforge.net/viewvc/song/ontology/so.obo">--tries=5 --output-document=@@dataDir@@/so.obo</wgetArgs>
    <pluginArgs>--inputFile @@dataDir@@/so.obo --soVersion @@SO_VER@@ --soCvsVersion @@SO_VER@@</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="mgedOntologyTermTypes">
  <resource resource="Mged_Ontology_Term_Types_RSRC" version="1.3"
      plugin="GUS::Supported::Plugin::InsertOntologyTermType">
    <manualGet fileOrDir="global/ontology/Mged/%RESOURCE_VERSION%/MgedOntologyTermTypes.tab"/>
    <pluginArgs>--inputFile @@dataDir@@/MgedOntologyTermTypes.tab</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="mgedOntologyRelationshipTypes">
  <resource resource="Mged_Ontology_Relationship_Types_RSRC" version="1.3"
      plugin="GUS::Supported::Plugin::InsertOntologyRelationshipType">
    <manualGet fileOrDir="global/ontology/Mged/%RESOURCE_VERSION%/MgedOntologyRelationshipTypes.tab"/>
    <pluginArgs>--inputFile @@dataDir@@/MgedOntologyRelationshipTypes.tab</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="mgedOntology">
  <resource resource="MGED_Ontology_RSRC" version="1.3"
      plugin="GUS::Supported::Plugin::InsertOntologyTermsAndRelationships">
    <wgetArgs url="http://mged.sourceforge.net/ontologies/MGEDOntology.owl">--tries=5 --no-directories --no-host-directories --accept=@@dataDir@@/MGEDOntology.owl </wgetArgs>
    <pluginArgs>--inFile @@dataDir@@/MGEDOntology.owl --extDbName %RESOURCE_NAME% --extDbVersion %RESOURCE_VERSION% --uri 'http://mged.sourceforge.net/ontologies/MGEDontology.php' --parserType MgedRdfRow</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="mgedOntologyEntry">
  <resource resource="Mged_Ontology_Entry_RSRC" version="1.3"
      plugin="GUS::Community::Plugin::LoadOntologyEntryFromMO">
    <manualGet fileOrDir="global/empty"/>
    <pluginArgs>--externalDatabase MGED_Ontology_RSRC --externalDatabaseRls 1.3</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="geneOntologyEvidenceCodes">
    <prop name="version"/>
  <resource resource="GO_evidence_codes_RSRC" version="${version}"
      plugin="ApiCommonData::Load::Plugin::InsertGOEvidenceCodesFromObo">
    <wgetArgs url="http://obo.cvs.sourceforge.net/*checkout*/obo/obo/ontology/evidence_code.obo">--tries=5 --output-document=@@dataDir@@/evidence_code.obo</wgetArgs>
    <pluginArgs>--oboFile @@dataDir@@/evidence_code.obo</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="interproscanData">
  <resource resource="InterproscanData_RSRC" version="@@InterproscanData_VER@@"
      plugin="ApiCommonData::Load::Plugin::InsertInterproDomainDbs">
    <manualGet fileOrDir="global/domain/iprscanData/%RESOURCE_VERSION%/iprscan"/>
    <unpack>fixSuperfamily @@dataDir@@/iprscan/data/</unpack>
    <pluginArgs>--inPath @@dataDir@@/iprscan/data/</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="NRDB">
  <resource resource="NRDB_RSRC" version="@@NRDB_VER@@"
      plugin="ApiCommonData::Load::Plugin::LoadNothing">
    <wgetArgs url="ftp://ftp.ncbi.nih.gov/blast/db/FASTA/">--tries=5 --mirror --no-parent --no-directories --no-host-directories --cut-dirs=3 --accept=nr.gz </wgetArgs>
    <unpack>gunzip @@dataDir@@/nr.gz </unpack>
    <unpack>shortenDefLine --inputFile @@dataDir@@/nr --outputFile @@dataDir@@/nrdb-short-defline.fsa --taxonIdMappingFile @@dataDir@@/../taxonomy_RSRC/gi_taxid_prot.dmp</unpack>
    <getAndUnpackOutput file="@@dataDir@@/nrdb-short-defline.fsa"/>
    <getAndUnpackOutput file="@@dataDir@@/nr"/>
    <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="blatAlignmentQuality">
    <prop name="version"/>
  <resource resource="blatAlignmentQuality_RSRC" version="${version}"
      plugin="GUS::Supported::Plugin::LoadGusXml">
    <manualGet fileOrDir="global/ontology/alignmentQuality/%RESOURCE_VERSION%/blatalignmentquality.xml"/>
    <pluginArgs>--filename @@dataDir@@/blatalignmentquality.xml</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="isolateVocabulary">
    <prop name="version"/>
  <resource resource="isolateVocabulary_RSRC" version="${version}"
      plugin="ApiCommonData::Load::Plugin::InsertIsolateVocabulary">
    <manualGet fileOrDir="global/ontology/isolate/%RESOURCE_VERSION%/isolateVocabulary.txt"/>
    <pluginArgs>--isolateVocabularyFile @@dataDir@@/isolateVocabulary.txt</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="continents">
    <prop name="version"/>
  <resource resource="Continents_RSRC" version="${version}"
      plugin="ApiCommonData::Load::Plugin::InsertContinents">
    <manualGet fileOrDir="global/ontology/Continents/%RESOURCE_VERSION%/continents.txt"/>
    <pluginArgs>--continentsFile @@dataDir@@/continents.txt</pluginArgs>
  </resource>
  </datasetClass>

  <datasetClass class="bibRefType">
    <prop name="version"/>
  <resource resource="BibRefType_RSRC" version="${version}"
      plugin="GUS::Supported::Plugin::LoadGusXml">
    <manualGet fileOrDir="global/ontology/bibliographicReferenceType/%RESOURCE_VERSION%/ncbiPublicationTypes.xml"/>
    <pluginArgs>--filename @@dataDir@@/ncbiPublicationTypes.xml</pluginArgs>
  </resource>
  </datasetClass>


</datasetClasses>
