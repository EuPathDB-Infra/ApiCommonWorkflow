<datasetClasses>

  <datasetClass class="organism">
    <prop name="organismAbbrev"/>
    <prop name="projectName"/>
    <prop name="publicOrganismAbbrev"/>
    <prop name="organismFullName"/>
    <prop name="organismNameForFiles"/>
    <prop name="ncbiTaxonId"/>
    <prop name="speciesNcbiTaxonId"/>
    <prop name="isReferenceStrain"/>
    <prop name="isAnnotatedGenome"/>
    <prop name="isDraftGenome"/>
    <prop name="hasTemporaryNcbiTaxonId"/>
    <prop name="orthomclAbbrev"/>
    <prop name="strainAbbrev"/>
    <prop name="hasPlastidGenomeSequence"/>
    <prop name="hasMitochondrialGenomeSequence"/>
    <prop name="hasDeprecatedGenes"/>
    <prop name="genomeSource"/>
    <prop name="genomeVersion"/>
    <prop name="runtRNAScan"/>
    <prop name="runExportPred"/>
    <prop name="taxonHierarchyForBlastxFilter"/>
    <prop name="skipGenomeAnalysis"/>
    <prop name="includeInComparativeGenomics"/>

    <prop name="mapAssemblySeqsAndAssemblies"/>
    <prop name="usePredictedTranscripts"/>
    <prop name="distanceBetweenStartsForAlignmentsInSameCluster"/>

    <prop name="genomeTopLevelSoTerms"/>

    <prop name="loadEpitope"/>
    <prop name="loadProductName"/>
    <prop name="insertVirtualSeqFromAgpFile"/>

    <prop name="repeatMaskSpecies"/>
    <prop name="maxIntronSize"/>
    <prop name="genomeSize"/>

    <graphFile planFile="project.xml"/>

  </datasetClass>

  <datasetClass class="validateOrganismInfo">
    <prop name="organismAbbrev"/>
    <prop name="strainAbbrev"/>
    <prop name="projectName"/>
    <prop name="ncbiTaxonId"/>
    <prop name="speciesNcbiTaxonId"/>
  </datasetClass>



  <!-- Category: genome -->

  <datasetClass class="genbank_primary_genome">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="mapFile"/>

    <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_genbank/%RESOURCE_VERSION%/final/genome.gbf"/>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --mapFile @gusHome@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.gbf --fileFormat genbank --soCvsVersion @@SO_VER@@ --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="genbank_secondary_genome">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="mapFile"/>

     <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      parentResource="${organismAbbrev}_primary_genome_RSRC">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${soTerm}_${name}_genbank/%RESOURCE_VERSION%/final/genome.gbf"/>

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @gusHome@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/genome.gbf --fileFormat genbank --soCvsVersion @@SO_VER@@ --organism ${ncbiTaxonId} --seqSoTerm ${soTerm} --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="GeneDB_GFF_primary_genome_sequence">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>
    <prop name="regex"/>

    <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/GeneDB_GFF/%RESOURCE_VERSION%/final"/>

      <unpack>makeCustomFastaAndGffFromGff3 --input_dir @@dataDir@@/%RESOURCE_VERSION%/final --output_fasta @@dataDir@@/genome.fasta --output_gff @@dataDir@@/genome.gff3</unpack>

      <unpack>preprocessGFF3 --input_gff @@dataDir@@/genome.gff3 --output_gff @@dataDir@@/genome.gff</unpack>

      <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --ncbiTaxId ${ncbiTaxonId} --externalDatabaseVersion %RESOURCE_VERSION% --sequenceFile @@dataDir@@/genome.fasta --SOTermName '${soTerm}'  --regexSourceId  '${regex}' --tableName "DoTS::ExternalNASequence"</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="GeneDB_GFF_primary_genome_features">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="soTerm"/>

    <graphFile planFile="genomeSequenceAndFeatures.xml"/>

    <resource resource="${organismAbbrev}_primary_genome_features_RSRC"
              version="${version}"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      internalDescrip="">

      <manualGet fileOrDir="global/empty"/>

      <pluginArgs>--extDbName %PARENT_RESOURCE_NAME% --extDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @@gusHome@@/lib/xml/isf/geneDBGFF2Gus.xml --inputFileOrDir @@dataDir@@/../${organismAbbrev}_primary_genome_RSRC/final/genome.gff --inputFileExtension "gff"  --fileFormat gff3 --soCvsVersion @@SO_VER@@ --defaultOrganism ${ncbiTaxonId}  --seqSoTerm '${soTerm}' --validationLog @@dataDir@@/validation.log --bioperlTreeOutput @@dataDir@@/bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="genome_virtual_sequence_agp">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="parentDataset"/>
    <prop name="virtualSeqSOTerm"/>
    <prop name="sourceIdPrefix"/>

    <resource resource="${organismAbbrev}_genome_virtual_sequence_agp_RSRC"
              version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertVirtualSeqFromAgpFile"
	      parentResource="${organismAbbrev}_primary_genome_RSRC">
      
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genome/${virtualSeqSOTerm}_assembly_agp/%RESOURCE_VERSION%/final/assembly.agp"/>

      <pluginArgs>--agpFile @@dataDir@@/assembly.agp --seqPieceExtDbName %PARENT_RESOURCE_NAME% --seqPieceExtDbRlsVer %PARENT_RESOURCE_VERSION% --virSeqExtDbName %RESOURCE_NAME% --virSeqExtDbRlsVer %RESOURCE_VERSION% --virtualSeqSOTerm ${virtualSeqSOTerm}  --ncbiTaxId ${ncbiTaxonId} --soVer @@SO_VER@@ --sourceIdPrefix ${sourceIdPrefix}</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: genomeFeature -->

  <datasetClass class="genomeFeatures_GFF2">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="mapFile"/>
    <prop name="gff2GroupTag"/>

    <graphFile planFile="optional.xml"/>

    <resource resource="${organismAbbrev}_genomeFeature_${name}_GFF2_RSRC"
              version="${version}"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      parentResource="${organismAbbrev}_primary_genome_RSRC">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/genomeFeature/${name}_GFF/%RESOURCE_VERSION%/final/features.gff"/>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --seqExtDbName %PARENT_RESOURCE_NAME% --seqExtDbRlsVer %PARENT_RESOURCE_VERSION% --mapFile @gusHome@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/features.gff --fileFormat gff2  --gff2GroupTag "${gff2GroupTag}" --soCvsVersion @@SO_VER@@ --defaultOrganism ${ncbiTaxonId} --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </resource>
  </datasetClass>


  <!-- Category: ESTs -->

  <datasetClass class="dbEST">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="speciesNcbiTaxonId"/>

    <graphFile planFile="ESTs.xml"/>

    <resource resource="${organismAbbrev}_dbEST_RSRC" version="@@${organismAbbrev}_dbEST_VER@@"
	      plugin="GUS::Supported::Plugin::dbEST"
	      internalDescrip="">
      <manualGet fileOrDir="global/empty"/>

      <unpack>getSubTaxa --ncbiTaxId ${speciesNcbiTaxonId} --outputFile @@dataDir@@/taxonIdFile</unpack>

      <unpack>createPropFile --file @@dataDir@@/dbestProp --propList "dbestLogin:@@dbestLogin@@,dbestPswd:@@dbestPswd@@"</unpack>

      <pluginArgs>--span 500 --taxonFile @@dataDir@@/taxonIdFile --extDbName %RESOURCE_NAME% --extDbRlsVer %%RESOURCE_VER% --soVer @@SO_VER@@ --dbestLoginFile @@dataDir@@/dbestProp --dbestConnect "dbi:Oracle:dbst100n" </pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="ESTsFromFasta">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="version"/>
    <prop name="sourceIdRegex"/>
    <prop name="flag"/> <!-- -\-\putativeFullLength or null -->
    <prop name="libraryVector"/>
    <prop name="libraryStage"/>
    <prop name="libraryName"/>
    <prop name="libraryDesc"/>
    <prop name="contactName"/>
    <prop name="contactAddress1"/>
    <prop name="contactAddress2"/>

    <graphFile planFile="ESTs.xml"/>

    <resource resource="${organismAbbrev_EST_${name}_sequences_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadEstsFromFastaFile"
	      internalDescrip="">
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/EST/${name}/${version}/final/ests.fasta"/>
      <pluginArgs>--sourceIdRegex "${sourceIdRegex}" --fastaFile @@dataDir@@/ests.fasta --externalDatabaseName %RESOURCE_NAME% --externalDatabaseVer %RESOURCE_VERSION%  --SOTermName 'transcript' --ncbiTaxId ${ncbiTaxonId} --libraryVector '${libraryVector}' --contactName '${contactName}' --contactAddress1 "${contactAddress1}" --contactAddress2 "${contactAddress2}" ${flag} --libraryStage '${libraryStage}' --libraryName '${libraryName}' --libraryDesc "${libraryDesc}"</pluginArgs>
    </resource>
  </datasetClass>


  <!-- Category: IEDB epitpotes -->

  <datasetClass class="IEDB_sequences" >
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>

    <resource resource="${organismAbbrev}_epitope_IEDB_RSRC"
              version="@@${organismAbbrev}_epitope_IEDB_VER@@"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences">

      <manualGet fileOrDir="global/empty"/>

      <!-- FIX: these unpacks need to navigate up to the species taxon id -->
      <!-- validate that IEDB knows about this taxon id.  this unpack just greps IEDB's taxon list -->
      <unpack><![CDATA[unzip -p @@manualDelivery@@/common/epitope/IEDB/@@${organismAbbrev}_epitope_IEDB_VER@@/fromProvider/OrganismList.zip | grep "<OrganismId>${ncbiTaxonId}<"]]></unpack>

      <unpack>iedbMakeTabFileFromXml --input_dir @@manualDelivery@@/common/epitope/IEDB/@@${organismAbbrev}_epitope_IEDB_VER@@/final/iedb_export_fixed --outputfile @@dataDir@@/oneOrganism.txt --NCBITaxId ${ncbiTaxonId}</unpack>

      <unpack>mkdir -p @@dataDir@@/fasta</unpack>

      <unpack>iedbSimplifyTabFile --inputFile @@dataDir@@/oneOrganism.txt --outputFile @@dataDir@@/oneOrganismSimplified.txt </unpack>

      <unpack>generateEpitopeFastaFile --inputFile @@dataDir@@/oneOrganismimplified.txt --outputFile @@dataDir@@/fasta/IEDBExport.fsa </unpack>

      <getAndUnpackOutput dir="@@dataDir@@/fasta"/>

      <getAndUnpackOutput file="@@dataDir@@/simplified.txt"/>

      <pluginArgs><![CDATA[--seqFileDir @@dataDir@@/fasta --externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --soTermName "protein_binding_site" --regexSourceId ">(\d+)|" --tableName "DoTS::MotifAASequence" --logFrequency 100 --regexNcbiTaxId "\|.*\|(.*)" --regexName "\|(.*)\|.*"]]></pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="IEDB_dbxrefs">
    <prop name="organismAbbrev"/>
    <resource resource="${organismAbbrev}_dbxref_epitope_IEDB_RSRC"
	      version="@@${organismAbbrev}_dbxref_epitope_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs">

      <manualGet fileOrDir="global/empty"/>

      <unpack>createEpitopeDbRefFile --inputDir @@dataDir@@/../${organismAbbrev}_epitope_IEDB_RSRC/IEDB_Epitopes_fixed --outputFile @@dataDir@@/dbRefs.txt</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/dbRefs.txt --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "primary_identifier, remark" --tableName "AASequenceDbRef"</pluginArgs>
    </resource>
  </datasetClass>


  <!-- Category: gene aliases -->

  <datasetClass class="GeneDB_GFF_gene_aliases">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>

    <graphFile planFile="geneAliases.xml"/>

    <resource resource="${organismAbbrev}_GeneDB_GFF_gene_aliases_RSRC"
	      version="@@${organismAbbrev}_GeneDB_GFF_gene_aliases_RSRC@@"
	      plugin="ApiCommonData::Load::Plugin::InsertNaFeatureNaGene"
	      internalDescrip="">

      <manualGet fileOrDir="global/empty"/>

      <unpack>grep 'previous_systematic_id=' @@dataDir@@/../${organismAbbrev}_genedb_gff_genome_RSRC/genome.gff3 >  @@dataDir@@/previousIdLines</unpack>

      <unpack><![CDATA[perl -e '%hsh;while(<>){chomp; @arr=split(/\t/,$_); $arr[8]=~ /ID=(\w+)\:.+previous_systematic_id\=(\w+)/; $hsh{$1}=$2;} foreach $k(keys %hsh){print "$k\t$hsh{$k}\n";}' @@dataDir@@/previousIdLines > @@dataDir@@/new2oldIds.txt]]></unpack>

      <pluginArgs>--MappingFile @@dataDir@@/new2oldIds.txt</pluginArgs>
    </resource>
  </datasetClass>


  <!-- Category: dbxrefs -->
  <datasetClass class="dbxref_simple">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="columnSpec"/>
    <prop name="table"/>

    <graphFile planFile="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_${name}_RSRC"
	      version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dbxref/${name}/%RESOURCE_VERSION%/final/mapping.txt"/>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/mapping.txt --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "${columnSpec}" --tableName ${table}</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="dbxref_gene2ApiLoc">
    <prop name="organismAbbrev"/>
    <prop name="projectName"/>
    <!-- organism name as found on the ApiLoc site -->
    <prop name="ApiLocOrganism"/>

    <graphFile planFile="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_ApiLoc_RSRC"
	      version="@@${organismAbbrev}_dbxref_ApiLoc_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dbxref/gene2ApiLoc/%RESOURCE_VERSION%/final/${organismAbbrev}.html"/>

      <unpack>makeDbxRefsFromApiLocHtml @@dataDir@@/${organismAbbrev}.html "${ApiLocOrganism}" > @@dataDir@@/dbxrefs.txt</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/dbxrefs.txt --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VER% --columnSpec "remark" --tableName "DbRefNAFeature"</pluginArgs>
    </resource>
  </datasetClass>


  <datasetClass class="dbxref_gene2Entrez">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>

    <graphFile planFile="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_gene2Entrez_RSRC"
	      version="@@${organismAbbrev}_dbxref_gene2Entrez_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
	      parentResource="${organismAbbrev}_primary_genome_RSRC">


      <manualGet fileOrDir="common/dbxref/gene2Entrez/%RESOURCE_VERSION%/final/gene_info.gz"/>

      <unpack>ncbiGeneInfo2DbRefsFile @@dataDir@@/gene_info.gz ${ncbiTaxonId} > gene2entrez.tab</unpack>

      <unpack>rm -f @@dataDir@@/gene_info.gz</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/gene2entrez.tab --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "primary_identifier,secondary_identifier,remark" --tableName "DbRefNAFeature"  --geneExternalDatabaseSpec '%PARENT_RESOURCE_NAME%|%PARENT_RESOURCE_VERSION%'  --idType 'alternate id'</pluginArgs>

    </resource>
  </datasetClass>

  <!-- depends on dbxref_gene2Entrez -->
  <datasetClass class="dbxref_gene2Uniprot">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>

    <graphFile planFile="dbXRefs.xml"/>

    <resource resource="${organismAbbrev}_dbxref_gene2Uniprot_RSRC"
	      version="@@${organismAbbrev}_dbxref_gene2Uniprot_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertDBxRefs"
	      parentResource="${organismAbbrev}_primary_genome_RSRC">

      <manualGet fileOrDir="common/dbxref/gene2Uniprot/%RESOURCE_VERSION%/final/idmapping_selected.tab.gz"/>

      <!-- need to use the gene2entrez file to get map of NCBI ids -->
      <unpack>uniprotIdMap2DbRefsFile @@dataDir@@/idmapping_selected.tab.gz @@dataDir@@/../${organismAbbrev}_dbxref_gene2Entrez_RSRC/entrez2gene.tab > @@dataDir@@/gene2uniprot.tab</unpack>

      <pluginArgs>--DbRefMappingFile @@dataDir@@/gene2uniprot.tab --extDbName %RESOURCE_NAME% --extDbReleaseNumber %RESOURCE_VERSION% --columnSpec "primary_identifier,secondary_identifier,remark" --tableName "DbRefNAFeature"  --geneExternalDatabaseSpec '%PARENT_RESOURCE_NAME%|%PARENT_RESOURCE_VERSION%' --idType 'alternate id'</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: SNPs -->

  <!-- FIX WORKFLOW: need to change getAndAnalyzeSnps to use SNPs.gff -->
  <datasetClass class="SNPs_GFF">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="strainAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>

    <graphFile planFile="SNPs.xml"/>

    <resource resource="${organismAbbrev}_SNP_${name}_gff_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/SNP/${name}_gff/final/SNPs.gff"/>
      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: microarrayPlatform -->

  <!-- FIX WORKFLOW: need to change getAndMapProbes.xml to lose final/ -->
  <datasetClass class="microarrayPlatform">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="isAffymetrix"/>
    <prop name="isNimbleGen"/>
    <prop name="limitNU"/>
    <prop name="numInsertions"/>

    <graphFile planFile="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_microarrayPlatform_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayPlatform/${name}/%RESOURCE_VERSION%/final/probes.fsa"/>

      <getAndUnpackOutput file="@@dataDir@@/probes.fsa"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>

  <!-- FIX WORKFLOW: need to change getAndMapProbes.xml to lose final/ -->
  <datasetClass class="chipChipPlatform">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="limitNU"/>
    <prop name="numInsertions"/>

    <graphFile planFile="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_chipChipPlatform_${name}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayPlatform/${name}/%RESOURCE_VERSION%/final/probes.fsa"/>

      <getAndUnpackOutput file="@@dataDir@@/probes.fsa"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>
    </resource>
  </datasetClass>


  <!-- Category: microarrayExpression -->

  <!-- FIX: needs an analysis config file -->
  <!-- manual delivery and plugin or step class must be upgraded see redmine #4257 -->
  <datasetClass class="microarrayExpressionExperiment">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="version"/>
    <prop name="experimentName"/>
    <prop name="experimentVersion"/>
    <prop name="experimentNameForFiles"/>
    <prop name="microarrayPlatformName"/>
    <prop name="microarrayPlatformVersion"/>
    <prop name="doExpressionAnalysis"/>
    <prop name="isTimeSeries"/>

    <graphFile planFile="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_microarrayExpression_${experimentName}_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::DoNothing"
	      internalDescrip="">
      
      <manualGet fileOrDir="${projectName}/${organismAbbrev}/microarrayExpression/${experimentName}/%RESOURCE_VERSION%/final"/>

      <getAndUnpackOutput dir="@@dataDir@@/final"/>
      <getAndUnpackOutput file="@@dataDir@@/final/expression_profile_config.txt"/>
      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>

    </resource>
  </datasetClass>


  <!-- Category: ChIP Chip-->

  <datasetClass class="chipChipExperiment">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="experimentName"/>
    <prop name="experimentVersion"/>
    <prop name="chipChipPlatformName"/>
    <prop name="chipChipPlatformVersion"/>
    <prop name="peakFinderArgs"/>
    <prop name="loadPeakCalls"/>

    <graphFile planFile="arrayStudies.xml"/>

    <resource resource="${organismAbbrev}_chipChip_${experimentName}_RSRC" version="${experimentVersion}"
	      plugin="ApiCommonData::Load::Plugin::LoadNothing"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/chipChip/${experimentName}/%RESOURCE_VERSION%/final"/>

      <pluginArgs>--dbRefExternalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%"</pluginArgs>

    </resource>
  </datasetClass>


  <datasetClass class="chipChipSample">
    <prop name="experimentName"/>
    <prop name="sampleName"/>
    <prop name="sampleOrder"/>
 
    <graphFile planFile="chipChipSamples.xml"/>

  </datasetClass>


  <!-- Category: fasta sequence -->

  <!-- when we have dataset subclasses, this can be a subclass of fastaSequence -->
  <!-- with category = dnaSeq -->
  <datasetSubclass class="clonedInsertEnds" includesClass="fastaSequence">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="category"/>
    <prop name="table"/>
    <prop name="soTermName"/>
    <prop name="regexSourceId"/>
    <prop name="repeatMaskSpecies"/>
 
    <graphFile planFile="optional.xml"/>

    <resource resource="${organismAbbrev$_dnaSeq_${name}_sequences_RSRC" version="2001-09-19"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/dnaSeq/${name}/%RESOURCE_VERSION%/final/seqs.fasta"/>

      <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/seqs.fasta --soTermName ${soTermName} --regexSourceId "${regexSourceId}" --tableName "${table}"</pluginArgs>
    </resource>
  </datasetSubclass>

  <datasetClass class="fastaSequence">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="category"/>
    <prop name="table"/>
    <prop name="soTermName"/>
    <prop name="regexSourceId"/>

    <resource resource="${organismAbbrev$_${category}_${name}_sequences_RSRC" version="2001-09-19"
	      plugin="GUS::Supported::Plugin::LoadFastaSequences"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/${category}/${name}/%RESOURCE_VERSION%/final/seqs.fasta"/>

      <pluginArgs>--externalDatabaseName %RESOURCE_NAME% --externalDatabaseVersion %RESOURCE_VERSION% --ncbiTaxId ${ncbiTaxonId} --sequenceFile @@dataDir@@/seqs.fasta --soTermName ${soTermName} --regexSourceId "${regexSourceId}" --tableName "${table}"</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: SAGE tags -->

  <datasetClass class="sageTagSequences">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
 
    <graphFile planFile="optional.xml"/>

    <resource resource="${organismAbbrev}_sageTag_${name}_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadSagePrimers">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/sageTag/${name}/%RESOURCE_VERSION%/final/primers.txt"/>

      <pluginArgs>--primers_file @@dataDir@@/primers.txt</pluginArgs>

    </resource>

  </datasetClass>

  <datasetClass class="sageTagFrequencies">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="normalizeFrequencies"/>
 
    <graphFile planFile="optional.xml"/>

    <resource resource="${organismAbbrev}_sageTag_${name}_frequencies_RSRC" version="${version}"
	      plugin="GUS::Supported::Plugin::LoadSageFrequencies"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/sageTag/${name}/%RESOURCE_VERSION%/final/freqs.txt"/>

      <pluginArgs>--freq_file @@dataDir@@/freqs.txt</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: product names -->

  <datasetClass class="productNames">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
 
    <graphFile planFile="productNames.xml"/>

    <resource resource="${organismAbbrev}_function_${name}_product_names_RSRC" version="${version}"
	      plugin="ApiCommonData::Load::Plugin::InsertGeneFeatProductFromTabFile"
	      parentResource="${organismAbbrev}_primary_genome_RSRC">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/function/${name}_product_names/%RESOURCE_VERSION%/final/product.txt"/>

      <pluginArgs>--file @@dataDir@@/product.txt  --productDbName %PARENT_RESOURCE_NAME% --productDbVer %PARENT_RESOURCE_VERSION%</pluginArgs>
    </resource>
  </datasetClass>

  <!-- Category: isolates -->

  <datasetClass class="isolates_genbank">
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
 
    <graphFile planFile="optional.xml"/>

    <resource resource="${organismAbbrev}_isolates_genbank_RSRC" version="TODAY"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures"
	      internalDescrip="">

      <manualGet fileOrDir="global/empty"/>

      <!-- get the file from genbank, querying by ncbiTaxonId -->
      <unpack>getIsolatesFromGenbank --ncbiTaxonId ${ncbiTaxonId} --outputFile @@dataDir@@/isolates.gb</unpack>

      <unpack>fixIsolateSequences --seq_file @@dataDir@@/isolates.gb --fixed_seq_file @@dataDir@@/isolates_fixed_1.gb --removed_seq_file @@dataDir@@/isolates_excluded.gb</unpack>

      <unpack>sed "s/SOURCE\tplastid/SOURCE\t/" @@dataDir@@/sequences_fixed.gb | sed "s/SOURCE\tapicoplast/SOURCE\t/" | sed "s/SOURCE\tmitochondrion/SOURCE\t/" > @@dataDir@@/isolates_fixed_2.gb</unpack>

      <pluginArgs>--extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VER% --mapFile @@gusHome@@/lib/xml/isf/GenbankIsolates2gus.xml --inputFileOrDir @@dataDir@@/isolates_fixed_2.gb --fileFormat genbank --soCvsVersion @@SO_VER@@ --defaultOrganism ${ncbiTaxonId}  --seqSoTerm "region" --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </resource>
  </datasetClass>

  <!-- the ncbi taxon ID is not important.  isolate strain info is provided by dedicated isolate info tables -->
  <datasetClass class="isolatesFeaturesGFF2">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="ncbiTaxonId"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="mapfile"/>
 
    <graphFile planFile="optional.xml"/>

    <resource resource="${organismAbbrev}_isolate_${name}_features_RSRC" version="2009-03-23"
	      plugin="GUS::Supported::Plugin::InsertSequenceFeatures">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/isolate/${name}/%RESOURCE_VERSION%/final/isolates.gff"/>

      <pluginArgs> --extDbName %RESOURCE_NAME% --extDbRlsVer %RESOURCE_VERSION% --mapFile @gusHome@/lib/xml/isf/${mapFile} --inputFileOrDir @@dataDir@@/isolates.gff --fileFormat gff2 --gff2GroupTag locus_tag --naSequenceSubclass ExternalNASequence --seqIdColumn source_id  --soCvsVersion @SO_VER@ --defaultOrganism ${ncbiTaxonId} --bioperlTreeOutput @@dataDir@@/bioperlTree.out</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="massSpecPreprocessed">
    <prop name="projectName"/>
    <prop name="organismAbbrev"/>
    <prop name="name"/>
    <prop name="version"/>
    <prop name="flag"/>
 
    <graphFile planFile="massSpec.xml"/>

    <resource resource="${organismAbbrev}_massSpec_${name}_RSRC" version="2007-05-11"
	      plugin="ApiCommonData::Load::Plugin::InsertMassSpecPreprocessed"
	      parentResource="${organismAbbrev}_primary_genome_RSRC"
	      internalDescrip="">

      <manualGet fileOrDir="${projectName}/${organismAbbrev}/massSpec/${name}/%RESOURCE_VERSION%/final"/>

      <pluginArgs>--inputDir @@dataDir@@/final --externalDatabaseSpec "%RESOURCE_NAME%|%RESOURCE_VERSION%" --geneExternalDatabaseSpec '%PARENT_RESOURCE_NAME%|%PARENT_RESOURCE_VERSION%' ${flag} </pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="orthomclPhyletic">
    <prop name="projectName"/>

    <graphFile planFile="comparativeGenomics.xml"/>

    <resource resource="OrthoMCL_Phyletic_RSRC" version="@@OrthoMCL_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertPhylogeneticProfile">
      <manualGet fileOrDir="common/orthology/orthoMCL/%RESOURCE_VERSION%/orthomclGroups.txt"/>
      <pluginArgs>--projectName ${projectName} --groupsFile @@dataDir@@/orthomclGroups.txt</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="orthomcl">
    <prop name="projectName"/>

    <graphFile planFile="comparativeGenomics.xml"/>

    <resource resource="OrthoMCL_RSRC" version="@@OrthoMCL_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertOrthologousGroups">
      <manualGet fileOrDir="common/orthology/orthoMCL/%RESOURCE_VERSION%/orthomclGroups.txt"/>
      <pluginArgs>--projectName ${projectName} --OrthologFile @@dataDir@@/orthomclGroups.txt --AnalysisName 'OrthoMCL-based Orthology Predictions' --AnalysisDescription 'OrthoMCL-based Orthology Predictions' --ElementResultTable "DoTS::GeneFeature"</pluginArgs>
    </resource>
  </datasetClass>

  <datasetClass class="orthomclTree">
    <prop name="projectName"/>

    <graphFile planFile="comparativeGenomics.xml"/>

    <resource resource="OrthoMCLTree_RSRC" version="@@OrthoMCL_VER@@"
	      plugin="ApiCommonData::Load::Plugin::InsertOrthomclTaxon">
      <manualGet fileOrDir="common/orthology/orthoMCL/%RESOURCE_VERSION%/orthomclClades.txt"/>
      <pluginArgs>--cladeFile @@dataDir@@/%RESOURCE_VERSION%/orthomclClades.txt --speciesFile @@dataDir@@/%RESOURCE_VERSION%/orthomclTaxons.txt </pluginArgs>
    </resource>
  </datasetClass>

</datasetClasses>
